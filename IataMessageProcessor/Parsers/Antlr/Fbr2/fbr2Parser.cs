//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fbr2.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fbr2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SeparatorSlant=1, SeparatorHyphen=2, A=3, N=4, G=5, SeparatorCrlf=6;
	public const int
		RULE_fbr2 = 0, RULE_standardMessageIdentification = 1, RULE_flightInformation = 2, 
		RULE_requestReference = 3, RULE_flightIdentification = 4, RULE_requestingOfficeMessageAddress = 5, 
		RULE_rofr = 6, RULE_requestingOfficeFileReference = 7, RULE_requestingParticipantIdentification = 8, 
		RULE_standardMessageIdentifier = 9, RULE_messageTypeVersionNumber = 10, 
		RULE_lineIdentifier = 11, RULE_carrierCode = 12, RULE_flightNumber = 13, 
		RULE_dayOfScheduledDeparture = 14, RULE_monthOfScheduledDeparture = 15, 
		RULE_airportCodeOfLoading = 16, RULE_airportCodeOfUnloading = 17, RULE_airportCityCode = 18, 
		RULE_officeFunctionDesignator = 19, RULE_companyDesignator = 20, RULE_fileReference = 21, 
		RULE_participantIdentifier = 22, RULE_participantCode = 23;
	public static readonly string[] ruleNames = {
		"fbr2", "standardMessageIdentification", "flightInformation", "requestReference", 
		"flightIdentification", "requestingOfficeMessageAddress", "rofr", "requestingOfficeFileReference", 
		"requestingParticipantIdentification", "standardMessageIdentifier", "messageTypeVersionNumber", 
		"lineIdentifier", "carrierCode", "flightNumber", "dayOfScheduledDeparture", 
		"monthOfScheduledDeparture", "airportCodeOfLoading", "airportCodeOfUnloading", 
		"airportCityCode", "officeFunctionDesignator", "companyDesignator", "fileReference", 
		"participantIdentifier", "participantCode"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fbr2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fbr2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fbr2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fbr2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Fbr2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentificationContext standardMessageIdentification() {
			return GetRuleContext<StandardMessageIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightInformationContext flightInformation() {
			return GetRuleContext<FlightInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequestReferenceContext requestReference() {
			return GetRuleContext<RequestReferenceContext>(0);
		}
		public Fbr2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbr2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbr2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fbr2Context fbr2() {
		Fbr2Context _localctx = new Fbr2Context(Context, State);
		EnterRule(_localctx, 0, RULE_fbr2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			standardMessageIdentification();
			State = 49;
			flightInformation();
			State = 50;
			requestReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentifierContext standardMessageIdentifier() {
			return GetRuleContext<StandardMessageIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fbr2Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeVersionNumberContext messageTypeVersionNumber() {
			return GetRuleContext<MessageTypeVersionNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fbr2Parser.SeparatorCrlf, 0); }
		public StandardMessageIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentificationContext standardMessageIdentification() {
		StandardMessageIdentificationContext _localctx = new StandardMessageIdentificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_standardMessageIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			standardMessageIdentifier();
			State = 53;
			Match(SeparatorSlant);
			State = 54;
			messageTypeVersionNumber();
			State = 55;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fbr2Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlightIdentificationContext flightIdentification() {
			return GetRuleContext<FlightIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fbr2Parser.SeparatorCrlf, 0); }
		public FlightInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightInformationContext flightInformation() {
		FlightInformationContext _localctx = new FlightInformationContext(Context, State);
		EnterRule(_localctx, 4, RULE_flightInformation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			lineIdentifier();
			State = 58;
			Match(SeparatorSlant);
			State = 59;
			flightIdentification();
			State = 60;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fbr2Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fbr2Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequestingOfficeMessageAddressContext requestingOfficeMessageAddress() {
			return GetRuleContext<RequestingOfficeMessageAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RofrContext rofr() {
			return GetRuleContext<RofrContext>(0);
		}
		public RequestReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestReferenceContext requestReference() {
		RequestReferenceContext _localctx = new RequestReferenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_requestReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			lineIdentifier();
			State = 63;
			Match(SeparatorSlant);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 64;
				requestingOfficeMessageAddress();
				}
			}

			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 67;
				rofr();
				}
			}

			State = 70;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightNumberContext flightNumber() {
			return GetRuleContext<FlightNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fbr2Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fbr2Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
			return GetRuleContext<DayOfScheduledDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
			return GetRuleContext<MonthOfScheduledDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfLoadingContext airportCodeOfLoading() {
			return GetRuleContext<AirportCodeOfLoadingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfUnloadingContext airportCodeOfUnloading() {
			return GetRuleContext<AirportCodeOfUnloadingContext>(0);
		}
		public FlightIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightIdentificationContext flightIdentification() {
		FlightIdentificationContext _localctx = new FlightIdentificationContext(Context, State);
		EnterRule(_localctx, 8, RULE_flightIdentification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			carrierCode();
			State = 73;
			flightNumber();
			State = 74;
			Match(SeparatorSlant);
			State = 75;
			dayOfScheduledDeparture();
			State = 76;
			monthOfScheduledDeparture();
			State = 77;
			Match(SeparatorSlant);
			State = 78;
			airportCodeOfLoading();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 79;
				airportCodeOfUnloading();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingOfficeMessageAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficeFunctionDesignatorContext officeFunctionDesignator() {
			return GetRuleContext<OfficeFunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyDesignatorContext companyDesignator() {
			return GetRuleContext<CompanyDesignatorContext>(0);
		}
		public RequestingOfficeMessageAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingOfficeMessageAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingOfficeMessageAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingOfficeMessageAddressContext requestingOfficeMessageAddress() {
		RequestingOfficeMessageAddressContext _localctx = new RequestingOfficeMessageAddressContext(Context, State);
		EnterRule(_localctx, 10, RULE_requestingOfficeMessageAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			airportCityCode();
			State = 83;
			officeFunctionDesignator();
			State = 84;
			companyDesignator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RofrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fbr2Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequestingOfficeFileReferenceContext requestingOfficeFileReference() {
			return GetRuleContext<RequestingOfficeFileReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequestingParticipantIdentificationContext requestingParticipantIdentification() {
			return GetRuleContext<RequestingParticipantIdentificationContext>(0);
		}
		public RofrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rofr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRofr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RofrContext rofr() {
		RofrContext _localctx = new RofrContext(Context, State);
		EnterRule(_localctx, 12, RULE_rofr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(SeparatorSlant);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0)) {
				{
				State = 87;
				requestingOfficeFileReference();
				}
			}

			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 90;
				requestingParticipantIdentification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingOfficeFileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileReferenceContext fileReference() {
			return GetRuleContext<FileReferenceContext>(0);
		}
		public RequestingOfficeFileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingOfficeFileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingOfficeFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingOfficeFileReferenceContext requestingOfficeFileReference() {
		RequestingOfficeFileReferenceContext _localctx = new RequestingOfficeFileReferenceContext(Context, State);
		EnterRule(_localctx, 14, RULE_requestingOfficeFileReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			fileReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingParticipantIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fbr2Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fbr2Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdentifierContext participantIdentifier() {
			return GetRuleContext<ParticipantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantCodeContext participantCode() {
			return GetRuleContext<ParticipantCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		public RequestingParticipantIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingParticipantIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingParticipantIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingParticipantIdentificationContext requestingParticipantIdentification() {
		RequestingParticipantIdentificationContext _localctx = new RequestingParticipantIdentificationContext(Context, State);
		EnterRule(_localctx, 16, RULE_requestingParticipantIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(SeparatorSlant);
			State = 96;
			participantIdentifier();
			State = 97;
			Match(SeparatorSlant);
			State = 98;
			participantCode();
			State = 99;
			Match(SeparatorSlant);
			State = 100;
			airportCityCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public StandardMessageIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentifierContext standardMessageIdentifier() {
		StandardMessageIdentifierContext _localctx = new StandardMessageIdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_standardMessageIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(A);
			State = 103;
			Match(A);
			State = 104;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeVersionNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public MessageTypeVersionNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageTypeVersionNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageTypeVersionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeVersionNumberContext messageTypeVersionNumber() {
		MessageTypeVersionNumberContext _localctx = new MessageTypeVersionNumberContext(Context, State);
		EnterRule(_localctx, 20, RULE_messageTypeVersionNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(N);
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 107;
				Match(N);
				}
				break;
			}
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 110;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public LineIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineIdentifierContext lineIdentifier() {
		LineIdentifierContext _localctx = new LineIdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_lineIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(A);
			State = 114;
			Match(A);
			State = 115;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarrierCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public CarrierCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carrierCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarrierCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarrierCodeContext carrierCode() {
		CarrierCodeContext _localctx = new CarrierCodeContext(Context, State);
		EnterRule(_localctx, 24, RULE_carrierCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(A);
			State = 118;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fbr2Parser.A, 0); }
		public FlightNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightNumberContext flightNumber() {
		FlightNumberContext _localctx = new FlightNumberContext(Context, State);
		EnterRule(_localctx, 26, RULE_flightNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(N);
			State = 121;
			Match(N);
			State = 122;
			Match(N);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 123;
				Match(N);
				}
			}

			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 126;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public DayOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
		DayOfScheduledDepartureContext _localctx = new DayOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 28, RULE_dayOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(N);
			State = 130;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public MonthOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
		MonthOfScheduledDepartureContext _localctx = new MonthOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 30, RULE_monthOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(A);
			State = 133;
			Match(A);
			State = 134;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfLoadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public AirportCodeOfLoadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfLoading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfLoading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfLoadingContext airportCodeOfLoading() {
		AirportCodeOfLoadingContext _localctx = new AirportCodeOfLoadingContext(Context, State);
		EnterRule(_localctx, 32, RULE_airportCodeOfLoading);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(A);
			State = 137;
			Match(A);
			State = 138;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfUnloadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public AirportCodeOfUnloadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfUnloading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfUnloading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfUnloadingContext airportCodeOfUnloading() {
		AirportCodeOfUnloadingContext _localctx = new AirportCodeOfUnloadingContext(Context, State);
		EnterRule(_localctx, 34, RULE_airportCodeOfUnloading);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(A);
			State = 141;
			Match(A);
			State = 142;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCityCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		public AirportCityCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCityCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCityCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCityCodeContext airportCityCode() {
		AirportCityCodeContext _localctx = new AirportCityCodeContext(Context, State);
		EnterRule(_localctx, 36, RULE_airportCityCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(A);
			State = 145;
			Match(A);
			State = 146;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficeFunctionDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public OfficeFunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officeFunctionDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOfficeFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OfficeFunctionDesignatorContext officeFunctionDesignator() {
		OfficeFunctionDesignatorContext _localctx = new OfficeFunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_officeFunctionDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanyDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public CompanyDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companyDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanyDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanyDesignatorContext companyDesignator() {
		CompanyDesignatorContext _localctx = new CompanyDesignatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_companyDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 152;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fbr2Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fbr2Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fbr2Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fbr2Parser.SeparatorCrlf, i);
		}
		public FileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileReferenceContext fileReference() {
		FileReferenceContext _localctx = new FileReferenceContext(Context, State);
		EnterRule(_localctx, 42, RULE_fileReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 154;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public ParticipantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantIdentifierContext participantIdentifier() {
		ParticipantIdentifierContext _localctx = new ParticipantIdentifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_participantIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 159;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fbr2Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fbr2Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fbr2Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fbr2Parser.N, i);
		}
		public ParticipantCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifbr2Visitor<TResult> typedVisitor = visitor as Ifbr2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantCodeContext participantCode() {
		ParticipantCodeContext _localctx = new ParticipantCodeContext(Context, State);
		EnterRule(_localctx, 46, RULE_participantCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 164;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,6,170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,3,3,66,8,3,1,3,3,3,69,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,81,8,4,1,5,1,5,1,5,1,5,1,6,1,6,3,6,89,8,6,1,6,3,6,92,
		8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,3,10,
		109,8,10,1,10,3,10,112,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,3,13,125,8,13,1,13,3,13,128,8,13,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,20,1,20,1,20,1,21,4,21,156,8,21,11,21,12,21,157,1,22,
		4,22,161,8,22,11,22,12,22,162,1,23,4,23,166,8,23,11,23,12,23,167,1,23,
		0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,0,2,1,0,3,4,2,0,1,1,6,6,157,0,48,1,0,0,0,2,52,1,0,0,0,4,57,1,0,0,0,
		6,62,1,0,0,0,8,72,1,0,0,0,10,82,1,0,0,0,12,86,1,0,0,0,14,93,1,0,0,0,16,
		95,1,0,0,0,18,102,1,0,0,0,20,106,1,0,0,0,22,113,1,0,0,0,24,117,1,0,0,0,
		26,120,1,0,0,0,28,129,1,0,0,0,30,132,1,0,0,0,32,136,1,0,0,0,34,140,1,0,
		0,0,36,144,1,0,0,0,38,148,1,0,0,0,40,151,1,0,0,0,42,155,1,0,0,0,44,160,
		1,0,0,0,46,165,1,0,0,0,48,49,3,2,1,0,49,50,3,4,2,0,50,51,3,6,3,0,51,1,
		1,0,0,0,52,53,3,18,9,0,53,54,5,1,0,0,54,55,3,20,10,0,55,56,5,6,0,0,56,
		3,1,0,0,0,57,58,3,22,11,0,58,59,5,1,0,0,59,60,3,8,4,0,60,61,5,6,0,0,61,
		5,1,0,0,0,62,63,3,22,11,0,63,65,5,1,0,0,64,66,3,10,5,0,65,64,1,0,0,0,65,
		66,1,0,0,0,66,68,1,0,0,0,67,69,3,12,6,0,68,67,1,0,0,0,68,69,1,0,0,0,69,
		70,1,0,0,0,70,71,5,6,0,0,71,7,1,0,0,0,72,73,3,24,12,0,73,74,3,26,13,0,
		74,75,5,1,0,0,75,76,3,28,14,0,76,77,3,30,15,0,77,78,5,1,0,0,78,80,3,32,
		16,0,79,81,3,34,17,0,80,79,1,0,0,0,80,81,1,0,0,0,81,9,1,0,0,0,82,83,3,
		36,18,0,83,84,3,38,19,0,84,85,3,40,20,0,85,11,1,0,0,0,86,88,5,1,0,0,87,
		89,3,14,7,0,88,87,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,92,3,16,8,0,91,
		90,1,0,0,0,91,92,1,0,0,0,92,13,1,0,0,0,93,94,3,42,21,0,94,15,1,0,0,0,95,
		96,5,1,0,0,96,97,3,44,22,0,97,98,5,1,0,0,98,99,3,46,23,0,99,100,5,1,0,
		0,100,101,3,36,18,0,101,17,1,0,0,0,102,103,5,3,0,0,103,104,5,3,0,0,104,
		105,5,3,0,0,105,19,1,0,0,0,106,108,5,4,0,0,107,109,5,4,0,0,108,107,1,0,
		0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,112,5,4,0,0,111,110,1,0,0,0,111,
		112,1,0,0,0,112,21,1,0,0,0,113,114,5,3,0,0,114,115,5,3,0,0,115,116,5,3,
		0,0,116,23,1,0,0,0,117,118,5,3,0,0,118,119,5,3,0,0,119,25,1,0,0,0,120,
		121,5,4,0,0,121,122,5,4,0,0,122,124,5,4,0,0,123,125,5,4,0,0,124,123,1,
		0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,128,5,3,0,0,127,126,1,0,0,0,
		127,128,1,0,0,0,128,27,1,0,0,0,129,130,5,4,0,0,130,131,5,4,0,0,131,29,
		1,0,0,0,132,133,5,3,0,0,133,134,5,3,0,0,134,135,5,3,0,0,135,31,1,0,0,0,
		136,137,5,3,0,0,137,138,5,3,0,0,138,139,5,3,0,0,139,33,1,0,0,0,140,141,
		5,3,0,0,141,142,5,3,0,0,142,143,5,3,0,0,143,35,1,0,0,0,144,145,5,3,0,0,
		145,146,5,3,0,0,146,147,5,3,0,0,147,37,1,0,0,0,148,149,7,0,0,0,149,150,
		7,0,0,0,150,39,1,0,0,0,151,152,7,0,0,0,152,153,7,0,0,0,153,41,1,0,0,0,
		154,156,8,1,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,
		1,0,0,0,158,43,1,0,0,0,159,161,7,0,0,0,160,159,1,0,0,0,161,162,1,0,0,0,
		162,160,1,0,0,0,162,163,1,0,0,0,163,45,1,0,0,0,164,166,7,0,0,0,165,164,
		1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,47,1,0,0,0,
		12,65,68,80,88,91,108,111,124,127,157,162,167
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
