//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ffa4.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ffa4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierSsr=3, LineIdentifierOsi=4, SeparatorSlant=5, 
		SeparatorHyphen=6, A=7, N=8, G=9, SeparatorCrlf=10;
	public const int
		RULE_ffa4 = 0, RULE_standardMessageIdentification = 1, RULE_consignmentDetail = 2, 
		RULE_flightDetails = 3, RULE_specialServiceRequest = 4, RULE_otherServiceInformation = 5, 
		RULE_bookingReference = 6, RULE_shipmentReferenceInformation = 7, RULE_flightInfoDetails = 8, 
		RULE_flightIdentification = 9, RULE_airportsOfDepartureAndArrival = 10, 
		RULE_awbIdentification = 11, RULE_awbOriginAndDestination = 12, RULE_quantityDetail = 13, 
		RULE_volumeDetail = 14, RULE_densityGroup = 15, RULE_totalConsignmentPieces = 16, 
		RULE_shrs = 17, RULE_specialHandlingRequirements = 18, RULE_ssrDetails1stLine = 19, 
		RULE_ssrDetails2stLine = 20, RULE_osiDetails1stLine = 21, RULE_osiDetails2stLine = 22, 
		RULE_natureOfGoods = 23, RULE_requestingOfficeMessageAddress = 24, RULE_rofr = 25, 
		RULE_requestingOfficeFileReference = 26, RULE_requestingParticipantIdentification = 27, 
		RULE_supplementary1or2 = 28, RULE_supplementaryShipmentInformation1 = 29, 
		RULE_supplementaryShipmentInformation2 = 30, RULE_standardMessageIdentifier = 31, 
		RULE_messageTypeVersionNumber = 32, RULE_lineIdentifier = 33, RULE_spaceAllocationCode = 34, 
		RULE_airlinePrefix = 35, RULE_awbSerialNumber = 36, RULE_airportCodeOfDeparture = 37, 
		RULE_airportCodeOfOrigin = 38, RULE_airportCodeOfDestitation = 39, RULE_airportCodeOfArrival = 40, 
		RULE_shipmentDescriptionCode = 41, RULE_volumeCode = 42, RULE_volumeAmount = 43, 
		RULE_densityIndicator = 44, RULE_densityGroupInner = 45, RULE_dayOfScheduledDeparture = 46, 
		RULE_monthOfScheduledDeparture = 47, RULE_flightNumber = 48, RULE_carrierCode = 49, 
		RULE_weightCode = 50, RULE_weight = 51, RULE_numberOfPieces = 52, RULE_specialHandlingCode = 53, 
		RULE_airportCityCode = 54, RULE_officeFunctionDesignator = 55, RULE_companyDesignator = 56, 
		RULE_participantIdentifier = 57, RULE_participantCode = 58, RULE_manifestDescriptionOfGoods = 59, 
		RULE_ssrDescription = 60, RULE_osiDescription = 61, RULE_referenceNumber = 62, 
		RULE_innerSupplementaryShipmentInformation = 63, RULE_fileReference = 64;
	public static readonly string[] ruleNames = {
		"ffa4", "standardMessageIdentification", "consignmentDetail", "flightDetails", 
		"specialServiceRequest", "otherServiceInformation", "bookingReference", 
		"shipmentReferenceInformation", "flightInfoDetails", "flightIdentification", 
		"airportsOfDepartureAndArrival", "awbIdentification", "awbOriginAndDestination", 
		"quantityDetail", "volumeDetail", "densityGroup", "totalConsignmentPieces", 
		"shrs", "specialHandlingRequirements", "ssrDetails1stLine", "ssrDetails2stLine", 
		"osiDetails1stLine", "osiDetails2stLine", "natureOfGoods", "requestingOfficeMessageAddress", 
		"rofr", "requestingOfficeFileReference", "requestingParticipantIdentification", 
		"supplementary1or2", "supplementaryShipmentInformation1", "supplementaryShipmentInformation2", 
		"standardMessageIdentifier", "messageTypeVersionNumber", "lineIdentifier", 
		"spaceAllocationCode", "airlinePrefix", "awbSerialNumber", "airportCodeOfDeparture", 
		"airportCodeOfOrigin", "airportCodeOfDestitation", "airportCodeOfArrival", 
		"shipmentDescriptionCode", "volumeCode", "volumeAmount", "densityIndicator", 
		"densityGroupInner", "dayOfScheduledDeparture", "monthOfScheduledDeparture", 
		"flightNumber", "carrierCode", "weightCode", "weight", "numberOfPieces", 
		"specialHandlingCode", "airportCityCode", "officeFunctionDesignator", 
		"companyDesignator", "participantIdentifier", "participantCode", "manifestDescriptionOfGoods", 
		"ssrDescription", "osiDescription", "referenceNumber", "innerSupplementaryShipmentInformation", 
		"fileReference"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'SSR/'", "'OSI/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierSsr", "LineIdentifierOsi", "SeparatorSlant", 
		"SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ffa4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ffa4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ffa4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ffa4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Ffa4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentificationContext standardMessageIdentification() {
			return GetRuleContext<StandardMessageIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsignmentDetailContext consignmentDetail() {
			return GetRuleContext<ConsignmentDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightDetailsContext flightDetails() {
			return GetRuleContext<FlightDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BookingReferenceContext bookingReference() {
			return GetRuleContext<BookingReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialServiceRequestContext specialServiceRequest() {
			return GetRuleContext<SpecialServiceRequestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherServiceInformationContext otherServiceInformation() {
			return GetRuleContext<OtherServiceInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentReferenceInformationContext shipmentReferenceInformation() {
			return GetRuleContext<ShipmentReferenceInformationContext>(0);
		}
		public Ffa4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ffa4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFfa4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ffa4Context ffa4() {
		Ffa4Context _localctx = new Ffa4Context(Context, State);
		EnterRule(_localctx, 0, RULE_ffa4);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			standardMessageIdentification();
			State = 131;
			consignmentDetail();
			State = 132;
			flightDetails();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierSsr) {
				{
				State = 133;
				specialServiceRequest();
				}
			}

			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierOsi) {
				{
				State = 136;
				otherServiceInformation();
				}
			}

			State = 139;
			bookingReference();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 140;
				shipmentReferenceInformation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentifierContext standardMessageIdentifier() {
			return GetRuleContext<StandardMessageIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeVersionNumberContext messageTypeVersionNumber() {
			return GetRuleContext<MessageTypeVersionNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public StandardMessageIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentificationContext standardMessageIdentification() {
		StandardMessageIdentificationContext _localctx = new StandardMessageIdentificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_standardMessageIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			standardMessageIdentifier();
			State = 144;
			Match(SeparatorSlant);
			State = 145;
			messageTypeVersionNumber();
			State = 146;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsignmentDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AwbIdentificationContext awbIdentification() {
			return GetRuleContext<AwbIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwbOriginAndDestinationContext awbOriginAndDestination() {
			return GetRuleContext<AwbOriginAndDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityDetailContext quantityDetail() {
			return GetRuleContext<QuantityDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatureOfGoodsContext natureOfGoods() {
			return GetRuleContext<NatureOfGoodsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VolumeDetailContext volumeDetail() {
			return GetRuleContext<VolumeDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DensityGroupContext densityGroup() {
			return GetRuleContext<DensityGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalConsignmentPiecesContext totalConsignmentPieces() {
			return GetRuleContext<TotalConsignmentPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShrsContext shrs() {
			return GetRuleContext<ShrsContext>(0);
		}
		public ConsignmentDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consignmentDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsignmentDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsignmentDetailContext consignmentDetail() {
		ConsignmentDetailContext _localctx = new ConsignmentDetailContext(Context, State);
		EnterRule(_localctx, 4, RULE_consignmentDetail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			awbIdentification();
			State = 149;
			awbOriginAndDestination();
			State = 150;
			quantityDetail();
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 151;
				volumeDetail();
				}
				break;
			}
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 154;
				densityGroup();
				}
				break;
			}
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 157;
				totalConsignmentPieces();
				}
			}

			State = 160;
			natureOfGoods();
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 161;
				shrs();
				}
				break;
			}
			State = 164;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FlightInfoDetailsContext[] flightInfoDetails() {
			return GetRuleContexts<FlightInfoDetailsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightInfoDetailsContext flightInfoDetails(int i) {
			return GetRuleContext<FlightInfoDetailsContext>(i);
		}
		public FlightDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightDetailsContext flightDetails() {
		FlightDetailsContext _localctx = new FlightDetailsContext(Context, State);
		EnterRule(_localctx, 6, RULE_flightDetails);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 166;
					flightInfoDetails();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialServiceRequestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierSsr() { return GetToken(ffa4Parser.LineIdentifierSsr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SsrDetails1stLineContext ssrDetails1stLine() {
			return GetRuleContext<SsrDetails1stLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SsrDetails2stLineContext ssrDetails2stLine() {
			return GetRuleContext<SsrDetails2stLineContext>(0);
		}
		public SpecialServiceRequestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialServiceRequest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialServiceRequest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialServiceRequestContext specialServiceRequest() {
		SpecialServiceRequestContext _localctx = new SpecialServiceRequestContext(Context, State);
		EnterRule(_localctx, 8, RULE_specialServiceRequest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(LineIdentifierSsr);
			State = 172;
			ssrDetails1stLine();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 173;
				ssrDetails2stLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherServiceInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierOsi() { return GetToken(ffa4Parser.LineIdentifierOsi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OsiDetails1stLineContext osiDetails1stLine() {
			return GetRuleContext<OsiDetails1stLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OsiDetails2stLineContext osiDetails2stLine() {
			return GetRuleContext<OsiDetails2stLineContext>(0);
		}
		public OtherServiceInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherServiceInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherServiceInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherServiceInformationContext otherServiceInformation() {
		OtherServiceInformationContext _localctx = new OtherServiceInformationContext(Context, State);
		EnterRule(_localctx, 10, RULE_otherServiceInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(LineIdentifierOsi);
			State = 177;
			osiDetails1stLine();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 178;
				osiDetails2stLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BookingReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequestingOfficeMessageAddressContext requestingOfficeMessageAddress() {
			return GetRuleContext<RequestingOfficeMessageAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RofrContext rofr() {
			return GetRuleContext<RofrContext>(0);
		}
		public BookingReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bookingReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBookingReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BookingReferenceContext bookingReference() {
		BookingReferenceContext _localctx = new BookingReferenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_bookingReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			lineIdentifier();
			State = 182;
			Match(SeparatorSlant);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 183;
				requestingOfficeMessageAddress();
				}
			}

			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 186;
				rofr();
				}
			}

			State = 189;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentReferenceInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNumberContext referenceNumber() {
			return GetRuleContext<ReferenceNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Supplementary1or2Context supplementary1or2() {
			return GetRuleContext<Supplementary1or2Context>(0);
		}
		public ShipmentReferenceInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentReferenceInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentReferenceInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentReferenceInformationContext shipmentReferenceInformation() {
		ShipmentReferenceInformationContext _localctx = new ShipmentReferenceInformationContext(Context, State);
		EnterRule(_localctx, 14, RULE_shipmentReferenceInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			lineIdentifier();
			State = 192;
			Match(SeparatorSlant);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0)) {
				{
				State = 193;
				referenceNumber();
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 196;
				supplementary1or2();
				}
			}

			State = 199;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightInfoDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FlightIdentificationContext flightIdentification() {
			return GetRuleContext<FlightIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportsOfDepartureAndArrivalContext airportsOfDepartureAndArrival() {
			return GetRuleContext<AirportsOfDepartureAndArrivalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAllocationCodeContext spaceAllocationCode() {
			return GetRuleContext<SpaceAllocationCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public FlightInfoDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightInfoDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightInfoDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightInfoDetailsContext flightInfoDetails() {
		FlightInfoDetailsContext _localctx = new FlightInfoDetailsContext(Context, State);
		EnterRule(_localctx, 16, RULE_flightInfoDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			flightIdentification();
			State = 202;
			Match(SeparatorSlant);
			State = 203;
			airportsOfDepartureAndArrival();
			State = 204;
			Match(SeparatorSlant);
			State = 205;
			spaceAllocationCode();
			State = 206;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightNumberContext flightNumber() {
			return GetRuleContext<FlightNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
			return GetRuleContext<DayOfScheduledDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
			return GetRuleContext<MonthOfScheduledDepartureContext>(0);
		}
		public FlightIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightIdentificationContext flightIdentification() {
		FlightIdentificationContext _localctx = new FlightIdentificationContext(Context, State);
		EnterRule(_localctx, 18, RULE_flightIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			carrierCode();
			State = 209;
			flightNumber();
			State = 210;
			Match(SeparatorSlant);
			State = 211;
			dayOfScheduledDeparture();
			State = 212;
			monthOfScheduledDeparture();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportsOfDepartureAndArrivalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDepartureContext airportCodeOfDeparture() {
			return GetRuleContext<AirportCodeOfDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfArrivalContext airportCodeOfArrival() {
			return GetRuleContext<AirportCodeOfArrivalContext>(0);
		}
		public AirportsOfDepartureAndArrivalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportsOfDepartureAndArrival; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportsOfDepartureAndArrival(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportsOfDepartureAndArrivalContext airportsOfDepartureAndArrival() {
		AirportsOfDepartureAndArrivalContext _localctx = new AirportsOfDepartureAndArrivalContext(Context, State);
		EnterRule(_localctx, 20, RULE_airportsOfDepartureAndArrival);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			airportCodeOfDeparture();
			State = 215;
			airportCodeOfArrival();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirlinePrefixContext airlinePrefix() {
			return GetRuleContext<AirlinePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorHyphen() { return GetToken(ffa4Parser.SeparatorHyphen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwbSerialNumberContext awbSerialNumber() {
			return GetRuleContext<AwbSerialNumberContext>(0);
		}
		public AwbIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbIdentificationContext awbIdentification() {
		AwbIdentificationContext _localctx = new AwbIdentificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_awbIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			airlinePrefix();
			State = 218;
			Match(SeparatorHyphen);
			State = 219;
			awbSerialNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbOriginAndDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDestitationContext airportCodeOfDestitation() {
			return GetRuleContext<AirportCodeOfDestitationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfOriginContext airportCodeOfOrigin() {
			return GetRuleContext<AirportCodeOfOriginContext>(0);
		}
		public AwbOriginAndDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbOriginAndDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbOriginAndDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbOriginAndDestinationContext awbOriginAndDestination() {
		AwbOriginAndDestinationContext _localctx = new AwbOriginAndDestinationContext(Context, State);
		EnterRule(_localctx, 24, RULE_awbOriginAndDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 221;
				airportCodeOfOrigin();
				}
				break;
			}
			State = 224;
			airportCodeOfDestitation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public QuantityDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantityDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityDetailContext quantityDetail() {
		QuantityDetailContext _localctx = new QuantityDetailContext(Context, State);
		EnterRule(_localctx, 26, RULE_quantityDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(SeparatorSlant);
			State = 227;
			shipmentDescriptionCode();
			State = 228;
			numberOfPieces();
			State = 229;
			weightCode();
			State = 230;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCodeContext volumeCode() {
			return GetRuleContext<VolumeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeAmountContext volumeAmount() {
			return GetRuleContext<VolumeAmountContext>(0);
		}
		public VolumeDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeDetailContext volumeDetail() {
		VolumeDetailContext _localctx = new VolumeDetailContext(Context, State);
		EnterRule(_localctx, 28, RULE_volumeDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			volumeCode();
			State = 233;
			volumeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DensityIndicatorContext densityIndicator() {
			return GetRuleContext<DensityIndicatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DensityGroupInnerContext densityGroupInner() {
			return GetRuleContext<DensityGroupInnerContext>(0);
		}
		public DensityGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityGroupContext densityGroup() {
		DensityGroupContext _localctx = new DensityGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_densityGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			densityIndicator();
			State = 236;
			densityGroupInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalConsignmentPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		public TotalConsignmentPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalConsignmentPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalConsignmentPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalConsignmentPiecesContext totalConsignmentPieces() {
		TotalConsignmentPiecesContext _localctx = new TotalConsignmentPiecesContext(Context, State);
		EnterRule(_localctx, 32, RULE_totalConsignmentPieces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			shipmentDescriptionCode();
			State = 239;
			numberOfPieces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext[] specialHandlingRequirements() {
			return GetRuleContexts<SpecialHandlingRequirementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext specialHandlingRequirements(int i) {
			return GetRuleContext<SpecialHandlingRequirementsContext>(i);
		}
		public ShrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShrsContext shrs() {
		ShrsContext _localctx = new ShrsContext(Context, State);
		EnterRule(_localctx, 34, RULE_shrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(SeparatorCrlf);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 242;
				specialHandlingRequirements();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingRequirementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingCodeContext specialHandlingCode() {
			return GetRuleContext<SpecialHandlingCodeContext>(0);
		}
		public SpecialHandlingRequirementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingRequirements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingRequirements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingRequirementsContext specialHandlingRequirements() {
		SpecialHandlingRequirementsContext _localctx = new SpecialHandlingRequirementsContext(Context, State);
		EnterRule(_localctx, 36, RULE_specialHandlingRequirements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(SeparatorSlant);
			State = 248;
			specialHandlingCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SsrDetails1stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SsrDescriptionContext ssrDescription() {
			return GetRuleContext<SsrDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public SsrDetails1stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssrDetails1stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsrDetails1stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SsrDetails1stLineContext ssrDetails1stLine() {
		SsrDetails1stLineContext _localctx = new SsrDetails1stLineContext(Context, State);
		EnterRule(_localctx, 38, RULE_ssrDetails1stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ssrDescription();
			State = 251;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SsrDetails2stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SsrDescriptionContext ssrDescription() {
			return GetRuleContext<SsrDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public SsrDetails2stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssrDetails2stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsrDetails2stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SsrDetails2stLineContext ssrDetails2stLine() {
		SsrDetails2stLineContext _localctx = new SsrDetails2stLineContext(Context, State);
		EnterRule(_localctx, 40, RULE_ssrDetails2stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(SeparatorSlant);
			State = 254;
			ssrDescription();
			State = 255;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDetails1stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OsiDescriptionContext osiDescription() {
			return GetRuleContext<OsiDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public OsiDetails1stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDetails1stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDetails1stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDetails1stLineContext osiDetails1stLine() {
		OsiDetails1stLineContext _localctx = new OsiDetails1stLineContext(Context, State);
		EnterRule(_localctx, 42, RULE_osiDetails1stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			osiDescription();
			State = 258;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDetails2stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OsiDescriptionContext osiDescription() {
			return GetRuleContext<OsiDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(ffa4Parser.SeparatorCrlf, 0); }
		public OsiDetails2stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDetails2stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDetails2stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDetails2stLineContext osiDetails2stLine() {
		OsiDetails2stLineContext _localctx = new OsiDetails2stLineContext(Context, State);
		EnterRule(_localctx, 44, RULE_osiDetails2stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(SeparatorSlant);
			State = 261;
			osiDescription();
			State = 262;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatureOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
			return GetRuleContext<ManifestDescriptionOfGoodsContext>(0);
		}
		public NatureOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natureOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatureOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatureOfGoodsContext natureOfGoods() {
		NatureOfGoodsContext _localctx = new NatureOfGoodsContext(Context, State);
		EnterRule(_localctx, 46, RULE_natureOfGoods);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(SeparatorSlant);
			State = 265;
			manifestDescriptionOfGoods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingOfficeMessageAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficeFunctionDesignatorContext officeFunctionDesignator() {
			return GetRuleContext<OfficeFunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyDesignatorContext companyDesignator() {
			return GetRuleContext<CompanyDesignatorContext>(0);
		}
		public RequestingOfficeMessageAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingOfficeMessageAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingOfficeMessageAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingOfficeMessageAddressContext requestingOfficeMessageAddress() {
		RequestingOfficeMessageAddressContext _localctx = new RequestingOfficeMessageAddressContext(Context, State);
		EnterRule(_localctx, 48, RULE_requestingOfficeMessageAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			airportCityCode();
			State = 268;
			officeFunctionDesignator();
			State = 269;
			companyDesignator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RofrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequestingOfficeFileReferenceContext requestingOfficeFileReference() {
			return GetRuleContext<RequestingOfficeFileReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequestingParticipantIdentificationContext requestingParticipantIdentification() {
			return GetRuleContext<RequestingParticipantIdentificationContext>(0);
		}
		public RofrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rofr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRofr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RofrContext rofr() {
		RofrContext _localctx = new RofrContext(Context, State);
		EnterRule(_localctx, 50, RULE_rofr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(SeparatorSlant);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0)) {
				{
				State = 272;
				requestingOfficeFileReference();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 275;
				requestingParticipantIdentification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingOfficeFileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileReferenceContext fileReference() {
			return GetRuleContext<FileReferenceContext>(0);
		}
		public RequestingOfficeFileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingOfficeFileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingOfficeFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingOfficeFileReferenceContext requestingOfficeFileReference() {
		RequestingOfficeFileReferenceContext _localctx = new RequestingOfficeFileReferenceContext(Context, State);
		EnterRule(_localctx, 52, RULE_requestingOfficeFileReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			fileReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestingParticipantIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdentifierContext participantIdentifier() {
			return GetRuleContext<ParticipantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantCodeContext participantCode() {
			return GetRuleContext<ParticipantCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		public RequestingParticipantIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestingParticipantIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestingParticipantIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestingParticipantIdentificationContext requestingParticipantIdentification() {
		RequestingParticipantIdentificationContext _localctx = new RequestingParticipantIdentificationContext(Context, State);
		EnterRule(_localctx, 54, RULE_requestingParticipantIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(SeparatorSlant);
			State = 281;
			participantIdentifier();
			State = 282;
			Match(SeparatorSlant);
			State = 283;
			participantCode();
			State = 284;
			Match(SeparatorSlant);
			State = 285;
			airportCityCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supplementary1or2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupplementaryShipmentInformation1Context supplementaryShipmentInformation1() {
			return GetRuleContext<SupplementaryShipmentInformation1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupplementaryShipmentInformation2Context supplementaryShipmentInformation2() {
			return GetRuleContext<SupplementaryShipmentInformation2Context>(0);
		}
		public Supplementary1or2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementary1or2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementary1or2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supplementary1or2Context supplementary1or2() {
		Supplementary1or2Context _localctx = new Supplementary1or2Context(Context, State);
		EnterRule(_localctx, 56, RULE_supplementary1or2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(SeparatorSlant);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0)) {
				{
				State = 288;
				supplementaryShipmentInformation1();
				}
			}

			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 291;
				supplementaryShipmentInformation2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplementaryShipmentInformation1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
			return GetRuleContext<InnerSupplementaryShipmentInformationContext>(0);
		}
		public SupplementaryShipmentInformation1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementaryShipmentInformation1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementaryShipmentInformation1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplementaryShipmentInformation1Context supplementaryShipmentInformation1() {
		SupplementaryShipmentInformation1Context _localctx = new SupplementaryShipmentInformation1Context(Context, State);
		EnterRule(_localctx, 58, RULE_supplementaryShipmentInformation1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			innerSupplementaryShipmentInformation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplementaryShipmentInformation2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(ffa4Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
			return GetRuleContext<InnerSupplementaryShipmentInformationContext>(0);
		}
		public SupplementaryShipmentInformation2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementaryShipmentInformation2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementaryShipmentInformation2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplementaryShipmentInformation2Context supplementaryShipmentInformation2() {
		SupplementaryShipmentInformation2Context _localctx = new SupplementaryShipmentInformation2Context(Context, State);
		EnterRule(_localctx, 60, RULE_supplementaryShipmentInformation2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(SeparatorSlant);
			State = 297;
			innerSupplementaryShipmentInformation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public StandardMessageIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentifierContext standardMessageIdentifier() {
		StandardMessageIdentifierContext _localctx = new StandardMessageIdentifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_standardMessageIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(A);
			State = 300;
			Match(A);
			State = 301;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeVersionNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public MessageTypeVersionNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageTypeVersionNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageTypeVersionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeVersionNumberContext messageTypeVersionNumber() {
		MessageTypeVersionNumberContext _localctx = new MessageTypeVersionNumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_messageTypeVersionNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(N);
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 304;
				Match(N);
				}
				break;
			}
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 307;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public LineIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineIdentifierContext lineIdentifier() {
		LineIdentifierContext _localctx = new LineIdentifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_lineIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(A);
			State = 311;
			Match(A);
			State = 312;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAllocationCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public SpaceAllocationCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAllocationCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAllocationCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAllocationCodeContext spaceAllocationCode() {
		SpaceAllocationCodeContext _localctx = new SpaceAllocationCodeContext(Context, State);
		EnterRule(_localctx, 68, RULE_spaceAllocationCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(A);
			State = 315;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirlinePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public AirlinePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airlinePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirlinePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirlinePrefixContext airlinePrefix() {
		AirlinePrefixContext _localctx = new AirlinePrefixContext(Context, State);
		EnterRule(_localctx, 70, RULE_airlinePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(N);
			State = 318;
			Match(N);
			State = 319;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public AwbSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbSerialNumberContext awbSerialNumber() {
		AwbSerialNumberContext _localctx = new AwbSerialNumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_awbSerialNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(N);
			State = 322;
			Match(N);
			State = 323;
			Match(N);
			State = 324;
			Match(N);
			State = 325;
			Match(N);
			State = 326;
			Match(N);
			State = 327;
			Match(N);
			State = 328;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public AirportCodeOfDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDepartureContext airportCodeOfDeparture() {
		AirportCodeOfDepartureContext _localctx = new AirportCodeOfDepartureContext(Context, State);
		EnterRule(_localctx, 74, RULE_airportCodeOfDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(A);
			State = 331;
			Match(A);
			State = 332;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfOriginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public AirportCodeOfOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfOrigin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfOriginContext airportCodeOfOrigin() {
		AirportCodeOfOriginContext _localctx = new AirportCodeOfOriginContext(Context, State);
		EnterRule(_localctx, 76, RULE_airportCodeOfOrigin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(A);
			State = 335;
			Match(A);
			State = 336;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDestitationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public AirportCodeOfDestitationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDestitation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDestitation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDestitationContext airportCodeOfDestitation() {
		AirportCodeOfDestitationContext _localctx = new AirportCodeOfDestitationContext(Context, State);
		EnterRule(_localctx, 78, RULE_airportCodeOfDestitation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(A);
			State = 339;
			Match(A);
			State = 340;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfArrivalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public AirportCodeOfArrivalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfArrival; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfArrival(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfArrivalContext airportCodeOfArrival() {
		AirportCodeOfArrivalContext _localctx = new AirportCodeOfArrivalContext(Context, State);
		EnterRule(_localctx, 80, RULE_airportCodeOfArrival);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(A);
			State = 343;
			Match(A);
			State = 344;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentDescriptionCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(ffa4Parser.A, 0); }
		public ShipmentDescriptionCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentDescriptionCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentDescriptionCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
		ShipmentDescriptionCodeContext _localctx = new ShipmentDescriptionCodeContext(Context, State);
		EnterRule(_localctx, 82, RULE_shipmentDescriptionCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public VolumeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeCodeContext volumeCode() {
		VolumeCodeContext _localctx = new VolumeCodeContext(Context, State);
		EnterRule(_localctx, 84, RULE_volumeCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(A);
			State = 349;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public VolumeAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeAmountContext volumeAmount() {
		VolumeAmountContext _localctx = new VolumeAmountContext(Context, State);
		EnterRule(_localctx, 86, RULE_volumeAmount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 351;
				Match(N);
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 356;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 357;
					Match(N);
					}
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityIndicatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public DensityIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityIndicator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityIndicatorContext densityIndicator() {
		DensityIndicatorContext _localctx = new DensityIndicatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_densityIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(A);
			State = 365;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityGroupInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public DensityGroupInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityGroupInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityGroupInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityGroupInnerContext densityGroupInner() {
		DensityGroupInnerContext _localctx = new DensityGroupInnerContext(Context, State);
		EnterRule(_localctx, 90, RULE_densityGroupInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(N);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 368;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public DayOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
		DayOfScheduledDepartureContext _localctx = new DayOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 92, RULE_dayOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(N);
			State = 372;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public MonthOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
		MonthOfScheduledDepartureContext _localctx = new MonthOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 94, RULE_monthOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(A);
			State = 375;
			Match(A);
			State = 376;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(ffa4Parser.A, 0); }
		public FlightNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightNumberContext flightNumber() {
		FlightNumberContext _localctx = new FlightNumberContext(Context, State);
		EnterRule(_localctx, 96, RULE_flightNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(N);
			State = 379;
			Match(N);
			State = 380;
			Match(N);
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 381;
				Match(N);
				}
			}

			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 384;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarrierCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public CarrierCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carrierCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarrierCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarrierCodeContext carrierCode() {
		CarrierCodeContext _localctx = new CarrierCodeContext(Context, State);
		EnterRule(_localctx, 98, RULE_carrierCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 388;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(ffa4Parser.A, 0); }
		public WeightCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightCodeContext weightCode() {
		WeightCodeContext _localctx = new WeightCodeContext(Context, State);
		EnterRule(_localctx, 100, RULE_weightCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 102, RULE_weight);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 392;
				Match(N);
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 397;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 398;
					Match(N);
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public NumberOfPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPiecesContext numberOfPieces() {
		NumberOfPiecesContext _localctx = new NumberOfPiecesContext(Context, State);
		EnterRule(_localctx, 104, RULE_numberOfPieces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(N);
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 406;
				Match(N);
				}
				break;
			}
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 409;
				Match(N);
				}
				break;
			}
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 412;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public SpecialHandlingCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingCodeContext specialHandlingCode() {
		SpecialHandlingCodeContext _localctx = new SpecialHandlingCodeContext(Context, State);
		EnterRule(_localctx, 106, RULE_specialHandlingCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 416;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 417;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCityCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		public AirportCityCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCityCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCityCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCityCodeContext airportCityCode() {
		AirportCityCodeContext _localctx = new AirportCityCodeContext(Context, State);
		EnterRule(_localctx, 108, RULE_airportCityCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(A);
			State = 420;
			Match(A);
			State = 421;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficeFunctionDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public OfficeFunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officeFunctionDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOfficeFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OfficeFunctionDesignatorContext officeFunctionDesignator() {
		OfficeFunctionDesignatorContext _localctx = new OfficeFunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_officeFunctionDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 424;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanyDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public CompanyDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companyDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanyDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanyDesignatorContext companyDesignator() {
		CompanyDesignatorContext _localctx = new CompanyDesignatorContext(Context, State);
		EnterRule(_localctx, 112, RULE_companyDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 427;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public ParticipantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantIdentifierContext participantIdentifier() {
		ParticipantIdentifierContext _localctx = new ParticipantIdentifierContext(Context, State);
		EnterRule(_localctx, 114, RULE_participantIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 429;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(ffa4Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(ffa4Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(ffa4Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(ffa4Parser.N, i);
		}
		public ParticipantCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantCodeContext participantCode() {
		ParticipantCodeContext _localctx = new ParticipantCodeContext(Context, State);
		EnterRule(_localctx, 116, RULE_participantCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 434;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManifestDescriptionOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public ManifestDescriptionOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_manifestDescriptionOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitManifestDescriptionOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
		ManifestDescriptionOfGoodsContext _localctx = new ManifestDescriptionOfGoodsContext(Context, State);
		EnterRule(_localctx, 118, RULE_manifestDescriptionOfGoods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 439;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SsrDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public SsrDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssrDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsrDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SsrDescriptionContext ssrDescription() {
		SsrDescriptionContext _localctx = new SsrDescriptionContext(Context, State);
		EnterRule(_localctx, 120, RULE_ssrDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 444;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public OsiDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDescriptionContext osiDescription() {
		OsiDescriptionContext _localctx = new OsiDescriptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_osiDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 449;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public ReferenceNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNumberContext referenceNumber() {
		ReferenceNumberContext _localctx = new ReferenceNumberContext(Context, State);
		EnterRule(_localctx, 124, RULE_referenceNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 454;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerSupplementaryShipmentInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public InnerSupplementaryShipmentInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerSupplementaryShipmentInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerSupplementaryShipmentInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
		InnerSupplementaryShipmentInformationContext _localctx = new InnerSupplementaryShipmentInformationContext(Context, State);
		EnterRule(_localctx, 126, RULE_innerSupplementaryShipmentInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 459;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(ffa4Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(ffa4Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(ffa4Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(ffa4Parser.SeparatorCrlf, i);
		}
		public FileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iffa4Visitor<TResult> typedVisitor = visitor as Iffa4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileReferenceContext fileReference() {
		FileReferenceContext _localctx = new FileReferenceContext(Context, State);
		EnterRule(_localctx, 128, RULE_fileReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 464;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,470,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,1,0,1,0,1,0,1,0,3,0,135,8,0,1,0,3,0,138,8,0,1,0,1,0,3,0,142,
		8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,153,8,2,1,2,3,2,156,8,2,1,
		2,3,2,159,8,2,1,2,1,2,3,2,163,8,2,1,2,1,2,1,3,4,3,168,8,3,11,3,12,3,169,
		1,4,1,4,1,4,3,4,175,8,4,1,5,1,5,1,5,3,5,180,8,5,1,6,1,6,1,6,3,6,185,8,
		6,1,6,3,6,188,8,6,1,6,1,6,1,7,1,7,1,7,3,7,195,8,7,1,7,3,7,198,8,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,12,3,12,223,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,4,17,244,
		8,17,11,17,12,17,245,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
		1,25,1,25,3,25,274,8,25,1,25,3,25,277,8,25,1,26,1,26,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,28,1,28,3,28,290,8,28,1,28,3,28,293,8,28,1,29,1,29,
		1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,306,8,32,1,32,3,32,309,
		8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
		1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,
		1,43,4,43,353,8,43,11,43,12,43,354,1,43,1,43,4,43,359,8,43,11,43,12,43,
		360,3,43,363,8,43,1,44,1,44,1,44,1,45,1,45,3,45,370,8,45,1,46,1,46,1,46,
		1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,383,8,48,1,48,3,48,386,8,
		48,1,49,1,49,1,49,1,50,1,50,1,51,4,51,394,8,51,11,51,12,51,395,1,51,1,
		51,4,51,400,8,51,11,51,12,51,401,3,51,404,8,51,1,52,1,52,3,52,408,8,52,
		1,52,3,52,411,8,52,1,52,3,52,414,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
		54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,4,57,431,8,57,11,57,12,57,432,
		1,58,4,58,436,8,58,11,58,12,58,437,1,59,4,59,441,8,59,11,59,12,59,442,
		1,60,4,60,446,8,60,11,60,12,60,447,1,61,4,61,451,8,61,11,61,12,61,452,
		1,62,4,62,456,8,62,11,62,12,62,457,1,63,4,63,461,8,63,11,63,12,63,462,
		1,64,4,64,466,8,64,11,64,12,64,467,1,64,0,0,65,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
		112,114,116,118,120,122,124,126,128,0,3,1,0,1,2,1,0,7,8,2,0,5,5,10,10,
		446,0,130,1,0,0,0,2,143,1,0,0,0,4,148,1,0,0,0,6,167,1,0,0,0,8,171,1,0,
		0,0,10,176,1,0,0,0,12,181,1,0,0,0,14,191,1,0,0,0,16,201,1,0,0,0,18,208,
		1,0,0,0,20,214,1,0,0,0,22,217,1,0,0,0,24,222,1,0,0,0,26,226,1,0,0,0,28,
		232,1,0,0,0,30,235,1,0,0,0,32,238,1,0,0,0,34,241,1,0,0,0,36,247,1,0,0,
		0,38,250,1,0,0,0,40,253,1,0,0,0,42,257,1,0,0,0,44,260,1,0,0,0,46,264,1,
		0,0,0,48,267,1,0,0,0,50,271,1,0,0,0,52,278,1,0,0,0,54,280,1,0,0,0,56,287,
		1,0,0,0,58,294,1,0,0,0,60,296,1,0,0,0,62,299,1,0,0,0,64,303,1,0,0,0,66,
		310,1,0,0,0,68,314,1,0,0,0,70,317,1,0,0,0,72,321,1,0,0,0,74,330,1,0,0,
		0,76,334,1,0,0,0,78,338,1,0,0,0,80,342,1,0,0,0,82,346,1,0,0,0,84,348,1,
		0,0,0,86,352,1,0,0,0,88,364,1,0,0,0,90,367,1,0,0,0,92,371,1,0,0,0,94,374,
		1,0,0,0,96,378,1,0,0,0,98,387,1,0,0,0,100,390,1,0,0,0,102,393,1,0,0,0,
		104,405,1,0,0,0,106,415,1,0,0,0,108,419,1,0,0,0,110,423,1,0,0,0,112,426,
		1,0,0,0,114,430,1,0,0,0,116,435,1,0,0,0,118,440,1,0,0,0,120,445,1,0,0,
		0,122,450,1,0,0,0,124,455,1,0,0,0,126,460,1,0,0,0,128,465,1,0,0,0,130,
		131,3,2,1,0,131,132,3,4,2,0,132,134,3,6,3,0,133,135,3,8,4,0,134,133,1,
		0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,138,3,10,5,0,137,136,1,0,0,0,
		137,138,1,0,0,0,138,139,1,0,0,0,139,141,3,12,6,0,140,142,3,14,7,0,141,
		140,1,0,0,0,141,142,1,0,0,0,142,1,1,0,0,0,143,144,3,62,31,0,144,145,5,
		5,0,0,145,146,3,64,32,0,146,147,5,10,0,0,147,3,1,0,0,0,148,149,3,22,11,
		0,149,150,3,24,12,0,150,152,3,26,13,0,151,153,3,28,14,0,152,151,1,0,0,
		0,152,153,1,0,0,0,153,155,1,0,0,0,154,156,3,30,15,0,155,154,1,0,0,0,155,
		156,1,0,0,0,156,158,1,0,0,0,157,159,3,32,16,0,158,157,1,0,0,0,158,159,
		1,0,0,0,159,160,1,0,0,0,160,162,3,46,23,0,161,163,3,34,17,0,162,161,1,
		0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,10,0,0,165,5,1,0,0,0,166,
		168,3,16,8,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,
		0,0,0,170,7,1,0,0,0,171,172,5,3,0,0,172,174,3,38,19,0,173,175,3,40,20,
		0,174,173,1,0,0,0,174,175,1,0,0,0,175,9,1,0,0,0,176,177,5,4,0,0,177,179,
		3,42,21,0,178,180,3,44,22,0,179,178,1,0,0,0,179,180,1,0,0,0,180,11,1,0,
		0,0,181,182,3,66,33,0,182,184,5,5,0,0,183,185,3,48,24,0,184,183,1,0,0,
		0,184,185,1,0,0,0,185,187,1,0,0,0,186,188,3,50,25,0,187,186,1,0,0,0,187,
		188,1,0,0,0,188,189,1,0,0,0,189,190,5,10,0,0,190,13,1,0,0,0,191,192,3,
		66,33,0,192,194,5,5,0,0,193,195,3,124,62,0,194,193,1,0,0,0,194,195,1,0,
		0,0,195,197,1,0,0,0,196,198,3,56,28,0,197,196,1,0,0,0,197,198,1,0,0,0,
		198,199,1,0,0,0,199,200,5,10,0,0,200,15,1,0,0,0,201,202,3,18,9,0,202,203,
		5,5,0,0,203,204,3,20,10,0,204,205,5,5,0,0,205,206,3,68,34,0,206,207,5,
		10,0,0,207,17,1,0,0,0,208,209,3,98,49,0,209,210,3,96,48,0,210,211,5,5,
		0,0,211,212,3,92,46,0,212,213,3,94,47,0,213,19,1,0,0,0,214,215,3,74,37,
		0,215,216,3,80,40,0,216,21,1,0,0,0,217,218,3,70,35,0,218,219,5,6,0,0,219,
		220,3,72,36,0,220,23,1,0,0,0,221,223,3,76,38,0,222,221,1,0,0,0,222,223,
		1,0,0,0,223,224,1,0,0,0,224,225,3,78,39,0,225,25,1,0,0,0,226,227,5,5,0,
		0,227,228,3,82,41,0,228,229,3,104,52,0,229,230,3,100,50,0,230,231,3,102,
		51,0,231,27,1,0,0,0,232,233,3,84,42,0,233,234,3,86,43,0,234,29,1,0,0,0,
		235,236,3,88,44,0,236,237,3,90,45,0,237,31,1,0,0,0,238,239,3,82,41,0,239,
		240,3,104,52,0,240,33,1,0,0,0,241,243,5,10,0,0,242,244,3,36,18,0,243,242,
		1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,35,1,0,0,0,
		247,248,5,5,0,0,248,249,3,106,53,0,249,37,1,0,0,0,250,251,3,120,60,0,251,
		252,5,10,0,0,252,39,1,0,0,0,253,254,5,5,0,0,254,255,3,120,60,0,255,256,
		5,10,0,0,256,41,1,0,0,0,257,258,3,122,61,0,258,259,5,10,0,0,259,43,1,0,
		0,0,260,261,5,5,0,0,261,262,3,122,61,0,262,263,5,10,0,0,263,45,1,0,0,0,
		264,265,5,5,0,0,265,266,3,118,59,0,266,47,1,0,0,0,267,268,3,108,54,0,268,
		269,3,110,55,0,269,270,3,112,56,0,270,49,1,0,0,0,271,273,5,5,0,0,272,274,
		3,52,26,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,3,54,
		27,0,276,275,1,0,0,0,276,277,1,0,0,0,277,51,1,0,0,0,278,279,3,128,64,0,
		279,53,1,0,0,0,280,281,5,5,0,0,281,282,3,114,57,0,282,283,5,5,0,0,283,
		284,3,116,58,0,284,285,5,5,0,0,285,286,3,108,54,0,286,55,1,0,0,0,287,289,
		5,5,0,0,288,290,3,58,29,0,289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,
		0,0,291,293,3,60,30,0,292,291,1,0,0,0,292,293,1,0,0,0,293,57,1,0,0,0,294,
		295,3,126,63,0,295,59,1,0,0,0,296,297,5,5,0,0,297,298,3,126,63,0,298,61,
		1,0,0,0,299,300,5,7,0,0,300,301,5,7,0,0,301,302,5,7,0,0,302,63,1,0,0,0,
		303,305,5,8,0,0,304,306,5,8,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,308,
		1,0,0,0,307,309,5,8,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,65,1,0,0,0,
		310,311,5,7,0,0,311,312,5,7,0,0,312,313,5,7,0,0,313,67,1,0,0,0,314,315,
		5,7,0,0,315,316,5,7,0,0,316,69,1,0,0,0,317,318,5,8,0,0,318,319,5,8,0,0,
		319,320,5,8,0,0,320,71,1,0,0,0,321,322,5,8,0,0,322,323,5,8,0,0,323,324,
		5,8,0,0,324,325,5,8,0,0,325,326,5,8,0,0,326,327,5,8,0,0,327,328,5,8,0,
		0,328,329,5,8,0,0,329,73,1,0,0,0,330,331,5,7,0,0,331,332,5,7,0,0,332,333,
		5,7,0,0,333,75,1,0,0,0,334,335,5,7,0,0,335,336,5,7,0,0,336,337,5,7,0,0,
		337,77,1,0,0,0,338,339,5,7,0,0,339,340,5,7,0,0,340,341,5,7,0,0,341,79,
		1,0,0,0,342,343,5,7,0,0,343,344,5,7,0,0,344,345,5,7,0,0,345,81,1,0,0,0,
		346,347,5,7,0,0,347,83,1,0,0,0,348,349,5,7,0,0,349,350,5,7,0,0,350,85,
		1,0,0,0,351,353,5,8,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,
		0,354,355,1,0,0,0,355,362,1,0,0,0,356,358,7,0,0,0,357,359,5,8,0,0,358,
		357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,
		0,0,0,362,356,1,0,0,0,362,363,1,0,0,0,363,87,1,0,0,0,364,365,5,7,0,0,365,
		366,5,7,0,0,366,89,1,0,0,0,367,369,5,8,0,0,368,370,5,8,0,0,369,368,1,0,
		0,0,369,370,1,0,0,0,370,91,1,0,0,0,371,372,5,8,0,0,372,373,5,8,0,0,373,
		93,1,0,0,0,374,375,5,7,0,0,375,376,5,7,0,0,376,377,5,7,0,0,377,95,1,0,
		0,0,378,379,5,8,0,0,379,380,5,8,0,0,380,382,5,8,0,0,381,383,5,8,0,0,382,
		381,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,386,5,7,0,0,385,384,1,
		0,0,0,385,386,1,0,0,0,386,97,1,0,0,0,387,388,7,1,0,0,388,389,7,1,0,0,389,
		99,1,0,0,0,390,391,5,7,0,0,391,101,1,0,0,0,392,394,5,8,0,0,393,392,1,0,
		0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,403,1,0,0,0,397,
		399,7,0,0,0,398,400,5,8,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,
		0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,397,1,0,0,0,403,404,1,0,0,0,
		404,103,1,0,0,0,405,407,5,8,0,0,406,408,5,8,0,0,407,406,1,0,0,0,407,408,
		1,0,0,0,408,410,1,0,0,0,409,411,5,8,0,0,410,409,1,0,0,0,410,411,1,0,0,
		0,411,413,1,0,0,0,412,414,5,8,0,0,413,412,1,0,0,0,413,414,1,0,0,0,414,
		105,1,0,0,0,415,416,7,1,0,0,416,417,7,1,0,0,417,418,7,1,0,0,418,107,1,
		0,0,0,419,420,5,7,0,0,420,421,5,7,0,0,421,422,5,7,0,0,422,109,1,0,0,0,
		423,424,7,1,0,0,424,425,7,1,0,0,425,111,1,0,0,0,426,427,7,1,0,0,427,428,
		7,1,0,0,428,113,1,0,0,0,429,431,7,1,0,0,430,429,1,0,0,0,431,432,1,0,0,
		0,432,430,1,0,0,0,432,433,1,0,0,0,433,115,1,0,0,0,434,436,7,1,0,0,435,
		434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,117,1,
		0,0,0,439,441,8,2,0,0,440,439,1,0,0,0,441,442,1,0,0,0,442,440,1,0,0,0,
		442,443,1,0,0,0,443,119,1,0,0,0,444,446,8,2,0,0,445,444,1,0,0,0,446,447,
		1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,121,1,0,0,0,449,451,8,2,0,
		0,450,449,1,0,0,0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,
		123,1,0,0,0,454,456,8,2,0,0,455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,
		0,0,0,457,458,1,0,0,0,458,125,1,0,0,0,459,461,8,2,0,0,460,459,1,0,0,0,
		461,462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,127,1,0,0,0,464,466,
		8,2,0,0,465,464,1,0,0,0,466,467,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,
		0,468,129,1,0,0,0,42,134,137,141,152,155,158,162,169,174,179,184,187,194,
		197,222,245,273,276,289,292,305,308,354,360,362,369,382,385,395,401,403,
		407,410,413,432,437,442,447,452,457,462,467
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
