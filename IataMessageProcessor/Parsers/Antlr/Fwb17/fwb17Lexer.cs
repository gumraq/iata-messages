//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fwb17.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fwb17Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierSri=3, LineIdentifierNom=4, LineIdentifierSii=5, 
		LineIdentifierPpd=6, LineIdentifierCol=7, NamIdentifier=8, AdrIdentifier=9, 
		LocIdentifier=10, GoodsDescriptionIdentifier=11, ConsolidationIdentifier=12, 
		DimensionsIdentifier=13, VolumeIdentifier=14, UldNumberIdentifier=15, 
		ShippersLoadAndCountIdentifier=16, HarmonisedCommodityCodeIdentifier=17, 
		CountryOfOriginOfGoodsIdentifier=18, SeparatorSlant=19, SeparatorHyphen=20, 
		A=21, N=22, G=23, SeparatorCrlf=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LineIdentifierSri", "LineIdentifierNom", "LineIdentifierSii", 
		"LineIdentifierPpd", "LineIdentifierCol", "NamIdentifier", "AdrIdentifier", 
		"LocIdentifier", "GoodsDescriptionIdentifier", "ConsolidationIdentifier", 
		"DimensionsIdentifier", "VolumeIdentifier", "UldNumberIdentifier", "ShippersLoadAndCountIdentifier", 
		"HarmonisedCommodityCodeIdentifier", "CountryOfOriginOfGoodsIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf", "DIGIT", 
		"CAPITAL_LETTER", "SMALL_LETTER", "SLANT", "HYPHEN", "SPACE", "EXCLAMATION_MARK", 
		"DOUBLE_QUOTE", "NUMBER_SIGN", "DOLLAR_SIGN", "PERCENT", "AMPERSAND", 
		"SINGLE_QUOTE", "LEFT_OPENING_PARENTHESIS", "RIGHT_CLOSING_PARENTHESIS", 
		"ASTERISK", "PLUS", "COMMA", "DOT", "COLON", "SEMICOLON", "LESS_THAN", 
		"EQUAL_SIGN", "GREATER_THAN", "QUESTION_MARK", "AT_SYMBOL", "LEFT_OPENING_BRACKET", 
		"BACK_SLASH", "RIGHT_CLOSING_BRACKET", "CARET_CIRCUMFLEX", "UNDERSCORE", 
		"GRAVE_ACCENT", "LEFT_OPENING_BRACE", "VERTICAL_BAR", "RIGHT_CLOSING_BRACE", 
		"TILDE"
	};


	public fwb17Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public fwb17Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'SRI'", "'NOM'", "'SII'", "'PPD'", "'COL'", "'NAM'", 
		"'ADR'", "'LOC'", "'/NG/'", "'/NC/'", "'/ND/'", "'/NV/'", "'/NU/'", "'/NS/'", 
		"'/NH/'", "'/NO/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierSri", "LineIdentifierNom", "LineIdentifierSii", 
		"LineIdentifierPpd", "LineIdentifierCol", "NamIdentifier", "AdrIdentifier", 
		"LocIdentifier", "GoodsDescriptionIdentifier", "ConsolidationIdentifier", 
		"DimensionsIdentifier", "VolumeIdentifier", "UldNumberIdentifier", "ShippersLoadAndCountIdentifier", 
		"HarmonisedCommodityCodeIdentifier", "CountryOfOriginOfGoodsIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fwb17.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fwb17Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,3,22,237,8,22,1,23,3,23,240,8,23,1,23,1,23,3,23,244,8,23,
		1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
		1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
		1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,
		1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,
		1,59,1,59,0,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,
		0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,
		0,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,1,0,3,1,0,48,57,1,0,
		65,90,1,0,97,122,312,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,121,1,0,0,0,3,123,1,0,0,
		0,5,125,1,0,0,0,7,129,1,0,0,0,9,133,1,0,0,0,11,137,1,0,0,0,13,141,1,0,
		0,0,15,145,1,0,0,0,17,149,1,0,0,0,19,153,1,0,0,0,21,157,1,0,0,0,23,162,
		1,0,0,0,25,167,1,0,0,0,27,172,1,0,0,0,29,177,1,0,0,0,31,182,1,0,0,0,33,
		187,1,0,0,0,35,192,1,0,0,0,37,197,1,0,0,0,39,199,1,0,0,0,41,201,1,0,0,
		0,43,203,1,0,0,0,45,236,1,0,0,0,47,243,1,0,0,0,49,245,1,0,0,0,51,247,1,
		0,0,0,53,249,1,0,0,0,55,251,1,0,0,0,57,253,1,0,0,0,59,255,1,0,0,0,61,257,
		1,0,0,0,63,259,1,0,0,0,65,261,1,0,0,0,67,263,1,0,0,0,69,265,1,0,0,0,71,
		267,1,0,0,0,73,269,1,0,0,0,75,271,1,0,0,0,77,273,1,0,0,0,79,275,1,0,0,
		0,81,277,1,0,0,0,83,279,1,0,0,0,85,281,1,0,0,0,87,283,1,0,0,0,89,285,1,
		0,0,0,91,287,1,0,0,0,93,289,1,0,0,0,95,291,1,0,0,0,97,293,1,0,0,0,99,295,
		1,0,0,0,101,297,1,0,0,0,103,299,1,0,0,0,105,301,1,0,0,0,107,303,1,0,0,
		0,109,305,1,0,0,0,111,307,1,0,0,0,113,309,1,0,0,0,115,311,1,0,0,0,117,
		313,1,0,0,0,119,315,1,0,0,0,121,122,5,46,0,0,122,2,1,0,0,0,123,124,5,44,
		0,0,124,4,1,0,0,0,125,126,5,83,0,0,126,127,5,82,0,0,127,128,5,73,0,0,128,
		6,1,0,0,0,129,130,5,78,0,0,130,131,5,79,0,0,131,132,5,77,0,0,132,8,1,0,
		0,0,133,134,5,83,0,0,134,135,5,73,0,0,135,136,5,73,0,0,136,10,1,0,0,0,
		137,138,5,80,0,0,138,139,5,80,0,0,139,140,5,68,0,0,140,12,1,0,0,0,141,
		142,5,67,0,0,142,143,5,79,0,0,143,144,5,76,0,0,144,14,1,0,0,0,145,146,
		5,78,0,0,146,147,5,65,0,0,147,148,5,77,0,0,148,16,1,0,0,0,149,150,5,65,
		0,0,150,151,5,68,0,0,151,152,5,82,0,0,152,18,1,0,0,0,153,154,5,76,0,0,
		154,155,5,79,0,0,155,156,5,67,0,0,156,20,1,0,0,0,157,158,5,47,0,0,158,
		159,5,78,0,0,159,160,5,71,0,0,160,161,5,47,0,0,161,22,1,0,0,0,162,163,
		5,47,0,0,163,164,5,78,0,0,164,165,5,67,0,0,165,166,5,47,0,0,166,24,1,0,
		0,0,167,168,5,47,0,0,168,169,5,78,0,0,169,170,5,68,0,0,170,171,5,47,0,
		0,171,26,1,0,0,0,172,173,5,47,0,0,173,174,5,78,0,0,174,175,5,86,0,0,175,
		176,5,47,0,0,176,28,1,0,0,0,177,178,5,47,0,0,178,179,5,78,0,0,179,180,
		5,85,0,0,180,181,5,47,0,0,181,30,1,0,0,0,182,183,5,47,0,0,183,184,5,78,
		0,0,184,185,5,83,0,0,185,186,5,47,0,0,186,32,1,0,0,0,187,188,5,47,0,0,
		188,189,5,78,0,0,189,190,5,72,0,0,190,191,5,47,0,0,191,34,1,0,0,0,192,
		193,5,47,0,0,193,194,5,78,0,0,194,195,5,79,0,0,195,196,5,47,0,0,196,36,
		1,0,0,0,197,198,3,55,27,0,198,38,1,0,0,0,199,200,3,57,28,0,200,40,1,0,
		0,0,201,202,3,51,25,0,202,42,1,0,0,0,203,204,3,49,24,0,204,44,1,0,0,0,
		205,237,3,59,29,0,206,237,3,61,30,0,207,237,3,63,31,0,208,237,3,65,32,
		0,209,237,3,67,33,0,210,237,3,69,34,0,211,237,3,71,35,0,212,237,3,73,36,
		0,213,237,3,75,37,0,214,237,3,77,38,0,215,237,3,79,39,0,216,237,3,81,40,
		0,217,237,3,83,41,0,218,237,3,85,42,0,219,237,3,87,43,0,220,237,3,89,44,
		0,221,237,3,91,45,0,222,237,3,93,46,0,223,237,3,95,47,0,224,237,3,97,48,
		0,225,237,3,99,49,0,226,237,3,101,50,0,227,237,3,103,51,0,228,237,3,105,
		52,0,229,237,3,107,53,0,230,237,3,109,54,0,231,237,3,111,55,0,232,237,
		3,113,56,0,233,237,3,115,57,0,234,237,3,117,58,0,235,237,3,119,59,0,236,
		205,1,0,0,0,236,206,1,0,0,0,236,207,1,0,0,0,236,208,1,0,0,0,236,209,1,
		0,0,0,236,210,1,0,0,0,236,211,1,0,0,0,236,212,1,0,0,0,236,213,1,0,0,0,
		236,214,1,0,0,0,236,215,1,0,0,0,236,216,1,0,0,0,236,217,1,0,0,0,236,218,
		1,0,0,0,236,219,1,0,0,0,236,220,1,0,0,0,236,221,1,0,0,0,236,222,1,0,0,
		0,236,223,1,0,0,0,236,224,1,0,0,0,236,225,1,0,0,0,236,226,1,0,0,0,236,
		227,1,0,0,0,236,228,1,0,0,0,236,229,1,0,0,0,236,230,1,0,0,0,236,231,1,
		0,0,0,236,232,1,0,0,0,236,233,1,0,0,0,236,234,1,0,0,0,236,235,1,0,0,0,
		237,46,1,0,0,0,238,240,5,13,0,0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,
		1,0,0,0,241,244,5,10,0,0,242,244,5,13,0,0,243,239,1,0,0,0,243,242,1,0,
		0,0,244,48,1,0,0,0,245,246,7,0,0,0,246,50,1,0,0,0,247,248,7,1,0,0,248,
		52,1,0,0,0,249,250,7,2,0,0,250,54,1,0,0,0,251,252,5,47,0,0,252,56,1,0,
		0,0,253,254,5,45,0,0,254,58,1,0,0,0,255,256,5,32,0,0,256,60,1,0,0,0,257,
		258,5,33,0,0,258,62,1,0,0,0,259,260,5,34,0,0,260,64,1,0,0,0,261,262,5,
		35,0,0,262,66,1,0,0,0,263,264,5,36,0,0,264,68,1,0,0,0,265,266,5,37,0,0,
		266,70,1,0,0,0,267,268,5,38,0,0,268,72,1,0,0,0,269,270,5,39,0,0,270,74,
		1,0,0,0,271,272,5,40,0,0,272,76,1,0,0,0,273,274,5,41,0,0,274,78,1,0,0,
		0,275,276,5,42,0,0,276,80,1,0,0,0,277,278,5,43,0,0,278,82,1,0,0,0,279,
		280,5,44,0,0,280,84,1,0,0,0,281,282,5,46,0,0,282,86,1,0,0,0,283,284,5,
		58,0,0,284,88,1,0,0,0,285,286,5,59,0,0,286,90,1,0,0,0,287,288,5,60,0,0,
		288,92,1,0,0,0,289,290,5,61,0,0,290,94,1,0,0,0,291,292,5,62,0,0,292,96,
		1,0,0,0,293,294,5,63,0,0,294,98,1,0,0,0,295,296,5,64,0,0,296,100,1,0,0,
		0,297,298,5,91,0,0,298,102,1,0,0,0,299,300,5,92,0,0,300,104,1,0,0,0,301,
		302,5,93,0,0,302,106,1,0,0,0,303,304,5,94,0,0,304,108,1,0,0,0,305,306,
		5,95,0,0,306,110,1,0,0,0,307,308,5,96,0,0,308,112,1,0,0,0,309,310,5,123,
		0,0,310,114,1,0,0,0,311,312,5,124,0,0,312,116,1,0,0,0,313,314,5,125,0,
		0,314,118,1,0,0,0,315,316,5,126,0,0,316,120,1,0,0,0,4,0,236,239,243,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
