//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fwb17.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fwb17Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierSri=3, LineIdentifierNom=4, LineIdentifierSii=5, 
		LineIdentifierPpd=6, LineIdentifierCol=7, NamIdentifier=8, AdrIdentifier=9, 
		LocIdentifier=10, GoodsDescriptionIdentifier=11, ConsolidationIdentifier=12, 
		DimensionsIdentifier=13, VolumeIdentifier=14, UldNumberIdentifier=15, 
		ShippersLoadAndCountIdentifier=16, HarmonisedCommodityCodeIdentifier=17, 
		CountryOfOriginOfGoodsIdentifier=18, SeparatorSlant=19, SeparatorHyphen=20, 
		A=21, N=22, G=23, SeparatorCrlf=24;
	public const int
		RULE_fwb17 = 0, RULE_standardMessageIdentification = 1, RULE_awbConsignmentDetail = 2, 
		RULE_flightBookings = 3, RULE_routing = 4, RULE_shipper = 5, RULE_consignee = 6, 
		RULE_agent = 7, RULE_specialServiceRequest = 8, RULE_alsoNotify = 9, RULE_accountingInformation = 10, 
		RULE_chargeDeclarations = 11, RULE_rateDescription = 12, RULE_otherCharges = 13, 
		RULE_prepaidChargeSummary = 14, RULE_collectChargeSummary = 15, RULE_shippersCertification = 16, 
		RULE_carriersExecution = 17, RULE_otherServiceInformation = 18, RULE_ccChargesInDestinationCurrency = 19, 
		RULE_senderReference = 20, RULE_customsOrigin = 21, RULE_commissionInformation = 22, 
		RULE_salesIncentiveInformation = 23, RULE_agentReferenceData = 24, RULE_specialHandlingDetails = 25, 
		RULE_nominatedHandlingParty = 26, RULE_shipmentReferenceInformation = 27, 
		RULE_otherParticipantInformation = 28, RULE_otherCustSecurityAndRegulatCtrlInfo = 29, 
		RULE_rateDescriptionItems = 30, RULE_chargeLineCount = 31, RULE_elementFrom3To10 = 32, 
		RULE_elementFrom11To19 = 33, RULE_numberOfPiecesRcpDetails = 34, RULE_grossWeightDetails = 35, 
		RULE_rateClassDetails = 36, RULE_commodityItemNumberDetails = 37, RULE_chargeableWeightDetails = 38, 
		RULE_rateChargeDetails = 39, RULE_totalDetails = 40, RULE_goodsDescription = 41, 
		RULE_goodsConsolidation = 42, RULE_dimensions = 43, RULE_volume = 44, 
		RULE_uldNumber = 45, RULE_shippersLoadAndCount = 46, RULE_harmonisedCommodityCode = 47, 
		RULE_countryOfOriginOfGoods = 48, RULE_serviceCodeDetails = 49, RULE_rateClassCodeBasisAndPercentage = 50, 
		RULE_weightInfo = 51, RULE_dimentionsDimNda = 52, RULE_dimension = 53, 
		RULE_awbIdentification = 54, RULE_awbOriginAndDestination = 55, RULE_quantityDetail = 56, 
		RULE_volumeDetail = 57, RULE_densityGroup = 58, RULE_specialHandlingRequirements = 59, 
		RULE_flightIdentification = 60, RULE_firstDestinationCarrier = 61, RULE_onwardDestinationCarrier = 62, 
		RULE_prepaidCollectChargeDeclarations = 63, RULE_valueForCarriageDeclaration = 64, 
		RULE_valueForCustomsDeclaration = 65, RULE_valueForInsuranceDeclaration = 66, 
		RULE_otherChargeDetails = 67, RULE_chargeLine = 68, RULE_otherChargeItems = 69, 
		RULE_chargesOrTaxes = 70, RULE_totalCharges = 71, RULE_awbIssueDetails = 72, 
		RULE_authorisation = 73, RULE_destinationCurrency = 74, RULE_currencyConversionRate = 75, 
		RULE_ccChargesInDestinationCurrencyInner = 76, RULE_chargesAtDestination = 77, 
		RULE_totalCollectCharges = 78, RULE_noCommissionIndication = 79, RULE_commissionAmountOrPercentage = 80, 
		RULE_commissionAmount = 81, RULE_commissionPercentage = 82, RULE_salesIncentiveDetail = 83, 
		RULE_salesIncentiveIndication = 84, RULE_agentReference = 85, RULE_otherCustSecurityAndRegulatCtrlInfoDet = 86, 
		RULE_accountDetail = 87, RULE_name = 88, RULE_nameDetail = 89, RULE_streetAddress = 90, 
		RULE_streetAddressDetail = 91, RULE_location = 92, RULE_stateProvince = 93, 
		RULE_codedLocation = 94, RULE_postCode = 95, RULE_contactDetail = 96, 
		RULE_accountDetailAgt = 97, RULE_cargoAgentCassOrParticipantId = 98, RULE_participantId = 99, 
		RULE_cargoAgentCassAddress = 100, RULE_accountDetails = 101, RULE_place = 102, 
		RULE_ssrDetail = 103, RULE_osiItems = 104, RULE_sofr = 105, RULE_senderOfficeMessageAddress = 106, 
		RULE_senderOfficeFileReference = 107, RULE_senderParticipantIdentification = 108, 
		RULE_supplementary1or2 = 109, RULE_supplementaryShipmentInformation1 = 110, 
		RULE_supplementaryShipmentInformation2 = 111, RULE_otherParticipantOfficeMessageAddress = 112, 
		RULE_opofr = 113, RULE_otherParticipantOfficeFileReference = 114, RULE_otherParticipantIdentification = 115, 
		RULE_standardMessageIdentifier = 116, RULE_messageTypeVersionNumber = 117, 
		RULE_lineIdentifier = 118, RULE_chargeCode = 119, RULE_airlinePrefix = 120, 
		RULE_awbSerialNumber = 121, RULE_airportCodeOfOrigin = 122, RULE_airportCodeOfDestitation = 123, 
		RULE_shipmentDescriptionCode = 124, RULE_volumeCode = 125, RULE_volumeAmount = 126, 
		RULE_densityIndicator = 127, RULE_densityGroupInner = 128, RULE_declaredValueForCarriage = 129, 
		RULE_declaredValueForCustoms = 130, RULE_amountOfInsurance = 131, RULE_noValue = 132, 
		RULE_contactIdentifier = 133, RULE_contactNumber = 134, RULE_iataCargoAgentNumericCode = 135, 
		RULE_cargoAgentCassAddressInner = 136, RULE_accountingInformationIdentifier = 137, 
		RULE_day = 138, RULE_month = 139, RULE_year = 140, RULE_airportCode = 141, 
		RULE_flightNumber = 142, RULE_carrierCode = 143, RULE_serviceCode = 144, 
		RULE_uldType = 145, RULE_uldSerialNumber = 146, RULE_uldOwnerCode = 147, 
		RULE_slac = 148, RULE_harmonisedCommodityCodeInner = 149, RULE_measurementUnitCode = 150, 
		RULE_lengthDimension = 151, RULE_widthDimension = 152, RULE_heightDimension = 153, 
		RULE_rateOrCharge = 154, RULE_discount = 155, RULE_commodityItemNumber = 156, 
		RULE_uldRateClassType = 157, RULE_rateClassCodeBasis = 158, RULE_rateClassCode = 159, 
		RULE_classRatePercentage = 160, RULE_weightCode = 161, RULE_weight = 162, 
		RULE_rateCombinationPoint = 163, RULE_numberOfPieces = 164, RULE_hwbColumnIdentifier = 165, 
		RULE_hwbRateLineNumber = 166, RULE_pcIndWeightValuation = 167, RULE_pcIndOtherCharges = 168, 
		RULE_otherChargeCode = 169, RULE_entitlementCode = 170, RULE_chargeIdentifier = 171, 
		RULE_customsOriginCode = 172, RULE_cassSettlementFactor = 173, RULE_isoCurrencyCode = 174, 
		RULE_rateOfExchange = 175, RULE_chargeAmount = 176, RULE_cassIndicator = 177, 
		RULE_specialHandlingCode = 178, RULE_airportCityCode = 179, RULE_officeFunctionDesignator = 180, 
		RULE_companyDesignator = 181, RULE_participantIdentifier = 182, RULE_participantCode = 183, 
		RULE_isoCountryCode = 184, RULE_informationIdentifier = 185, RULE_custSecurityAndRegulatCtrlInfoId = 186, 
		RULE_supplemCustSecurityAndRegulatCtrlInfo = 187, RULE_fileReference = 188, 
		RULE_nameInner = 189, RULE_placeInner = 190, RULE_referenceNumber = 191, 
		RULE_innerSupplementaryShipmentInformation = 192, RULE_signature = 193, 
		RULE_otherServiceInformationItem = 194, RULE_specialServiceRequestInner = 195, 
		RULE_accountingInformationInner = 196, RULE_accountNumber = 197, RULE_streetAddressInner = 198, 
		RULE_stateProvinceInner = 199, RULE_postCodeInner = 200, RULE_natureAndQuantityOfGoods = 201;
	public static readonly string[] ruleNames = {
		"fwb17", "standardMessageIdentification", "awbConsignmentDetail", "flightBookings", 
		"routing", "shipper", "consignee", "agent", "specialServiceRequest", "alsoNotify", 
		"accountingInformation", "chargeDeclarations", "rateDescription", "otherCharges", 
		"prepaidChargeSummary", "collectChargeSummary", "shippersCertification", 
		"carriersExecution", "otherServiceInformation", "ccChargesInDestinationCurrency", 
		"senderReference", "customsOrigin", "commissionInformation", "salesIncentiveInformation", 
		"agentReferenceData", "specialHandlingDetails", "nominatedHandlingParty", 
		"shipmentReferenceInformation", "otherParticipantInformation", "otherCustSecurityAndRegulatCtrlInfo", 
		"rateDescriptionItems", "chargeLineCount", "elementFrom3To10", "elementFrom11To19", 
		"numberOfPiecesRcpDetails", "grossWeightDetails", "rateClassDetails", 
		"commodityItemNumberDetails", "chargeableWeightDetails", "rateChargeDetails", 
		"totalDetails", "goodsDescription", "goodsConsolidation", "dimensions", 
		"volume", "uldNumber", "shippersLoadAndCount", "harmonisedCommodityCode", 
		"countryOfOriginOfGoods", "serviceCodeDetails", "rateClassCodeBasisAndPercentage", 
		"weightInfo", "dimentionsDimNda", "dimension", "awbIdentification", "awbOriginAndDestination", 
		"quantityDetail", "volumeDetail", "densityGroup", "specialHandlingRequirements", 
		"flightIdentification", "firstDestinationCarrier", "onwardDestinationCarrier", 
		"prepaidCollectChargeDeclarations", "valueForCarriageDeclaration", "valueForCustomsDeclaration", 
		"valueForInsuranceDeclaration", "otherChargeDetails", "chargeLine", "otherChargeItems", 
		"chargesOrTaxes", "totalCharges", "awbIssueDetails", "authorisation", 
		"destinationCurrency", "currencyConversionRate", "ccChargesInDestinationCurrencyInner", 
		"chargesAtDestination", "totalCollectCharges", "noCommissionIndication", 
		"commissionAmountOrPercentage", "commissionAmount", "commissionPercentage", 
		"salesIncentiveDetail", "salesIncentiveIndication", "agentReference", 
		"otherCustSecurityAndRegulatCtrlInfoDet", "accountDetail", "name", "nameDetail", 
		"streetAddress", "streetAddressDetail", "location", "stateProvince", "codedLocation", 
		"postCode", "contactDetail", "accountDetailAgt", "cargoAgentCassOrParticipantId", 
		"participantId", "cargoAgentCassAddress", "accountDetails", "place", "ssrDetail", 
		"osiItems", "sofr", "senderOfficeMessageAddress", "senderOfficeFileReference", 
		"senderParticipantIdentification", "supplementary1or2", "supplementaryShipmentInformation1", 
		"supplementaryShipmentInformation2", "otherParticipantOfficeMessageAddress", 
		"opofr", "otherParticipantOfficeFileReference", "otherParticipantIdentification", 
		"standardMessageIdentifier", "messageTypeVersionNumber", "lineIdentifier", 
		"chargeCode", "airlinePrefix", "awbSerialNumber", "airportCodeOfOrigin", 
		"airportCodeOfDestitation", "shipmentDescriptionCode", "volumeCode", "volumeAmount", 
		"densityIndicator", "densityGroupInner", "declaredValueForCarriage", "declaredValueForCustoms", 
		"amountOfInsurance", "noValue", "contactIdentifier", "contactNumber", 
		"iataCargoAgentNumericCode", "cargoAgentCassAddressInner", "accountingInformationIdentifier", 
		"day", "month", "year", "airportCode", "flightNumber", "carrierCode", 
		"serviceCode", "uldType", "uldSerialNumber", "uldOwnerCode", "slac", "harmonisedCommodityCodeInner", 
		"measurementUnitCode", "lengthDimension", "widthDimension", "heightDimension", 
		"rateOrCharge", "discount", "commodityItemNumber", "uldRateClassType", 
		"rateClassCodeBasis", "rateClassCode", "classRatePercentage", "weightCode", 
		"weight", "rateCombinationPoint", "numberOfPieces", "hwbColumnIdentifier", 
		"hwbRateLineNumber", "pcIndWeightValuation", "pcIndOtherCharges", "otherChargeCode", 
		"entitlementCode", "chargeIdentifier", "customsOriginCode", "cassSettlementFactor", 
		"isoCurrencyCode", "rateOfExchange", "chargeAmount", "cassIndicator", 
		"specialHandlingCode", "airportCityCode", "officeFunctionDesignator", 
		"companyDesignator", "participantIdentifier", "participantCode", "isoCountryCode", 
		"informationIdentifier", "custSecurityAndRegulatCtrlInfoId", "supplemCustSecurityAndRegulatCtrlInfo", 
		"fileReference", "nameInner", "placeInner", "referenceNumber", "innerSupplementaryShipmentInformation", 
		"signature", "otherServiceInformationItem", "specialServiceRequestInner", 
		"accountingInformationInner", "accountNumber", "streetAddressInner", "stateProvinceInner", 
		"postCodeInner", "natureAndQuantityOfGoods"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'SRI'", "'NOM'", "'SII'", "'PPD'", "'COL'", "'NAM'", 
		"'ADR'", "'LOC'", "'/NG/'", "'/NC/'", "'/ND/'", "'/NV/'", "'/NU/'", "'/NS/'", 
		"'/NH/'", "'/NO/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierSri", "LineIdentifierNom", "LineIdentifierSii", 
		"LineIdentifierPpd", "LineIdentifierCol", "NamIdentifier", "AdrIdentifier", 
		"LocIdentifier", "GoodsDescriptionIdentifier", "ConsolidationIdentifier", 
		"DimensionsIdentifier", "VolumeIdentifier", "UldNumberIdentifier", "ShippersLoadAndCountIdentifier", 
		"HarmonisedCommodityCodeIdentifier", "CountryOfOriginOfGoodsIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fwb17.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fwb17Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fwb17Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fwb17Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Fwb17Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentificationContext standardMessageIdentification() {
			return GetRuleContext<StandardMessageIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwbConsignmentDetailContext awbConsignmentDetail() {
			return GetRuleContext<AwbConsignmentDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutingContext routing() {
			return GetRuleContext<RoutingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShipperContext shipper() {
			return GetRuleContext<ShipperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsigneeContext consignee() {
			return GetRuleContext<ConsigneeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeDeclarationsContext chargeDeclarations() {
			return GetRuleContext<ChargeDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateDescriptionContext rateDescription() {
			return GetRuleContext<RateDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CarriersExecutionContext carriersExecution() {
			return GetRuleContext<CarriersExecutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SenderReferenceContext senderReference() {
			return GetRuleContext<SenderReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightBookingsContext flightBookings() {
			return GetRuleContext<FlightBookingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentContext agent() {
			return GetRuleContext<AgentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialServiceRequestContext specialServiceRequest() {
			return GetRuleContext<SpecialServiceRequestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlsoNotifyContext alsoNotify() {
			return GetRuleContext<AlsoNotifyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountingInformationContext accountingInformation() {
			return GetRuleContext<AccountingInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargesContext otherCharges() {
			return GetRuleContext<OtherChargesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrepaidChargeSummaryContext prepaidChargeSummary() {
			return GetRuleContext<PrepaidChargeSummaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectChargeSummaryContext collectChargeSummary() {
			return GetRuleContext<CollectChargeSummaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShippersCertificationContext shippersCertification() {
			return GetRuleContext<ShippersCertificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherServiceInformationContext otherServiceInformation() {
			return GetRuleContext<OtherServiceInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CcChargesInDestinationCurrencyContext ccChargesInDestinationCurrency() {
			return GetRuleContext<CcChargesInDestinationCurrencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomsOriginContext customsOrigin() {
			return GetRuleContext<CustomsOriginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommissionInformationContext commissionInformation() {
			return GetRuleContext<CommissionInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SalesIncentiveInformationContext salesIncentiveInformation() {
			return GetRuleContext<SalesIncentiveInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AgentReferenceDataContext agentReferenceData() {
			return GetRuleContext<AgentReferenceDataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingDetailsContext specialHandlingDetails() {
			return GetRuleContext<SpecialHandlingDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NominatedHandlingPartyContext nominatedHandlingParty() {
			return GetRuleContext<NominatedHandlingPartyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentReferenceInformationContext shipmentReferenceInformation() {
			return GetRuleContext<ShipmentReferenceInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherParticipantInformationContext[] otherParticipantInformation() {
			return GetRuleContexts<OtherParticipantInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherParticipantInformationContext otherParticipantInformation(int i) {
			return GetRuleContext<OtherParticipantInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoContext otherCustSecurityAndRegulatCtrlInfo() {
			return GetRuleContext<OtherCustSecurityAndRegulatCtrlInfoContext>(0);
		}
		public Fwb17Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fwb17; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFwb17(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fwb17Context fwb17() {
		Fwb17Context _localctx = new Fwb17Context(Context, State);
		EnterRule(_localctx, 0, RULE_fwb17);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			standardMessageIdentification();
			State = 405;
			awbConsignmentDetail();
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 406;
				flightBookings();
				}
				break;
			}
			State = 409;
			routing();
			State = 410;
			shipper();
			State = 411;
			consignee();
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 412;
				agent();
				}
				break;
			}
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 415;
				specialServiceRequest();
				}
				break;
			}
			State = 419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 418;
				alsoNotify();
				}
				break;
			}
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 421;
				accountingInformation();
				}
				break;
			}
			State = 424;
			chargeDeclarations();
			State = 425;
			rateDescription();
			State = 427;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 426;
				otherCharges();
				}
				break;
			}
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierPpd) {
				{
				State = 429;
				prepaidChargeSummary();
				}
			}

			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierCol) {
				{
				State = 432;
				collectChargeSummary();
				}
			}

			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 435;
				shippersCertification();
				}
				break;
			}
			State = 438;
			carriersExecution();
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 439;
				otherServiceInformation();
				}
				break;
			}
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 442;
				ccChargesInDestinationCurrency();
				}
				break;
			}
			State = 445;
			senderReference();
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 446;
				customsOrigin();
				}
				break;
			}
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 449;
				commissionInformation();
				}
				break;
			}
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierSii) {
				{
				State = 452;
				salesIncentiveInformation();
				}
			}

			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 455;
				agentReferenceData();
				}
				break;
			}
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 458;
				specialHandlingDetails();
				}
				break;
			}
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierNom) {
				{
				State = 461;
				nominatedHandlingParty();
				}
			}

			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LineIdentifierSri) {
				{
				State = 464;
				shipmentReferenceInformation();
				}
			}

			State = 470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 467;
					otherParticipantInformation();
					}
					} 
				}
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 473;
				otherCustSecurityAndRegulatCtrlInfo();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentifierContext standardMessageIdentifier() {
			return GetRuleContext<StandardMessageIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeVersionNumberContext messageTypeVersionNumber() {
			return GetRuleContext<MessageTypeVersionNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public StandardMessageIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentificationContext standardMessageIdentification() {
		StandardMessageIdentificationContext _localctx = new StandardMessageIdentificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_standardMessageIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			standardMessageIdentifier();
			State = 477;
			Match(SeparatorSlant);
			State = 478;
			messageTypeVersionNumber();
			State = 479;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbConsignmentDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AwbIdentificationContext awbIdentification() {
			return GetRuleContext<AwbIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwbOriginAndDestinationContext awbOriginAndDestination() {
			return GetRuleContext<AwbOriginAndDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityDetailContext quantityDetail() {
			return GetRuleContext<QuantityDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VolumeDetailContext volumeDetail() {
			return GetRuleContext<VolumeDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DensityGroupContext densityGroup() {
			return GetRuleContext<DensityGroupContext>(0);
		}
		public AwbConsignmentDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbConsignmentDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbConsignmentDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbConsignmentDetailContext awbConsignmentDetail() {
		AwbConsignmentDetailContext _localctx = new AwbConsignmentDetailContext(Context, State);
		EnterRule(_localctx, 4, RULE_awbConsignmentDetail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			awbIdentification();
			State = 482;
			awbOriginAndDestination();
			State = 483;
			quantityDetail();
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 484;
				volumeDetail();
				}
				break;
			}
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 487;
				densityGroup();
				}
			}

			State = 490;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightBookingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlightIdentificationContext[] flightIdentification() {
			return GetRuleContexts<FlightIdentificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightIdentificationContext flightIdentification(int i) {
			return GetRuleContext<FlightIdentificationContext>(i);
		}
		public FlightBookingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightBookings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightBookings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightBookingsContext flightBookings() {
		FlightBookingsContext _localctx = new FlightBookingsContext(Context, State);
		EnterRule(_localctx, 6, RULE_flightBookings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			lineIdentifier();
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 493;
				flightIdentification();
				}
				}
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			State = 498;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FirstDestinationCarrierContext firstDestinationCarrier() {
			return GetRuleContext<FirstDestinationCarrierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnwardDestinationCarrierContext[] onwardDestinationCarrier() {
			return GetRuleContexts<OnwardDestinationCarrierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnwardDestinationCarrierContext onwardDestinationCarrier(int i) {
			return GetRuleContext<OnwardDestinationCarrierContext>(i);
		}
		public RoutingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRouting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutingContext routing() {
		RoutingContext _localctx = new RoutingContext(Context, State);
		EnterRule(_localctx, 8, RULE_routing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			lineIdentifier();
			State = 501;
			firstDestinationCarrier();
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 502;
				onwardDestinationCarrier();
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 508;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressContext streetAddress() {
			return GetRuleContext<StreetAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodedLocationContext codedLocation() {
			return GetRuleContext<CodedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountDetailContext accountDetail() {
			return GetRuleContext<AccountDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext[] contactDetail() {
			return GetRuleContexts<ContactDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext contactDetail(int i) {
			return GetRuleContext<ContactDetailContext>(i);
		}
		public ShipperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipperContext shipper() {
		ShipperContext _localctx = new ShipperContext(Context, State);
		EnterRule(_localctx, 10, RULE_shipper);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			lineIdentifier();
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 511;
				accountDetail();
				}
			}

			State = 514;
			Match(SeparatorCrlf);
			State = 515;
			name();
			State = 516;
			streetAddress();
			State = 517;
			location();
			State = 518;
			codedLocation();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 519;
				contactDetail();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 525;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsigneeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressContext streetAddress() {
			return GetRuleContext<StreetAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodedLocationContext codedLocation() {
			return GetRuleContext<CodedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountDetailContext accountDetail() {
			return GetRuleContext<AccountDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext[] contactDetail() {
			return GetRuleContexts<ContactDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext contactDetail(int i) {
			return GetRuleContext<ContactDetailContext>(i);
		}
		public ConsigneeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consignee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsignee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsigneeContext consignee() {
		ConsigneeContext _localctx = new ConsigneeContext(Context, State);
		EnterRule(_localctx, 12, RULE_consignee);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			lineIdentifier();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 528;
				accountDetail();
				}
			}

			State = 531;
			Match(SeparatorCrlf);
			State = 532;
			name();
			State = 533;
			streetAddress();
			State = 534;
			location();
			State = 535;
			codedLocation();
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 536;
				contactDetail();
				}
				}
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 542;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountDetailAgtContext accountDetailAgt() {
			return GetRuleContext<AccountDetailAgtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDetailContext nameDetail() {
			return GetRuleContext<NameDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		public AgentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentContext agent() {
		AgentContext _localctx = new AgentContext(Context, State);
		EnterRule(_localctx, 14, RULE_agent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			lineIdentifier();
			State = 545;
			accountDetailAgt();
			State = 546;
			Match(SeparatorCrlf);
			State = 547;
			nameDetail();
			State = 548;
			place();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialServiceRequestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SsrDetailContext[] ssrDetail() {
			return GetRuleContexts<SsrDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SsrDetailContext ssrDetail(int i) {
			return GetRuleContext<SsrDetailContext>(i);
		}
		public SpecialServiceRequestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialServiceRequest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialServiceRequest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialServiceRequestContext specialServiceRequest() {
		SpecialServiceRequestContext _localctx = new SpecialServiceRequestContext(Context, State);
		EnterRule(_localctx, 16, RULE_specialServiceRequest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			lineIdentifier();
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 551;
				ssrDetail();
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlsoNotifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressContext streetAddress() {
			return GetRuleContext<StreetAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodedLocationContext codedLocation() {
			return GetRuleContext<CodedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext[] contactDetail() {
			return GetRuleContexts<ContactDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext contactDetail(int i) {
			return GetRuleContext<ContactDetailContext>(i);
		}
		public AlsoNotifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alsoNotify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlsoNotify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlsoNotifyContext alsoNotify() {
		AlsoNotifyContext _localctx = new AlsoNotifyContext(Context, State);
		EnterRule(_localctx, 18, RULE_alsoNotify);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			lineIdentifier();
			State = 557;
			Match(SeparatorCrlf);
			State = 558;
			name();
			State = 559;
			streetAddress();
			State = 560;
			location();
			State = 561;
			codedLocation();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 562;
				contactDetail();
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 568;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountingInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountDetailsContext[] accountDetails() {
			return GetRuleContexts<AccountDetailsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountDetailsContext accountDetails(int i) {
			return GetRuleContext<AccountDetailsContext>(i);
		}
		public AccountingInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountingInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountingInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountingInformationContext accountingInformation() {
		AccountingInformationContext _localctx = new AccountingInformationContext(Context, State);
		EnterRule(_localctx, 20, RULE_accountingInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			lineIdentifier();
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 571;
				accountDetails();
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoCurrencyCodeContext isoCurrencyCode() {
			return GetRuleContext<IsoCurrencyCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForCarriageDeclarationContext valueForCarriageDeclaration() {
			return GetRuleContext<ValueForCarriageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForCustomsDeclarationContext valueForCustomsDeclaration() {
			return GetRuleContext<ValueForCustomsDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForInsuranceDeclarationContext valueForInsuranceDeclaration() {
			return GetRuleContext<ValueForInsuranceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChargeCodeContext chargeCode() {
			return GetRuleContext<ChargeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrepaidCollectChargeDeclarationsContext prepaidCollectChargeDeclarations() {
			return GetRuleContext<PrepaidCollectChargeDeclarationsContext>(0);
		}
		public ChargeDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeDeclarationsContext chargeDeclarations() {
		ChargeDeclarationsContext _localctx = new ChargeDeclarationsContext(Context, State);
		EnterRule(_localctx, 22, RULE_chargeDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			lineIdentifier();
			State = 577;
			Match(SeparatorSlant);
			State = 578;
			isoCurrencyCode();
			State = 579;
			Match(SeparatorSlant);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 580;
				chargeCode();
				}
			}

			State = 583;
			Match(SeparatorSlant);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 584;
				prepaidCollectChargeDeclarations();
				}
			}

			State = 587;
			Match(SeparatorSlant);
			State = 588;
			valueForCarriageDeclaration();
			State = 589;
			Match(SeparatorSlant);
			State = 590;
			valueForCustomsDeclaration();
			State = 591;
			Match(SeparatorSlant);
			State = 592;
			valueForInsuranceDeclaration();
			State = 593;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateDescriptionItemsContext[] rateDescriptionItems() {
			return GetRuleContexts<RateDescriptionItemsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateDescriptionItemsContext rateDescriptionItems(int i) {
			return GetRuleContext<RateDescriptionItemsContext>(i);
		}
		public RateDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateDescriptionContext rateDescription() {
		RateDescriptionContext _localctx = new RateDescriptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_rateDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			lineIdentifier();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 596;
				rateDescriptionItems();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherChargesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargeDetailsContext[] otherChargeDetails() {
			return GetRuleContexts<OtherChargeDetailsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargeDetailsContext otherChargeDetails(int i) {
			return GetRuleContext<OtherChargeDetailsContext>(i);
		}
		public OtherChargesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCharges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherCharges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherChargesContext otherCharges() {
		OtherChargesContext _localctx = new OtherChargesContext(Context, State);
		EnterRule(_localctx, 26, RULE_otherCharges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			lineIdentifier();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 602;
				otherChargeDetails();
				}
				}
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepaidChargeSummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierPpd() { return GetToken(fwb17Parser.LineIdentifierPpd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargesOrTaxesContext[] chargesOrTaxes() {
			return GetRuleContexts<ChargesOrTaxesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargesOrTaxesContext chargesOrTaxes(int i) {
			return GetRuleContext<ChargesOrTaxesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalChargesContext[] totalCharges() {
			return GetRuleContexts<TotalChargesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalChargesContext totalCharges(int i) {
			return GetRuleContext<TotalChargesContext>(i);
		}
		public PrepaidChargeSummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepaidChargeSummary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepaidChargeSummary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepaidChargeSummaryContext prepaidChargeSummary() {
		PrepaidChargeSummaryContext _localctx = new PrepaidChargeSummaryContext(Context, State);
		EnterRule(_localctx, 28, RULE_prepaidChargeSummary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(LineIdentifierPpd);
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 608;
				chargesOrTaxes();
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 614;
			Match(SeparatorCrlf);
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 615;
				totalCharges();
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 621;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectChargeSummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierCol() { return GetToken(fwb17Parser.LineIdentifierCol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargesOrTaxesContext[] chargesOrTaxes() {
			return GetRuleContexts<ChargesOrTaxesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargesOrTaxesContext chargesOrTaxes(int i) {
			return GetRuleContext<ChargesOrTaxesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalChargesContext[] totalCharges() {
			return GetRuleContexts<TotalChargesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalChargesContext totalCharges(int i) {
			return GetRuleContext<TotalChargesContext>(i);
		}
		public CollectChargeSummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectChargeSummary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectChargeSummary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectChargeSummaryContext collectChargeSummary() {
		CollectChargeSummaryContext _localctx = new CollectChargeSummaryContext(Context, State);
		EnterRule(_localctx, 30, RULE_collectChargeSummary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(LineIdentifierCol);
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 624;
				chargesOrTaxes();
				}
				}
				State = 629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 630;
			Match(SeparatorCrlf);
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 631;
				totalCharges();
				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 637;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShippersCertificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public ShippersCertificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shippersCertification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShippersCertification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShippersCertificationContext shippersCertification() {
		ShippersCertificationContext _localctx = new ShippersCertificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_shippersCertification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			lineIdentifier();
			State = 640;
			Match(SeparatorSlant);
			State = 641;
			signature();
			State = 642;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarriersExecutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwbIssueDetailsContext awbIssueDetails() {
			return GetRuleContext<AwbIssueDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthorisationContext authorisation() {
			return GetRuleContext<AuthorisationContext>(0);
		}
		public CarriersExecutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carriersExecution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarriersExecution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarriersExecutionContext carriersExecution() {
		CarriersExecutionContext _localctx = new CarriersExecutionContext(Context, State);
		EnterRule(_localctx, 34, RULE_carriersExecution);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			lineIdentifier();
			State = 645;
			awbIssueDetails();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 646;
				authorisation();
				}
			}

			State = 649;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherServiceInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OsiItemsContext[] osiItems() {
			return GetRuleContexts<OsiItemsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OsiItemsContext osiItems(int i) {
			return GetRuleContext<OsiItemsContext>(i);
		}
		public OtherServiceInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherServiceInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherServiceInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherServiceInformationContext otherServiceInformation() {
		OtherServiceInformationContext _localctx = new OtherServiceInformationContext(Context, State);
		EnterRule(_localctx, 36, RULE_otherServiceInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			lineIdentifier();
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 652;
				osiItems();
				}
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CcChargesInDestinationCurrencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestinationCurrencyContext destinationCurrency() {
			return GetRuleContext<DestinationCurrencyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrencyConversionRateContext currencyConversionRate() {
			return GetRuleContext<CurrencyConversionRateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CcChargesInDestinationCurrencyInnerContext ccChargesInDestinationCurrencyInner() {
			return GetRuleContext<CcChargesInDestinationCurrencyInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargesAtDestinationContext chargesAtDestination() {
			return GetRuleContext<ChargesAtDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalCollectChargesContext totalCollectCharges() {
			return GetRuleContext<TotalCollectChargesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public CcChargesInDestinationCurrencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ccChargesInDestinationCurrency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCcChargesInDestinationCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CcChargesInDestinationCurrencyContext ccChargesInDestinationCurrency() {
		CcChargesInDestinationCurrencyContext _localctx = new CcChargesInDestinationCurrencyContext(Context, State);
		EnterRule(_localctx, 38, RULE_ccChargesInDestinationCurrency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			lineIdentifier();
			State = 658;
			Match(SeparatorSlant);
			State = 659;
			destinationCurrency();
			State = 660;
			currencyConversionRate();
			State = 661;
			Match(SeparatorSlant);
			State = 662;
			ccChargesInDestinationCurrencyInner();
			State = 663;
			Match(SeparatorSlant);
			State = 664;
			chargesAtDestination();
			State = 665;
			Match(SeparatorSlant);
			State = 666;
			totalCollectCharges();
			State = 667;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenderReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SenderOfficeMessageAddressContext senderOfficeMessageAddress() {
			return GetRuleContext<SenderOfficeMessageAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SofrContext sofr() {
			return GetRuleContext<SofrContext>(0);
		}
		public SenderReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senderReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenderReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenderReferenceContext senderReference() {
		SenderReferenceContext _localctx = new SenderReferenceContext(Context, State);
		EnterRule(_localctx, 40, RULE_senderReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			lineIdentifier();
			State = 670;
			Match(SeparatorSlant);
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 671;
				senderOfficeMessageAddress();
				}
			}

			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 674;
				sofr();
				}
			}

			State = 677;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomsOriginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CustomsOriginCodeContext customsOriginCode() {
			return GetRuleContext<CustomsOriginCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public CustomsOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customsOrigin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomsOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomsOriginContext customsOrigin() {
		CustomsOriginContext _localctx = new CustomsOriginContext(Context, State);
		EnterRule(_localctx, 42, RULE_customsOrigin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			lineIdentifier();
			State = 680;
			Match(SeparatorSlant);
			State = 681;
			customsOriginCode();
			State = 682;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommissionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoCommissionIndicationContext noCommissionIndication() {
			return GetRuleContext<NoCommissionIndicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommissionAmountOrPercentageContext commissionAmountOrPercentage() {
			return GetRuleContext<CommissionAmountOrPercentageContext>(0);
		}
		public CommissionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commissionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommissionInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommissionInformationContext commissionInformation() {
		CommissionInformationContext _localctx = new CommissionInformationContext(Context, State);
		EnterRule(_localctx, 44, RULE_commissionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			lineIdentifier();
			State = 685;
			Match(SeparatorSlant);
			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 686;
				noCommissionIndication();
				}
			}

			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 689;
				commissionAmountOrPercentage();
				}
			}

			State = 692;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SalesIncentiveInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierSii() { return GetToken(fwb17Parser.LineIdentifierSii, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SalesIncentiveDetailContext salesIncentiveDetail() {
			return GetRuleContext<SalesIncentiveDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SalesIncentiveIndicationContext salesIncentiveIndication() {
			return GetRuleContext<SalesIncentiveIndicationContext>(0);
		}
		public SalesIncentiveInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_salesIncentiveInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSalesIncentiveInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SalesIncentiveInformationContext salesIncentiveInformation() {
		SalesIncentiveInformationContext _localctx = new SalesIncentiveInformationContext(Context, State);
		EnterRule(_localctx, 46, RULE_salesIncentiveInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(LineIdentifierSii);
			State = 695;
			Match(SeparatorSlant);
			State = 696;
			salesIncentiveDetail();
			State = 698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 697;
				salesIncentiveIndication();
				}
			}

			State = 700;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentReferenceDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AgentReferenceContext agentReference() {
			return GetRuleContext<AgentReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public AgentReferenceDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentReferenceData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentReferenceData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentReferenceDataContext agentReferenceData() {
		AgentReferenceDataContext _localctx = new AgentReferenceDataContext(Context, State);
		EnterRule(_localctx, 48, RULE_agentReferenceData);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			lineIdentifier();
			State = 703;
			Match(SeparatorSlant);
			State = 704;
			agentReference();
			State = 705;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext[] specialHandlingRequirements() {
			return GetRuleContexts<SpecialHandlingRequirementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext specialHandlingRequirements(int i) {
			return GetRuleContext<SpecialHandlingRequirementsContext>(i);
		}
		public SpecialHandlingDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingDetailsContext specialHandlingDetails() {
		SpecialHandlingDetailsContext _localctx = new SpecialHandlingDetailsContext(Context, State);
		EnterRule(_localctx, 50, RULE_specialHandlingDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			lineIdentifier();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 708;
				specialHandlingRequirements();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			State = 713;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NominatedHandlingPartyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierNom() { return GetToken(fwb17Parser.LineIdentifierNom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameInnerContext nameInner() {
			return GetRuleContext<NameInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceInnerContext placeInner() {
			return GetRuleContext<PlaceInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public NominatedHandlingPartyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nominatedHandlingParty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNominatedHandlingParty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NominatedHandlingPartyContext nominatedHandlingParty() {
		NominatedHandlingPartyContext _localctx = new NominatedHandlingPartyContext(Context, State);
		EnterRule(_localctx, 52, RULE_nominatedHandlingParty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(LineIdentifierNom);
			State = 716;
			Match(SeparatorSlant);
			State = 717;
			nameInner();
			State = 718;
			Match(SeparatorSlant);
			State = 719;
			placeInner();
			State = 720;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentReferenceInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineIdentifierSri() { return GetToken(fwb17Parser.LineIdentifierSri, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceNumberContext referenceNumber() {
			return GetRuleContext<ReferenceNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Supplementary1or2Context supplementary1or2() {
			return GetRuleContext<Supplementary1or2Context>(0);
		}
		public ShipmentReferenceInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentReferenceInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentReferenceInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentReferenceInformationContext shipmentReferenceInformation() {
		ShipmentReferenceInformationContext _localctx = new ShipmentReferenceInformationContext(Context, State);
		EnterRule(_localctx, 54, RULE_shipmentReferenceInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(LineIdentifierSri);
			State = 723;
			Match(SeparatorSlant);
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 724;
				referenceNumber();
				}
				break;
			}
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 727;
				supplementary1or2();
				}
			}

			State = 730;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherParticipantInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameInnerContext nameInner() {
			return GetRuleContext<NameInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fwb17Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fwb17Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherParticipantOfficeMessageAddressContext otherParticipantOfficeMessageAddress() {
			return GetRuleContext<OtherParticipantOfficeMessageAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpofrContext opofr() {
			return GetRuleContext<OpofrContext>(0);
		}
		public OtherParticipantInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherParticipantInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherParticipantInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherParticipantInformationContext otherParticipantInformation() {
		OtherParticipantInformationContext _localctx = new OtherParticipantInformationContext(Context, State);
		EnterRule(_localctx, 56, RULE_otherParticipantInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			lineIdentifier();
			State = 733;
			Match(SeparatorSlant);
			State = 734;
			nameInner();
			State = 735;
			Match(SeparatorCrlf);
			State = 736;
			Match(SeparatorSlant);
			State = 738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 737;
				otherParticipantOfficeMessageAddress();
				}
			}

			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 740;
				opofr();
				}
			}

			State = 743;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCustSecurityAndRegulatCtrlInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoDetContext[] otherCustSecurityAndRegulatCtrlInfoDet() {
			return GetRuleContexts<OtherCustSecurityAndRegulatCtrlInfoDetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoDetContext otherCustSecurityAndRegulatCtrlInfoDet(int i) {
			return GetRuleContext<OtherCustSecurityAndRegulatCtrlInfoDetContext>(i);
		}
		public OtherCustSecurityAndRegulatCtrlInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCustSecurityAndRegulatCtrlInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherCustSecurityAndRegulatCtrlInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherCustSecurityAndRegulatCtrlInfoContext otherCustSecurityAndRegulatCtrlInfo() {
		OtherCustSecurityAndRegulatCtrlInfoContext _localctx = new OtherCustSecurityAndRegulatCtrlInfoContext(Context, State);
		EnterRule(_localctx, 58, RULE_otherCustSecurityAndRegulatCtrlInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			lineIdentifier();
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 746;
				otherCustSecurityAndRegulatCtrlInfoDet();
				}
				}
				State = 749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateDescriptionItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeLineCountContext chargeLineCount() {
			return GetRuleContext<ChargeLineCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementFrom3To10Context elementFrom3To10() {
			return GetRuleContext<ElementFrom3To10Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementFrom11To19Context elementFrom11To19() {
			return GetRuleContext<ElementFrom11To19Context>(0);
		}
		public RateDescriptionItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateDescriptionItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateDescriptionItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateDescriptionItemsContext rateDescriptionItems() {
		RateDescriptionItemsContext _localctx = new RateDescriptionItemsContext(Context, State);
		EnterRule(_localctx, 60, RULE_rateDescriptionItems);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			chargeLineCount();
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 752;
				elementFrom3To10();
				}
				break;
			}
			State = 756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 755;
				elementFrom11To19();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeLineCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbRateLineNumberContext hwbRateLineNumber() {
			return GetRuleContext<HwbRateLineNumberContext>(0);
		}
		public ChargeLineCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeLineCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeLineCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeLineCountContext chargeLineCount() {
		ChargeLineCountContext _localctx = new ChargeLineCountContext(Context, State);
		EnterRule(_localctx, 62, RULE_chargeLineCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			Match(SeparatorSlant);
			State = 759;
			hwbRateLineNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementFrom3To10Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesRcpDetailsContext numberOfPiecesRcpDetails() {
			return GetRuleContext<NumberOfPiecesRcpDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrossWeightDetailsContext grossWeightDetails() {
			return GetRuleContext<GrossWeightDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateClassDetailsContext rateClassDetails() {
			return GetRuleContext<RateClassDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommodityItemNumberDetailsContext commodityItemNumberDetails() {
			return GetRuleContext<CommodityItemNumberDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeableWeightDetailsContext chargeableWeightDetails() {
			return GetRuleContext<ChargeableWeightDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateChargeDetailsContext rateChargeDetails() {
			return GetRuleContext<RateChargeDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalDetailsContext totalDetails() {
			return GetRuleContext<TotalDetailsContext>(0);
		}
		public ElementFrom3To10Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementFrom3To10; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementFrom3To10(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementFrom3To10Context elementFrom3To10() {
		ElementFrom3To10Context _localctx = new ElementFrom3To10Context(Context, State);
		EnterRule(_localctx, 64, RULE_elementFrom3To10);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 761;
				numberOfPiecesRcpDetails();
				}
				break;
			}
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 764;
				grossWeightDetails();
				}
				break;
			}
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 767;
				rateClassDetails();
				}
				break;
			}
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 770;
				commodityItemNumberDetails();
				}
				break;
			}
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 773;
				chargeableWeightDetails();
				}
				break;
			}
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 776;
				rateChargeDetails();
				}
				break;
			}
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 779;
				totalDetails();
				}
			}

			State = 782;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementFrom11To19Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GoodsDescriptionContext goodsDescription() {
			return GetRuleContext<GoodsDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoodsConsolidationContext goodsConsolidation() {
			return GetRuleContext<GoodsConsolidationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionsContext dimensions() {
			return GetRuleContext<DimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeContext volume() {
			return GetRuleContext<VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UldNumberContext uldNumber() {
			return GetRuleContext<UldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShippersLoadAndCountContext shippersLoadAndCount() {
			return GetRuleContext<ShippersLoadAndCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedCommodityCodeContext harmonisedCommodityCode() {
			return GetRuleContext<HarmonisedCommodityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountryOfOriginOfGoodsContext countryOfOriginOfGoods() {
			return GetRuleContext<CountryOfOriginOfGoodsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceCodeDetailsContext serviceCodeDetails() {
			return GetRuleContext<ServiceCodeDetailsContext>(0);
		}
		public ElementFrom11To19Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementFrom11To19; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementFrom11To19(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementFrom11To19Context elementFrom11To19() {
		ElementFrom11To19Context _localctx = new ElementFrom11To19Context(Context, State);
		EnterRule(_localctx, 66, RULE_elementFrom11To19);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GoodsDescriptionIdentifier:
				{
				State = 784;
				goodsDescription();
				}
				break;
			case ConsolidationIdentifier:
				{
				State = 785;
				goodsConsolidation();
				}
				break;
			case DimensionsIdentifier:
				{
				State = 786;
				dimensions();
				}
				break;
			case VolumeIdentifier:
				{
				State = 787;
				volume();
				}
				break;
			case UldNumberIdentifier:
				{
				State = 788;
				uldNumber();
				}
				break;
			case ShippersLoadAndCountIdentifier:
				{
				State = 789;
				shippersLoadAndCount();
				}
				break;
			case HarmonisedCommodityCodeIdentifier:
				{
				State = 790;
				harmonisedCommodityCode();
				}
				break;
			case CountryOfOriginOfGoodsIdentifier:
				{
				State = 791;
				countryOfOriginOfGoods();
				}
				break;
			case SeparatorSlant:
				{
				State = 792;
				serviceCodeDetails();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 795;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPiecesRcpDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateCombinationPointContext rateCombinationPoint() {
			return GetRuleContext<RateCombinationPointContext>(0);
		}
		public NumberOfPiecesRcpDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPiecesRcpDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPiecesRcpDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPiecesRcpDetailsContext numberOfPiecesRcpDetails() {
		NumberOfPiecesRcpDetailsContext _localctx = new NumberOfPiecesRcpDetailsContext(Context, State);
		EnterRule(_localctx, 68, RULE_numberOfPiecesRcpDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(SeparatorSlant);
			State = 798;
			hwbColumnIdentifier();
			State = 801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				{
				State = 799;
				numberOfPieces();
				}
				break;
			case A:
				{
				State = 800;
				rateCombinationPoint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrossWeightDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WeightInfoContext weightInfo() {
			return GetRuleContext<WeightInfoContext>(0);
		}
		public GrossWeightDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grossWeightDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrossWeightDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrossWeightDetailsContext grossWeightDetails() {
		GrossWeightDetailsContext _localctx = new GrossWeightDetailsContext(Context, State);
		EnterRule(_localctx, 70, RULE_grossWeightDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(SeparatorSlant);
			State = 804;
			weightInfo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateClassDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateClassCodeContext rateClassCode() {
			return GetRuleContext<RateClassCodeContext>(0);
		}
		public RateClassDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateClassDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateClassDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateClassDetailsContext rateClassDetails() {
		RateClassDetailsContext _localctx = new RateClassDetailsContext(Context, State);
		EnterRule(_localctx, 72, RULE_rateClassDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(SeparatorSlant);
			State = 807;
			hwbColumnIdentifier();
			State = 808;
			rateClassCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommodityItemNumberDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommodityItemNumberContext commodityItemNumber() {
			return GetRuleContext<CommodityItemNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UldRateClassTypeContext uldRateClassType() {
			return GetRuleContext<UldRateClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateClassCodeBasisAndPercentageContext rateClassCodeBasisAndPercentage() {
			return GetRuleContext<RateClassCodeBasisAndPercentageContext>(0);
		}
		public CommodityItemNumberDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commodityItemNumberDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommodityItemNumberDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommodityItemNumberDetailsContext commodityItemNumberDetails() {
		CommodityItemNumberDetailsContext _localctx = new CommodityItemNumberDetailsContext(Context, State);
		EnterRule(_localctx, 74, RULE_commodityItemNumberDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(SeparatorSlant);
			State = 811;
			hwbColumnIdentifier();
			State = 815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 812;
				commodityItemNumber();
				}
				break;
			case 2:
				{
				State = 813;
				uldRateClassType();
				}
				break;
			case 3:
				{
				State = 814;
				rateClassCodeBasisAndPercentage();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeableWeightDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public ChargeableWeightDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeableWeightDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeableWeightDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeableWeightDetailsContext chargeableWeightDetails() {
		ChargeableWeightDetailsContext _localctx = new ChargeableWeightDetailsContext(Context, State);
		EnterRule(_localctx, 76, RULE_chargeableWeightDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(SeparatorSlant);
			State = 818;
			hwbColumnIdentifier();
			State = 819;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateChargeDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RateOrChargeContext rateOrCharge() {
			return GetRuleContext<RateOrChargeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscountContext discount() {
			return GetRuleContext<DiscountContext>(0);
		}
		public RateChargeDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateChargeDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateChargeDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateChargeDetailsContext rateChargeDetails() {
		RateChargeDetailsContext _localctx = new RateChargeDetailsContext(Context, State);
		EnterRule(_localctx, 78, RULE_rateChargeDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(SeparatorSlant);
			State = 822;
			hwbColumnIdentifier();
			State = 825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 823;
				rateOrCharge();
				}
				break;
			case 2:
				{
				State = 824;
				discount();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbColumnIdentifierContext hwbColumnIdentifier() {
			return GetRuleContext<HwbColumnIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscountContext discount() {
			return GetRuleContext<DiscountContext>(0);
		}
		public TotalDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalDetailsContext totalDetails() {
		TotalDetailsContext _localctx = new TotalDetailsContext(Context, State);
		EnterRule(_localctx, 80, RULE_totalDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(SeparatorSlant);
			State = 828;
			hwbColumnIdentifier();
			State = 831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 829;
				chargeAmount();
				}
				break;
			case 2:
				{
				State = 830;
				discount();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodsDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GoodsDescriptionIdentifier() { return GetToken(fwb17Parser.GoodsDescriptionIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NatureAndQuantityOfGoodsContext natureAndQuantityOfGoods() {
			return GetRuleContext<NatureAndQuantityOfGoodsContext>(0);
		}
		public GoodsDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodsDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodsDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodsDescriptionContext goodsDescription() {
		GoodsDescriptionContext _localctx = new GoodsDescriptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_goodsDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(GoodsDescriptionIdentifier);
			State = 834;
			natureAndQuantityOfGoods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoodsConsolidationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConsolidationIdentifier() { return GetToken(fwb17Parser.ConsolidationIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NatureAndQuantityOfGoodsContext natureAndQuantityOfGoods() {
			return GetRuleContext<NatureAndQuantityOfGoodsContext>(0);
		}
		public GoodsConsolidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goodsConsolidation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodsConsolidation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoodsConsolidationContext goodsConsolidation() {
		GoodsConsolidationContext _localctx = new GoodsConsolidationContext(Context, State);
		EnterRule(_localctx, 84, RULE_goodsConsolidation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(ConsolidationIdentifier);
			State = 837;
			natureAndQuantityOfGoods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DimensionsIdentifier() { return GetToken(fwb17Parser.DimensionsIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimentionsDimNdaContext dimentionsDimNda() {
			return GetRuleContext<DimentionsDimNdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightInfoContext weightInfo() {
			return GetRuleContext<WeightInfoContext>(0);
		}
		public DimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionsContext dimensions() {
		DimensionsContext _localctx = new DimensionsContext(Context, State);
		EnterRule(_localctx, 86, RULE_dimensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(DimensionsIdentifier);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 840;
				weightInfo();
				}
			}

			State = 843;
			Match(SeparatorSlant);
			State = 844;
			dimentionsDimNda();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VolumeIdentifier() { return GetToken(fwb17Parser.VolumeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCodeContext volumeCode() {
			return GetRuleContext<VolumeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeAmountContext volumeAmount() {
			return GetRuleContext<VolumeAmountContext>(0);
		}
		public VolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeContext volume() {
		VolumeContext _localctx = new VolumeContext(Context, State);
		EnterRule(_localctx, 88, RULE_volume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(VolumeIdentifier);
			State = 847;
			volumeCode();
			State = 848;
			volumeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UldNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UldNumberIdentifier() { return GetToken(fwb17Parser.UldNumberIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UldTypeContext uldType() {
			return GetRuleContext<UldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UldSerialNumberContext uldSerialNumber() {
			return GetRuleContext<UldSerialNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UldOwnerCodeContext uldOwnerCode() {
			return GetRuleContext<UldOwnerCodeContext>(0);
		}
		public UldNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uldNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUldNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UldNumberContext uldNumber() {
		UldNumberContext _localctx = new UldNumberContext(Context, State);
		EnterRule(_localctx, 90, RULE_uldNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(UldNumberIdentifier);
			State = 851;
			uldType();
			State = 852;
			uldSerialNumber();
			State = 853;
			uldOwnerCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShippersLoadAndCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShippersLoadAndCountIdentifier() { return GetToken(fwb17Parser.ShippersLoadAndCountIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlacContext slac() {
			return GetRuleContext<SlacContext>(0);
		}
		public ShippersLoadAndCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shippersLoadAndCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShippersLoadAndCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShippersLoadAndCountContext shippersLoadAndCount() {
		ShippersLoadAndCountContext _localctx = new ShippersLoadAndCountContext(Context, State);
		EnterRule(_localctx, 92, RULE_shippersLoadAndCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			Match(ShippersLoadAndCountIdentifier);
			State = 856;
			slac();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HarmonisedCommodityCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HarmonisedCommodityCodeIdentifier() { return GetToken(fwb17Parser.HarmonisedCommodityCodeIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedCommodityCodeInnerContext harmonisedCommodityCodeInner() {
			return GetRuleContext<HarmonisedCommodityCodeInnerContext>(0);
		}
		public HarmonisedCommodityCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_harmonisedCommodityCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHarmonisedCommodityCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HarmonisedCommodityCodeContext harmonisedCommodityCode() {
		HarmonisedCommodityCodeContext _localctx = new HarmonisedCommodityCodeContext(Context, State);
		EnterRule(_localctx, 94, RULE_harmonisedCommodityCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			Match(HarmonisedCommodityCodeIdentifier);
			State = 859;
			harmonisedCommodityCodeInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryOfOriginOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CountryOfOriginOfGoodsIdentifier() { return GetToken(fwb17Parser.CountryOfOriginOfGoodsIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoCountryCodeContext isoCountryCode() {
			return GetRuleContext<IsoCountryCodeContext>(0);
		}
		public CountryOfOriginOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countryOfOriginOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountryOfOriginOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryOfOriginOfGoodsContext countryOfOriginOfGoods() {
		CountryOfOriginOfGoodsContext _localctx = new CountryOfOriginOfGoodsContext(Context, State);
		EnterRule(_localctx, 96, RULE_countryOfOriginOfGoods);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			Match(CountryOfOriginOfGoodsIdentifier);
			State = 862;
			isoCountryCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceCodeDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceCodeContext serviceCode() {
			return GetRuleContext<ServiceCodeContext>(0);
		}
		public ServiceCodeDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceCodeDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceCodeDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceCodeDetailsContext serviceCodeDetails() {
		ServiceCodeDetailsContext _localctx = new ServiceCodeDetailsContext(Context, State);
		EnterRule(_localctx, 98, RULE_serviceCodeDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(SeparatorSlant);
			State = 865;
			serviceCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateClassCodeBasisAndPercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RateClassCodeBasisContext rateClassCodeBasis() {
			return GetRuleContext<RateClassCodeBasisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassRatePercentageContext classRatePercentage() {
			return GetRuleContext<ClassRatePercentageContext>(0);
		}
		public RateClassCodeBasisAndPercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateClassCodeBasisAndPercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateClassCodeBasisAndPercentage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateClassCodeBasisAndPercentageContext rateClassCodeBasisAndPercentage() {
		RateClassCodeBasisAndPercentageContext _localctx = new RateClassCodeBasisAndPercentageContext(Context, State);
		EnterRule(_localctx, 100, RULE_rateClassCodeBasisAndPercentage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			rateClassCodeBasis();
			State = 868;
			classRatePercentage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public WeightInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightInfoContext weightInfo() {
		WeightInfoContext _localctx = new WeightInfoContext(Context, State);
		EnterRule(_localctx, 102, RULE_weightInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			weightCode();
			State = 871;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimentionsDimNdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeasurementUnitCodeContext measurementUnitCode() {
			return GetRuleContext<MeasurementUnitCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		public DimentionsDimNdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimentionsDimNda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimentionsDimNda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimentionsDimNdaContext dimentionsDimNda() {
		DimentionsDimNdaContext _localctx = new DimentionsDimNdaContext(Context, State);
		EnterRule(_localctx, 104, RULE_dimentionsDimNda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			measurementUnitCode();
			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 874;
				dimension();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LengthDimensionContext lengthDimension() {
			return GetRuleContext<LengthDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorHyphen() { return GetTokens(fwb17Parser.SeparatorHyphen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorHyphen(int i) {
			return GetToken(fwb17Parser.SeparatorHyphen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WidthDimensionContext widthDimension() {
			return GetRuleContext<WidthDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeightDimensionContext heightDimension() {
			return GetRuleContext<HeightDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		public DimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionContext dimension() {
		DimensionContext _localctx = new DimensionContext(Context, State);
		EnterRule(_localctx, 106, RULE_dimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			lengthDimension();
			State = 878;
			Match(SeparatorHyphen);
			State = 879;
			widthDimension();
			State = 880;
			Match(SeparatorHyphen);
			State = 881;
			heightDimension();
			State = 882;
			Match(SeparatorSlant);
			State = 883;
			numberOfPieces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirlinePrefixContext airlinePrefix() {
			return GetRuleContext<AirlinePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorHyphen() { return GetToken(fwb17Parser.SeparatorHyphen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwbSerialNumberContext awbSerialNumber() {
			return GetRuleContext<AwbSerialNumberContext>(0);
		}
		public AwbIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbIdentificationContext awbIdentification() {
		AwbIdentificationContext _localctx = new AwbIdentificationContext(Context, State);
		EnterRule(_localctx, 108, RULE_awbIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			airlinePrefix();
			State = 886;
			Match(SeparatorHyphen);
			State = 887;
			awbSerialNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbOriginAndDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfOriginContext airportCodeOfOrigin() {
			return GetRuleContext<AirportCodeOfOriginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDestitationContext airportCodeOfDestitation() {
			return GetRuleContext<AirportCodeOfDestitationContext>(0);
		}
		public AwbOriginAndDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbOriginAndDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbOriginAndDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbOriginAndDestinationContext awbOriginAndDestination() {
		AwbOriginAndDestinationContext _localctx = new AwbOriginAndDestinationContext(Context, State);
		EnterRule(_localctx, 110, RULE_awbOriginAndDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			airportCodeOfOrigin();
			State = 890;
			airportCodeOfDestitation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public QuantityDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantityDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityDetailContext quantityDetail() {
		QuantityDetailContext _localctx = new QuantityDetailContext(Context, State);
		EnterRule(_localctx, 112, RULE_quantityDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(SeparatorSlant);
			State = 893;
			shipmentDescriptionCode();
			State = 894;
			numberOfPieces();
			State = 895;
			weightCode();
			State = 896;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCodeContext volumeCode() {
			return GetRuleContext<VolumeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeAmountContext volumeAmount() {
			return GetRuleContext<VolumeAmountContext>(0);
		}
		public VolumeDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeDetailContext volumeDetail() {
		VolumeDetailContext _localctx = new VolumeDetailContext(Context, State);
		EnterRule(_localctx, 114, RULE_volumeDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			volumeCode();
			State = 899;
			volumeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DensityIndicatorContext densityIndicator() {
			return GetRuleContext<DensityIndicatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DensityGroupInnerContext densityGroupInner() {
			return GetRuleContext<DensityGroupInnerContext>(0);
		}
		public DensityGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityGroupContext densityGroup() {
		DensityGroupContext _localctx = new DensityGroupContext(Context, State);
		EnterRule(_localctx, 116, RULE_densityGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			densityIndicator();
			State = 902;
			densityGroupInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingRequirementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingCodeContext specialHandlingCode() {
			return GetRuleContext<SpecialHandlingCodeContext>(0);
		}
		public SpecialHandlingRequirementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingRequirements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingRequirements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingRequirementsContext specialHandlingRequirements() {
		SpecialHandlingRequirementsContext _localctx = new SpecialHandlingRequirementsContext(Context, State);
		EnterRule(_localctx, 118, RULE_specialHandlingRequirements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(SeparatorSlant);
			State = 905;
			specialHandlingCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightNumberContext flightNumber() {
			return GetRuleContext<FlightNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		public FlightIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightIdentificationContext flightIdentification() {
		FlightIdentificationContext _localctx = new FlightIdentificationContext(Context, State);
		EnterRule(_localctx, 120, RULE_flightIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(SeparatorSlant);
			State = 908;
			carrierCode();
			State = 909;
			flightNumber();
			State = 910;
			Match(SeparatorSlant);
			State = 911;
			day();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstDestinationCarrierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeContext airportCode() {
			return GetRuleContext<AirportCodeContext>(0);
		}
		public FirstDestinationCarrierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstDestinationCarrier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstDestinationCarrier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstDestinationCarrierContext firstDestinationCarrier() {
		FirstDestinationCarrierContext _localctx = new FirstDestinationCarrierContext(Context, State);
		EnterRule(_localctx, 122, RULE_firstDestinationCarrier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(SeparatorSlant);
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 914;
				airportCode();
				}
				break;
			}
			State = 917;
			carrierCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnwardDestinationCarrierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeContext airportCode() {
			return GetRuleContext<AirportCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		public OnwardDestinationCarrierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onwardDestinationCarrier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnwardDestinationCarrier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnwardDestinationCarrierContext onwardDestinationCarrier() {
		OnwardDestinationCarrierContext _localctx = new OnwardDestinationCarrierContext(Context, State);
		EnterRule(_localctx, 124, RULE_onwardDestinationCarrier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			Match(SeparatorSlant);
			State = 920;
			airportCode();
			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A || _la==N) {
				{
				State = 921;
				carrierCode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepaidCollectChargeDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PcIndWeightValuationContext pcIndWeightValuation() {
			return GetRuleContext<PcIndWeightValuationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PcIndOtherChargesContext pcIndOtherCharges() {
			return GetRuleContext<PcIndOtherChargesContext>(0);
		}
		public PrepaidCollectChargeDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepaidCollectChargeDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepaidCollectChargeDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepaidCollectChargeDeclarationsContext prepaidCollectChargeDeclarations() {
		PrepaidCollectChargeDeclarationsContext _localctx = new PrepaidCollectChargeDeclarationsContext(Context, State);
		EnterRule(_localctx, 126, RULE_prepaidCollectChargeDeclarations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			pcIndWeightValuation();
			State = 925;
			pcIndOtherCharges();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForCarriageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaredValueForCarriageContext declaredValueForCarriage() {
			return GetRuleContext<DeclaredValueForCarriageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForCarriageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForCarriageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForCarriageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForCarriageDeclarationContext valueForCarriageDeclaration() {
		ValueForCarriageDeclarationContext _localctx = new ValueForCarriageDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_valueForCarriageDeclaration);
		try {
			State = 929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				declaredValueForCarriage();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 928;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForCustomsDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaredValueForCustomsContext declaredValueForCustoms() {
			return GetRuleContext<DeclaredValueForCustomsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForCustomsDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForCustomsDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForCustomsDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForCustomsDeclarationContext valueForCustomsDeclaration() {
		ValueForCustomsDeclarationContext _localctx = new ValueForCustomsDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_valueForCustomsDeclaration);
		try {
			State = 933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931;
				declaredValueForCustoms();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForInsuranceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmountOfInsuranceContext amountOfInsurance() {
			return GetRuleContext<AmountOfInsuranceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForInsuranceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForInsuranceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForInsuranceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForInsuranceDeclarationContext valueForInsuranceDeclaration() {
		ValueForInsuranceDeclarationContext _localctx = new ValueForInsuranceDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_valueForInsuranceDeclaration);
		try {
			State = 937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 935;
				amountOfInsurance();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 936;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherChargeDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeLineContext chargeLine() {
			return GetRuleContext<ChargeLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargeItemsContext[] otherChargeItems() {
			return GetRuleContexts<OtherChargeItemsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargeItemsContext otherChargeItems(int i) {
			return GetRuleContext<OtherChargeItemsContext>(i);
		}
		public OtherChargeDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherChargeDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherChargeDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherChargeDetailsContext otherChargeDetails() {
		OtherChargeDetailsContext _localctx = new OtherChargeDetailsContext(Context, State);
		EnterRule(_localctx, 134, RULE_otherChargeDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			chargeLine();
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 940;
				otherChargeItems();
				}
				}
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A );
			State = 945;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PcIndOtherChargesContext pcIndOtherCharges() {
			return GetRuleContext<PcIndOtherChargesContext>(0);
		}
		public ChargeLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeLineContext chargeLine() {
		ChargeLineContext _localctx = new ChargeLineContext(Context, State);
		EnterRule(_localctx, 136, RULE_chargeLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(SeparatorSlant);
			State = 948;
			pcIndOtherCharges();
			State = 949;
			Match(SeparatorSlant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherChargeItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OtherChargeCodeContext otherChargeCode() {
			return GetRuleContext<OtherChargeCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntitlementCodeContext entitlementCode() {
			return GetRuleContext<EntitlementCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public OtherChargeItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherChargeItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherChargeItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherChargeItemsContext otherChargeItems() {
		OtherChargeItemsContext _localctx = new OtherChargeItemsContext(Context, State);
		EnterRule(_localctx, 138, RULE_otherChargeItems);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			otherChargeCode();
			State = 952;
			entitlementCode();
			State = 953;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargesOrTaxesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChargeIdentifierContext chargeIdentifier() {
			return GetRuleContext<ChargeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public ChargesOrTaxesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargesOrTaxes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargesOrTaxes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargesOrTaxesContext chargesOrTaxes() {
		ChargesOrTaxesContext _localctx = new ChargesOrTaxesContext(Context, State);
		EnterRule(_localctx, 140, RULE_chargesOrTaxes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(SeparatorSlant);
			State = 956;
			chargeIdentifier();
			State = 957;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalChargesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChargeIdentifierContext chargeIdentifier() {
			return GetRuleContext<ChargeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public TotalChargesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalCharges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalCharges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalChargesContext totalCharges() {
		TotalChargesContext _localctx = new TotalChargesContext(Context, State);
		EnterRule(_localctx, 142, RULE_totalCharges);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			Match(SeparatorSlant);
			State = 960;
			chargeIdentifier();
			State = 961;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbIssueDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthContext month() {
			return GetRuleContext<MonthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YearContext year() {
			return GetRuleContext<YearContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceInnerContext placeInner() {
			return GetRuleContext<PlaceInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		public AwbIssueDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbIssueDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbIssueDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbIssueDetailsContext awbIssueDetails() {
		AwbIssueDetailsContext _localctx = new AwbIssueDetailsContext(Context, State);
		EnterRule(_localctx, 144, RULE_awbIssueDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(SeparatorSlant);
			State = 964;
			day();
			State = 965;
			month();
			State = 966;
			year();
			State = 967;
			Match(SeparatorSlant);
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 968;
				placeInner();
				}
				break;
			}
			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 971;
				airportCityCode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthorisationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public AuthorisationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorisation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorisation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthorisationContext authorisation() {
		AuthorisationContext _localctx = new AuthorisationContext(Context, State);
		EnterRule(_localctx, 146, RULE_authorisation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			Match(SeparatorSlant);
			State = 975;
			signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationCurrencyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsoCurrencyCodeContext isoCurrencyCode() {
			return GetRuleContext<IsoCurrencyCodeContext>(0);
		}
		public DestinationCurrencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destinationCurrency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestinationCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestinationCurrencyContext destinationCurrency() {
		DestinationCurrencyContext _localctx = new DestinationCurrencyContext(Context, State);
		EnterRule(_localctx, 148, RULE_destinationCurrency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			isoCurrencyCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyConversionRateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RateOfExchangeContext rateOfExchange() {
			return GetRuleContext<RateOfExchangeContext>(0);
		}
		public CurrencyConversionRateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currencyConversionRate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrencyConversionRate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyConversionRateContext currencyConversionRate() {
		CurrencyConversionRateContext _localctx = new CurrencyConversionRateContext(Context, State);
		EnterRule(_localctx, 150, RULE_currencyConversionRate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			rateOfExchange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CcChargesInDestinationCurrencyInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public CcChargesInDestinationCurrencyInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ccChargesInDestinationCurrencyInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCcChargesInDestinationCurrencyInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CcChargesInDestinationCurrencyInnerContext ccChargesInDestinationCurrencyInner() {
		CcChargesInDestinationCurrencyInnerContext _localctx = new CcChargesInDestinationCurrencyInnerContext(Context, State);
		EnterRule(_localctx, 152, RULE_ccChargesInDestinationCurrencyInner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargesAtDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public ChargesAtDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargesAtDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargesAtDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargesAtDestinationContext chargesAtDestination() {
		ChargesAtDestinationContext _localctx = new ChargesAtDestinationContext(Context, State);
		EnterRule(_localctx, 154, RULE_chargesAtDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalCollectChargesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public TotalCollectChargesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalCollectCharges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalCollectCharges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalCollectChargesContext totalCollectCharges() {
		TotalCollectChargesContext _localctx = new TotalCollectChargesContext(Context, State);
		EnterRule(_localctx, 156, RULE_totalCollectCharges);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoCommissionIndicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CassIndicatorContext cassIndicator() {
			return GetRuleContext<CassIndicatorContext>(0);
		}
		public NoCommissionIndicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noCommissionIndication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoCommissionIndication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoCommissionIndicationContext noCommissionIndication() {
		NoCommissionIndicationContext _localctx = new NoCommissionIndicationContext(Context, State);
		EnterRule(_localctx, 158, RULE_noCommissionIndication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			cassIndicator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommissionAmountOrPercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommissionAmountContext commissionAmount() {
			return GetRuleContext<CommissionAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommissionPercentageContext commissionPercentage() {
			return GetRuleContext<CommissionPercentageContext>(0);
		}
		public CommissionAmountOrPercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commissionAmountOrPercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommissionAmountOrPercentage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommissionAmountOrPercentageContext commissionAmountOrPercentage() {
		CommissionAmountOrPercentageContext _localctx = new CommissionAmountOrPercentageContext(Context, State);
		EnterRule(_localctx, 160, RULE_commissionAmountOrPercentage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			Match(SeparatorSlant);
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 990;
				commissionAmount();
				}
			}

			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 993;
				commissionPercentage();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommissionAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CassSettlementFactorContext cassSettlementFactor() {
			return GetRuleContext<CassSettlementFactorContext>(0);
		}
		public CommissionAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commissionAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommissionAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommissionAmountContext commissionAmount() {
		CommissionAmountContext _localctx = new CommissionAmountContext(Context, State);
		EnterRule(_localctx, 162, RULE_commissionAmount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			cassSettlementFactor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommissionPercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CassSettlementFactorContext cassSettlementFactor() {
			return GetRuleContext<CassSettlementFactorContext>(0);
		}
		public CommissionPercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commissionPercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommissionPercentage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommissionPercentageContext commissionPercentage() {
		CommissionPercentageContext _localctx = new CommissionPercentageContext(Context, State);
		EnterRule(_localctx, 164, RULE_commissionPercentage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			Match(SeparatorSlant);
			State = 999;
			cassSettlementFactor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SalesIncentiveDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChargeAmountContext chargeAmount() {
			return GetRuleContext<ChargeAmountContext>(0);
		}
		public SalesIncentiveDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_salesIncentiveDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSalesIncentiveDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SalesIncentiveDetailContext salesIncentiveDetail() {
		SalesIncentiveDetailContext _localctx = new SalesIncentiveDetailContext(Context, State);
		EnterRule(_localctx, 166, RULE_salesIncentiveDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1001;
			chargeAmount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SalesIncentiveIndicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CassIndicatorContext cassIndicator() {
			return GetRuleContext<CassIndicatorContext>(0);
		}
		public SalesIncentiveIndicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_salesIncentiveIndication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSalesIncentiveIndication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SalesIncentiveIndicationContext salesIncentiveIndication() {
		SalesIncentiveIndicationContext _localctx = new SalesIncentiveIndicationContext(Context, State);
		EnterRule(_localctx, 168, RULE_salesIncentiveIndication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			Match(SeparatorSlant);
			State = 1004;
			cassIndicator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgentReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileReferenceContext fileReference() {
			return GetRuleContext<FileReferenceContext>(0);
		}
		public AgentReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agentReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgentReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgentReferenceContext agentReference() {
		AgentReferenceContext _localctx = new AgentReferenceContext(Context, State);
		EnterRule(_localctx, 170, RULE_agentReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			fileReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCustSecurityAndRegulatCtrlInfoDetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupplemCustSecurityAndRegulatCtrlInfoContext supplemCustSecurityAndRegulatCtrlInfo() {
			return GetRuleContext<SupplemCustSecurityAndRegulatCtrlInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoCountryCodeContext isoCountryCode() {
			return GetRuleContext<IsoCountryCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InformationIdentifierContext informationIdentifier() {
			return GetRuleContext<InformationIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustSecurityAndRegulatCtrlInfoIdContext custSecurityAndRegulatCtrlInfoId() {
			return GetRuleContext<CustSecurityAndRegulatCtrlInfoIdContext>(0);
		}
		public OtherCustSecurityAndRegulatCtrlInfoDetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCustSecurityAndRegulatCtrlInfoDet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherCustSecurityAndRegulatCtrlInfoDet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherCustSecurityAndRegulatCtrlInfoDetContext otherCustSecurityAndRegulatCtrlInfoDet() {
		OtherCustSecurityAndRegulatCtrlInfoDetContext _localctx = new OtherCustSecurityAndRegulatCtrlInfoDetContext(Context, State);
		EnterRule(_localctx, 172, RULE_otherCustSecurityAndRegulatCtrlInfoDet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(SeparatorSlant);
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1009;
				isoCountryCode();
				}
			}

			State = 1012;
			Match(SeparatorSlant);
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1013;
				informationIdentifier();
				}
			}

			State = 1016;
			Match(SeparatorSlant);
			State = 1018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1017;
				custSecurityAndRegulatCtrlInfoId();
				}
			}

			State = 1020;
			Match(SeparatorSlant);
			State = 1021;
			supplemCustSecurityAndRegulatCtrlInfo();
			State = 1022;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccountNumberContext accountNumber() {
			return GetRuleContext<AccountNumberContext>(0);
		}
		public AccountDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountDetailContext accountDetail() {
		AccountDetailContext _localctx = new AccountDetailContext(Context, State);
		EnterRule(_localctx, 174, RULE_accountDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			Match(SeparatorSlant);
			State = 1025;
			accountNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NamIdentifier() { return GetToken(fwb17Parser.NamIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDetailContext[] nameDetail() {
			return GetRuleContexts<NameDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameDetailContext nameDetail(int i) {
			return GetRuleContext<NameDetailContext>(i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 176, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			Match(NamIdentifier);
			State = 1029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1028;
				nameDetail();
				}
				}
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameInnerContext nameInner() {
			return GetRuleContext<NameInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public NameDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDetailContext nameDetail() {
		NameDetailContext _localctx = new NameDetailContext(Context, State);
		EnterRule(_localctx, 178, RULE_nameDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			Match(SeparatorSlant);
			State = 1034;
			nameInner();
			State = 1035;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdrIdentifier() { return GetToken(fwb17Parser.AdrIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressDetailContext[] streetAddressDetail() {
			return GetRuleContexts<StreetAddressDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressDetailContext streetAddressDetail(int i) {
			return GetRuleContext<StreetAddressDetailContext>(i);
		}
		public StreetAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressContext streetAddress() {
		StreetAddressContext _localctx = new StreetAddressContext(Context, State);
		EnterRule(_localctx, 180, RULE_streetAddress);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			Match(AdrIdentifier);
			State = 1039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1038;
				streetAddressDetail();
				}
				}
				State = 1041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressInnerContext streetAddressInner() {
			return GetRuleContext<StreetAddressInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public StreetAddressDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddressDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddressDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressDetailContext streetAddressDetail() {
		StreetAddressDetailContext _localctx = new StreetAddressDetailContext(Context, State);
		EnterRule(_localctx, 182, RULE_streetAddressDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043;
			Match(SeparatorSlant);
			State = 1044;
			streetAddressInner();
			State = 1045;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LocIdentifier() { return GetToken(fwb17Parser.LocIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceInnerContext placeInner() {
			return GetRuleContext<PlaceInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateProvinceContext stateProvince() {
			return GetRuleContext<StateProvinceContext>(0);
		}
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			Match(LocIdentifier);
			State = 1048;
			Match(SeparatorSlant);
			State = 1049;
			placeInner();
			State = 1051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1050;
				stateProvince();
				}
			}

			State = 1053;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateProvinceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateProvinceInnerContext stateProvinceInner() {
			return GetRuleContext<StateProvinceInnerContext>(0);
		}
		public StateProvinceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateProvince; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateProvince(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateProvinceContext stateProvince() {
		StateProvinceContext _localctx = new StateProvinceContext(Context, State);
		EnterRule(_localctx, 186, RULE_stateProvince);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			Match(SeparatorSlant);
			State = 1056;
			stateProvinceInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodedLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoCountryCodeContext isoCountryCode() {
			return GetRuleContext<IsoCountryCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostCodeContext postCode() {
			return GetRuleContext<PostCodeContext>(0);
		}
		public CodedLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codedLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodedLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodedLocationContext codedLocation() {
		CodedLocationContext _localctx = new CodedLocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_codedLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			Match(SeparatorSlant);
			State = 1059;
			isoCountryCode();
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1060;
				postCode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostCodeInnerContext postCodeInner() {
			return GetRuleContext<PostCodeInnerContext>(0);
		}
		public PostCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostCodeContext postCode() {
		PostCodeContext _localctx = new PostCodeContext(Context, State);
		EnterRule(_localctx, 190, RULE_postCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(SeparatorSlant);
			State = 1064;
			postCodeInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactIdentifierContext contactIdentifier() {
			return GetRuleContext<ContactIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactNumberContext contactNumber() {
			return GetRuleContext<ContactNumberContext>(0);
		}
		public ContactDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactDetailContext contactDetail() {
		ContactDetailContext _localctx = new ContactDetailContext(Context, State);
		EnterRule(_localctx, 192, RULE_contactDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066;
			Match(SeparatorSlant);
			State = 1067;
			contactIdentifier();
			State = 1068;
			Match(SeparatorSlant);
			State = 1069;
			contactNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountDetailAgtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IataCargoAgentNumericCodeContext iataCargoAgentNumericCode() {
			return GetRuleContext<IataCargoAgentNumericCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountNumberContext accountNumber() {
			return GetRuleContext<AccountNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CargoAgentCassOrParticipantIdContext cargoAgentCassOrParticipantId() {
			return GetRuleContext<CargoAgentCassOrParticipantIdContext>(0);
		}
		public AccountDetailAgtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountDetailAgt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountDetailAgt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountDetailAgtContext accountDetailAgt() {
		AccountDetailAgtContext _localctx = new AccountDetailAgtContext(Context, State);
		EnterRule(_localctx, 194, RULE_accountDetailAgt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			Match(SeparatorSlant);
			State = 1073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSri) | (1L << LineIdentifierNom) | (1L << LineIdentifierSii) | (1L << LineIdentifierPpd) | (1L << LineIdentifierCol) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << GoodsDescriptionIdentifier) | (1L << ConsolidationIdentifier) | (1L << DimensionsIdentifier) | (1L << VolumeIdentifier) | (1L << UldNumberIdentifier) | (1L << ShippersLoadAndCountIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << CountryOfOriginOfGoodsIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G) | (1L << SeparatorCrlf))) != 0)) {
				{
				State = 1072;
				accountNumber();
				}
			}

			State = 1075;
			Match(SeparatorSlant);
			State = 1076;
			iataCargoAgentNumericCode();
			State = 1078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1077;
				cargoAgentCassOrParticipantId();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CargoAgentCassOrParticipantIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CargoAgentCassAddressContext cargoAgentCassAddress() {
			return GetRuleContext<CargoAgentCassAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdContext participantId() {
			return GetRuleContext<ParticipantIdContext>(0);
		}
		public CargoAgentCassOrParticipantIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cargoAgentCassOrParticipantId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCargoAgentCassOrParticipantId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CargoAgentCassOrParticipantIdContext cargoAgentCassOrParticipantId() {
		CargoAgentCassOrParticipantIdContext _localctx = new CargoAgentCassOrParticipantIdContext(Context, State);
		EnterRule(_localctx, 196, RULE_cargoAgentCassOrParticipantId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080;
			Match(SeparatorSlant);
			State = 1082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1081;
				cargoAgentCassAddress();
				}
			}

			State = 1085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1084;
				participantId();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdentifierContext participantIdentifier() {
			return GetRuleContext<ParticipantIdentifierContext>(0);
		}
		public ParticipantIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantIdContext participantId() {
		ParticipantIdContext _localctx = new ParticipantIdContext(Context, State);
		EnterRule(_localctx, 198, RULE_participantId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			Match(SeparatorSlant);
			State = 1088;
			participantIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CargoAgentCassAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CargoAgentCassAddressInnerContext cargoAgentCassAddressInner() {
			return GetRuleContext<CargoAgentCassAddressInnerContext>(0);
		}
		public CargoAgentCassAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cargoAgentCassAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCargoAgentCassAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CargoAgentCassAddressContext cargoAgentCassAddress() {
		CargoAgentCassAddressContext _localctx = new CargoAgentCassAddressContext(Context, State);
		EnterRule(_localctx, 200, RULE_cargoAgentCassAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			cargoAgentCassAddressInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountingInformationIdentifierContext accountingInformationIdentifier() {
			return GetRuleContext<AccountingInformationIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountingInformationInnerContext accountingInformationInner() {
			return GetRuleContext<AccountingInformationInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public AccountDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountDetailsContext accountDetails() {
		AccountDetailsContext _localctx = new AccountDetailsContext(Context, State);
		EnterRule(_localctx, 202, RULE_accountDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			Match(SeparatorSlant);
			State = 1093;
			accountingInformationIdentifier();
			State = 1094;
			Match(SeparatorSlant);
			State = 1095;
			accountingInformationInner();
			State = 1096;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceInnerContext placeInner() {
			return GetRuleContext<PlaceInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 204, RULE_place);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(SeparatorSlant);
			State = 1099;
			placeInner();
			State = 1100;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SsrDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialServiceRequestInnerContext specialServiceRequestInner() {
			return GetRuleContext<SpecialServiceRequestInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public SsrDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssrDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSsrDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SsrDetailContext ssrDetail() {
		SsrDetailContext _localctx = new SsrDetailContext(Context, State);
		EnterRule(_localctx, 206, RULE_ssrDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			Match(SeparatorSlant);
			State = 1103;
			specialServiceRequestInner();
			State = 1104;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OtherServiceInformationItemContext otherServiceInformationItem() {
			return GetRuleContext<OtherServiceInformationItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fwb17Parser.SeparatorCrlf, 0); }
		public OsiItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiItemsContext osiItems() {
		OsiItemsContext _localctx = new OsiItemsContext(Context, State);
		EnterRule(_localctx, 208, RULE_osiItems);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			Match(SeparatorSlant);
			State = 1107;
			otherServiceInformationItem();
			State = 1108;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SofrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SenderOfficeFileReferenceContext senderOfficeFileReference() {
			return GetRuleContext<SenderOfficeFileReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SenderParticipantIdentificationContext senderParticipantIdentification() {
			return GetRuleContext<SenderParticipantIdentificationContext>(0);
		}
		public SofrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sofr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSofr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SofrContext sofr() {
		SofrContext _localctx = new SofrContext(Context, State);
		EnterRule(_localctx, 210, RULE_sofr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			Match(SeparatorSlant);
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1111;
				senderOfficeFileReference();
				}
				break;
			}
			State = 1115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1114;
				senderParticipantIdentification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenderOfficeMessageAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficeFunctionDesignatorContext officeFunctionDesignator() {
			return GetRuleContext<OfficeFunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyDesignatorContext companyDesignator() {
			return GetRuleContext<CompanyDesignatorContext>(0);
		}
		public SenderOfficeMessageAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senderOfficeMessageAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenderOfficeMessageAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenderOfficeMessageAddressContext senderOfficeMessageAddress() {
		SenderOfficeMessageAddressContext _localctx = new SenderOfficeMessageAddressContext(Context, State);
		EnterRule(_localctx, 212, RULE_senderOfficeMessageAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			airportCityCode();
			State = 1118;
			officeFunctionDesignator();
			State = 1119;
			companyDesignator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenderOfficeFileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileReferenceContext fileReference() {
			return GetRuleContext<FileReferenceContext>(0);
		}
		public SenderOfficeFileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senderOfficeFileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenderOfficeFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenderOfficeFileReferenceContext senderOfficeFileReference() {
		SenderOfficeFileReferenceContext _localctx = new SenderOfficeFileReferenceContext(Context, State);
		EnterRule(_localctx, 214, RULE_senderOfficeFileReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			fileReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenderParticipantIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdentifierContext participantIdentifier() {
			return GetRuleContext<ParticipantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantCodeContext participantCode() {
			return GetRuleContext<ParticipantCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeContext airportCode() {
			return GetRuleContext<AirportCodeContext>(0);
		}
		public SenderParticipantIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senderParticipantIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenderParticipantIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenderParticipantIdentificationContext senderParticipantIdentification() {
		SenderParticipantIdentificationContext _localctx = new SenderParticipantIdentificationContext(Context, State);
		EnterRule(_localctx, 216, RULE_senderParticipantIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			Match(SeparatorSlant);
			State = 1124;
			participantIdentifier();
			State = 1125;
			Match(SeparatorSlant);
			State = 1126;
			participantCode();
			State = 1127;
			Match(SeparatorSlant);
			State = 1128;
			airportCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supplementary1or2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupplementaryShipmentInformation1Context supplementaryShipmentInformation1() {
			return GetRuleContext<SupplementaryShipmentInformation1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupplementaryShipmentInformation2Context supplementaryShipmentInformation2() {
			return GetRuleContext<SupplementaryShipmentInformation2Context>(0);
		}
		public Supplementary1or2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementary1or2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementary1or2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supplementary1or2Context supplementary1or2() {
		Supplementary1or2Context _localctx = new Supplementary1or2Context(Context, State);
		EnterRule(_localctx, 218, RULE_supplementary1or2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			Match(SeparatorSlant);
			State = 1132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1131;
				supplementaryShipmentInformation1();
				}
				break;
			}
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1134;
				supplementaryShipmentInformation2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplementaryShipmentInformation1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
			return GetRuleContext<InnerSupplementaryShipmentInformationContext>(0);
		}
		public SupplementaryShipmentInformation1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementaryShipmentInformation1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementaryShipmentInformation1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplementaryShipmentInformation1Context supplementaryShipmentInformation1() {
		SupplementaryShipmentInformation1Context _localctx = new SupplementaryShipmentInformation1Context(Context, State);
		EnterRule(_localctx, 220, RULE_supplementaryShipmentInformation1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			innerSupplementaryShipmentInformation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplementaryShipmentInformation2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
			return GetRuleContext<InnerSupplementaryShipmentInformationContext>(0);
		}
		public SupplementaryShipmentInformation2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplementaryShipmentInformation2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplementaryShipmentInformation2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplementaryShipmentInformation2Context supplementaryShipmentInformation2() {
		SupplementaryShipmentInformation2Context _localctx = new SupplementaryShipmentInformation2Context(Context, State);
		EnterRule(_localctx, 222, RULE_supplementaryShipmentInformation2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			Match(SeparatorSlant);
			State = 1140;
			innerSupplementaryShipmentInformation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherParticipantOfficeMessageAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OfficeFunctionDesignatorContext officeFunctionDesignator() {
			return GetRuleContext<OfficeFunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompanyDesignatorContext companyDesignator() {
			return GetRuleContext<CompanyDesignatorContext>(0);
		}
		public OtherParticipantOfficeMessageAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherParticipantOfficeMessageAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherParticipantOfficeMessageAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherParticipantOfficeMessageAddressContext otherParticipantOfficeMessageAddress() {
		OtherParticipantOfficeMessageAddressContext _localctx = new OtherParticipantOfficeMessageAddressContext(Context, State);
		EnterRule(_localctx, 224, RULE_otherParticipantOfficeMessageAddress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			airportCityCode();
			State = 1143;
			officeFunctionDesignator();
			State = 1144;
			companyDesignator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpofrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fwb17Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OtherParticipantOfficeFileReferenceContext otherParticipantOfficeFileReference() {
			return GetRuleContext<OtherParticipantOfficeFileReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherParticipantIdentificationContext otherParticipantIdentification() {
			return GetRuleContext<OtherParticipantIdentificationContext>(0);
		}
		public OpofrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opofr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpofr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpofrContext opofr() {
		OpofrContext _localctx = new OpofrContext(Context, State);
		EnterRule(_localctx, 226, RULE_opofr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			Match(SeparatorSlant);
			State = 1148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1147;
				otherParticipantOfficeFileReference();
				}
				break;
			}
			State = 1151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 1150;
				otherParticipantIdentification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherParticipantOfficeFileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileReferenceContext fileReference() {
			return GetRuleContext<FileReferenceContext>(0);
		}
		public OtherParticipantOfficeFileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherParticipantOfficeFileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherParticipantOfficeFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherParticipantOfficeFileReferenceContext otherParticipantOfficeFileReference() {
		OtherParticipantOfficeFileReferenceContext _localctx = new OtherParticipantOfficeFileReferenceContext(Context, State);
		EnterRule(_localctx, 228, RULE_otherParticipantOfficeFileReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			fileReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherParticipantIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantIdentifierContext participantIdentifier() {
			return GetRuleContext<ParticipantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParticipantCodeContext participantCode() {
			return GetRuleContext<ParticipantCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCityCodeContext airportCityCode() {
			return GetRuleContext<AirportCityCodeContext>(0);
		}
		public OtherParticipantIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherParticipantIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherParticipantIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherParticipantIdentificationContext otherParticipantIdentification() {
		OtherParticipantIdentificationContext _localctx = new OtherParticipantIdentificationContext(Context, State);
		EnterRule(_localctx, 230, RULE_otherParticipantIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(SeparatorSlant);
			State = 1156;
			participantIdentifier();
			State = 1157;
			Match(SeparatorSlant);
			State = 1158;
			participantCode();
			State = 1159;
			Match(SeparatorSlant);
			State = 1160;
			airportCityCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public StandardMessageIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentifierContext standardMessageIdentifier() {
		StandardMessageIdentifierContext _localctx = new StandardMessageIdentifierContext(Context, State);
		EnterRule(_localctx, 232, RULE_standardMessageIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			Match(A);
			State = 1163;
			Match(A);
			State = 1164;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeVersionNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public MessageTypeVersionNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageTypeVersionNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageTypeVersionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeVersionNumberContext messageTypeVersionNumber() {
		MessageTypeVersionNumberContext _localctx = new MessageTypeVersionNumberContext(Context, State);
		EnterRule(_localctx, 234, RULE_messageTypeVersionNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			Match(N);
			State = 1168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1167;
				Match(N);
				}
				break;
			}
			State = 1171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1170;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public LineIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineIdentifierContext lineIdentifier() {
		LineIdentifierContext _localctx = new LineIdentifierContext(Context, State);
		EnterRule(_localctx, 236, RULE_lineIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173;
			Match(A);
			State = 1174;
			Match(A);
			State = 1175;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public ChargeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeCodeContext chargeCode() {
		ChargeCodeContext _localctx = new ChargeCodeContext(Context, State);
		EnterRule(_localctx, 238, RULE_chargeCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			Match(A);
			State = 1178;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirlinePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public AirlinePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airlinePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirlinePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirlinePrefixContext airlinePrefix() {
		AirlinePrefixContext _localctx = new AirlinePrefixContext(Context, State);
		EnterRule(_localctx, 240, RULE_airlinePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(N);
			State = 1181;
			Match(N);
			State = 1182;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public AwbSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbSerialNumberContext awbSerialNumber() {
		AwbSerialNumberContext _localctx = new AwbSerialNumberContext(Context, State);
		EnterRule(_localctx, 242, RULE_awbSerialNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1184;
			Match(N);
			State = 1185;
			Match(N);
			State = 1186;
			Match(N);
			State = 1187;
			Match(N);
			State = 1188;
			Match(N);
			State = 1189;
			Match(N);
			State = 1190;
			Match(N);
			State = 1191;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfOriginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public AirportCodeOfOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfOrigin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfOriginContext airportCodeOfOrigin() {
		AirportCodeOfOriginContext _localctx = new AirportCodeOfOriginContext(Context, State);
		EnterRule(_localctx, 244, RULE_airportCodeOfOrigin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			Match(A);
			State = 1194;
			Match(A);
			State = 1195;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDestitationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public AirportCodeOfDestitationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDestitation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDestitation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDestitationContext airportCodeOfDestitation() {
		AirportCodeOfDestitationContext _localctx = new AirportCodeOfDestitationContext(Context, State);
		EnterRule(_localctx, 246, RULE_airportCodeOfDestitation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1197;
			Match(A);
			State = 1198;
			Match(A);
			State = 1199;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentDescriptionCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public ShipmentDescriptionCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentDescriptionCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentDescriptionCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
		ShipmentDescriptionCodeContext _localctx = new ShipmentDescriptionCodeContext(Context, State);
		EnterRule(_localctx, 248, RULE_shipmentDescriptionCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public VolumeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeCodeContext volumeCode() {
		VolumeCodeContext _localctx = new VolumeCodeContext(Context, State);
		EnterRule(_localctx, 250, RULE_volumeCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			Match(A);
			State = 1204;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public VolumeAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolumeAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeAmountContext volumeAmount() {
		VolumeAmountContext _localctx = new VolumeAmountContext(Context, State);
		EnterRule(_localctx, 252, RULE_volumeAmount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1206;
				Match(N);
				}
				}
				State = 1209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1211;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1212;
					Match(N);
					}
					}
					State = 1215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityIndicatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public DensityIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityIndicator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityIndicatorContext densityIndicator() {
		DensityIndicatorContext _localctx = new DensityIndicatorContext(Context, State);
		EnterRule(_localctx, 254, RULE_densityIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			Match(A);
			State = 1220;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DensityGroupInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public DensityGroupInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_densityGroupInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDensityGroupInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DensityGroupInnerContext densityGroupInner() {
		DensityGroupInnerContext _localctx = new DensityGroupInnerContext(Context, State);
		EnterRule(_localctx, 256, RULE_densityGroupInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(N);
			State = 1224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1223;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaredValueForCarriageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public DeclaredValueForCarriageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaredValueForCarriage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaredValueForCarriage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaredValueForCarriageContext declaredValueForCarriage() {
		DeclaredValueForCarriageContext _localctx = new DeclaredValueForCarriageContext(Context, State);
		EnterRule(_localctx, 258, RULE_declaredValueForCarriage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1226;
				Match(N);
				}
				}
				State = 1229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1231;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1232;
					Match(N);
					}
					}
					State = 1235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaredValueForCustomsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public DeclaredValueForCustomsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaredValueForCustoms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaredValueForCustoms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaredValueForCustomsContext declaredValueForCustoms() {
		DeclaredValueForCustomsContext _localctx = new DeclaredValueForCustomsContext(Context, State);
		EnterRule(_localctx, 260, RULE_declaredValueForCustoms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1239;
				Match(N);
				}
				}
				State = 1242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1244;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1245;
					Match(N);
					}
					}
					State = 1248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountOfInsuranceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public AmountOfInsuranceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountOfInsurance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountOfInsurance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountOfInsuranceContext amountOfInsurance() {
		AmountOfInsuranceContext _localctx = new AmountOfInsuranceContext(Context, State);
		EnterRule(_localctx, 262, RULE_amountOfInsurance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1252;
				Match(N);
				}
				}
				State = 1255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1257;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1258;
					Match(N);
					}
					}
					State = 1261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public NoValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoValueContext noValue() {
		NoValueContext _localctx = new NoValueContext(Context, State);
		EnterRule(_localctx, 264, RULE_noValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			Match(A);
			State = 1266;
			Match(A);
			State = 1267;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ContactIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactIdentifierContext contactIdentifier() {
		ContactIdentifierContext _localctx = new ContactIdentifierContext(Context, State);
		EnterRule(_localctx, 266, RULE_contactIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 1270;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A || _la==N) {
				{
				State = 1273;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ContactNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactNumberContext contactNumber() {
		ContactNumberContext _localctx = new ContactNumberContext(Context, State);
		EnterRule(_localctx, 268, RULE_contactNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1276;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IataCargoAgentNumericCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public IataCargoAgentNumericCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iataCargoAgentNumericCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIataCargoAgentNumericCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IataCargoAgentNumericCodeContext iataCargoAgentNumericCode() {
		IataCargoAgentNumericCodeContext _localctx = new IataCargoAgentNumericCodeContext(Context, State);
		EnterRule(_localctx, 270, RULE_iataCargoAgentNumericCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			Match(N);
			State = 1282;
			Match(N);
			State = 1283;
			Match(N);
			State = 1284;
			Match(N);
			State = 1285;
			Match(N);
			State = 1286;
			Match(N);
			State = 1287;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CargoAgentCassAddressInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CargoAgentCassAddressInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cargoAgentCassAddressInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCargoAgentCassAddressInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CargoAgentCassAddressInnerContext cargoAgentCassAddressInner() {
		CargoAgentCassAddressInnerContext _localctx = new CargoAgentCassAddressInnerContext(Context, State);
		EnterRule(_localctx, 272, RULE_cargoAgentCassAddressInner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			Match(N);
			State = 1290;
			Match(N);
			State = 1291;
			Match(N);
			State = 1292;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountingInformationIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public AccountingInformationIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountingInformationIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountingInformationIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountingInformationIdentifierContext accountingInformationIdentifier() {
		AccountingInformationIdentifierContext _localctx = new AccountingInformationIdentifierContext(Context, State);
		EnterRule(_localctx, 274, RULE_accountingInformationIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			Match(A);
			State = 1295;
			Match(A);
			State = 1296;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public DayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayContext day() {
		DayContext _localctx = new DayContext(Context, State);
		EnterRule(_localctx, 276, RULE_day);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			Match(N);
			State = 1299;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public MonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_month; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthContext month() {
		MonthContext _localctx = new MonthContext(Context, State);
		EnterRule(_localctx, 278, RULE_month);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			Match(A);
			State = 1302;
			Match(A);
			State = 1303;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public YearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_year; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YearContext year() {
		YearContext _localctx = new YearContext(Context, State);
		EnterRule(_localctx, 280, RULE_year);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			Match(N);
			State = 1306;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public AirportCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeContext airportCode() {
		AirportCodeContext _localctx = new AirportCodeContext(Context, State);
		EnterRule(_localctx, 282, RULE_airportCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308;
			Match(A);
			State = 1309;
			Match(A);
			State = 1310;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public FlightNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightNumberContext flightNumber() {
		FlightNumberContext _localctx = new FlightNumberContext(Context, State);
		EnterRule(_localctx, 284, RULE_flightNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312;
			Match(N);
			State = 1313;
			Match(N);
			State = 1314;
			Match(N);
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1315;
				Match(N);
				}
			}

			State = 1319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1318;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarrierCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CarrierCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carrierCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarrierCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarrierCodeContext carrierCode() {
		CarrierCodeContext _localctx = new CarrierCodeContext(Context, State);
		EnterRule(_localctx, 286, RULE_carrierCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1322;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public ServiceCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceCodeContext serviceCode() {
		ServiceCodeContext _localctx = new ServiceCodeContext(Context, State);
		EnterRule(_localctx, 288, RULE_serviceCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1324;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UldTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public UldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UldTypeContext uldType() {
		UldTypeContext _localctx = new UldTypeContext(Context, State);
		EnterRule(_localctx, 290, RULE_uldType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			Match(A);
			State = 1327;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1328;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UldSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public UldSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uldSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUldSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UldSerialNumberContext uldSerialNumber() {
		UldSerialNumberContext _localctx = new UldSerialNumberContext(Context, State);
		EnterRule(_localctx, 292, RULE_uldSerialNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1331;
			Match(N);
			State = 1332;
			Match(N);
			State = 1333;
			Match(N);
			State = 1335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1334;
				Match(N);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UldOwnerCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public UldOwnerCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uldOwnerCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUldOwnerCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UldOwnerCodeContext uldOwnerCode() {
		UldOwnerCodeContext _localctx = new UldOwnerCodeContext(Context, State);
		EnterRule(_localctx, 294, RULE_uldOwnerCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1338;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlacContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public SlacContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slac; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlacContext slac() {
		SlacContext _localctx = new SlacContext(Context, State);
		EnterRule(_localctx, 296, RULE_slac);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			Match(N);
			State = 1342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1341;
				Match(N);
				}
				break;
			}
			State = 1345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1344;
				Match(N);
				}
				break;
			}
			State = 1348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1347;
				Match(N);
				}
				break;
			}
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1350;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HarmonisedCommodityCodeInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public HarmonisedCommodityCodeInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_harmonisedCommodityCodeInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHarmonisedCommodityCodeInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HarmonisedCommodityCodeInnerContext harmonisedCommodityCodeInner() {
		HarmonisedCommodityCodeInnerContext _localctx = new HarmonisedCommodityCodeInnerContext(Context, State);
		EnterRule(_localctx, 298, RULE_harmonisedCommodityCodeInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1353;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasurementUnitCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public MeasurementUnitCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measurementUnitCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasurementUnitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasurementUnitCodeContext measurementUnitCode() {
		MeasurementUnitCodeContext _localctx = new MeasurementUnitCodeContext(Context, State);
		EnterRule(_localctx, 300, RULE_measurementUnitCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 1359;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1362;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public LengthDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthDimensionContext lengthDimension() {
		LengthDimensionContext _localctx = new LengthDimensionContext(Context, State);
		EnterRule(_localctx, 302, RULE_lengthDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			Match(N);
			State = 1367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1366;
				Match(N);
				}
				break;
			}
			State = 1370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1369;
				Match(N);
				}
				break;
			}
			State = 1373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 1372;
				Match(N);
				}
				break;
			}
			State = 1376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1375;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public WidthDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthDimensionContext widthDimension() {
		WidthDimensionContext _localctx = new WidthDimensionContext(Context, State);
		EnterRule(_localctx, 304, RULE_widthDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			Match(N);
			State = 1380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1379;
				Match(N);
				}
				break;
			}
			State = 1383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1382;
				Match(N);
				}
				break;
			}
			State = 1386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 1385;
				Match(N);
				}
				break;
			}
			State = 1389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1388;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeightDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public HeightDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heightDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeightDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeightDimensionContext heightDimension() {
		HeightDimensionContext _localctx = new HeightDimensionContext(Context, State);
		EnterRule(_localctx, 306, RULE_heightDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391;
			Match(N);
			State = 1393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 1392;
				Match(N);
				}
				break;
			}
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1395;
				Match(N);
				}
				break;
			}
			State = 1399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 1398;
				Match(N);
				}
				break;
			}
			State = 1402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1401;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateOrChargeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public RateOrChargeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateOrCharge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateOrCharge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateOrChargeContext rateOrCharge() {
		RateOrChargeContext _localctx = new RateOrChargeContext(Context, State);
		EnterRule(_localctx, 308, RULE_rateOrCharge);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1404;
				Match(N);
				}
				}
				State = 1407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1409;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1410;
					Match(N);
					}
					}
					State = 1413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public DiscountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscountContext discount() {
		DiscountContext _localctx = new DiscountContext(Context, State);
		EnterRule(_localctx, 310, RULE_discount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1417;
				Match(N);
				}
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1422;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1423;
					Match(N);
					}
					}
					State = 1426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommodityItemNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CommodityItemNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commodityItemNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommodityItemNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommodityItemNumberContext commodityItemNumber() {
		CommodityItemNumberContext _localctx = new CommodityItemNumberContext(Context, State);
		EnterRule(_localctx, 312, RULE_commodityItemNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			Match(N);
			State = 1431;
			Match(N);
			State = 1432;
			Match(N);
			State = 1433;
			Match(N);
			State = 1435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1434;
				Match(N);
				}
				break;
			}
			State = 1438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1437;
				Match(N);
				}
				break;
			}
			State = 1441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1440;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UldRateClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N() { return GetToken(fwb17Parser.N, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public UldRateClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uldRateClassType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUldRateClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UldRateClassTypeContext uldRateClassType() {
		UldRateClassTypeContext _localctx = new UldRateClassTypeContext(Context, State);
		EnterRule(_localctx, 314, RULE_uldRateClassType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443;
			Match(N);
			State = 1445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1444;
				Match(A);
				}
				break;
			}
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1447;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateClassCodeBasisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public RateClassCodeBasisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateClassCodeBasis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateClassCodeBasis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateClassCodeBasisContext rateClassCodeBasis() {
		RateClassCodeBasisContext _localctx = new RateClassCodeBasisContext(Context, State);
		EnterRule(_localctx, 316, RULE_rateClassCodeBasis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateClassCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public RateClassCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateClassCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateClassCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateClassCodeContext rateClassCode() {
		RateClassCodeContext _localctx = new RateClassCodeContext(Context, State);
		EnterRule(_localctx, 318, RULE_rateClassCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassRatePercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ClassRatePercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classRatePercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassRatePercentage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassRatePercentageContext classRatePercentage() {
		ClassRatePercentageContext _localctx = new ClassRatePercentageContext(Context, State);
		EnterRule(_localctx, 320, RULE_classRatePercentage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			Match(N);
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1455;
				Match(N);
				}
				break;
			}
			State = 1459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1458;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public WeightCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightCodeContext weightCode() {
		WeightCodeContext _localctx = new WeightCodeContext(Context, State);
		EnterRule(_localctx, 322, RULE_weightCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 324, RULE_weight);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1463;
				Match(N);
				}
				}
				State = 1466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1468;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1469;
					Match(N);
					}
					}
					State = 1472;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateCombinationPointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public RateCombinationPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateCombinationPoint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateCombinationPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateCombinationPointContext rateCombinationPoint() {
		RateCombinationPointContext _localctx = new RateCombinationPointContext(Context, State);
		EnterRule(_localctx, 326, RULE_rateCombinationPoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			Match(A);
			State = 1477;
			Match(A);
			State = 1478;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public NumberOfPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPiecesContext numberOfPieces() {
		NumberOfPiecesContext _localctx = new NumberOfPiecesContext(Context, State);
		EnterRule(_localctx, 328, RULE_numberOfPieces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			Match(N);
			State = 1482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1481;
				Match(N);
				}
				break;
			}
			State = 1485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				{
				State = 1484;
				Match(N);
				}
				break;
			}
			State = 1488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1487;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HwbColumnIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public HwbColumnIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hwbColumnIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHwbColumnIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HwbColumnIdentifierContext hwbColumnIdentifier() {
		HwbColumnIdentifierContext _localctx = new HwbColumnIdentifierContext(Context, State);
		EnterRule(_localctx, 330, RULE_hwbColumnIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HwbRateLineNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public HwbRateLineNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hwbRateLineNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHwbRateLineNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HwbRateLineNumberContext hwbRateLineNumber() {
		HwbRateLineNumberContext _localctx = new HwbRateLineNumberContext(Context, State);
		EnterRule(_localctx, 332, RULE_hwbRateLineNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			Match(N);
			State = 1494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 1493;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcIndWeightValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public PcIndWeightValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pcIndWeightValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPcIndWeightValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcIndWeightValuationContext pcIndWeightValuation() {
		PcIndWeightValuationContext _localctx = new PcIndWeightValuationContext(Context, State);
		EnterRule(_localctx, 334, RULE_pcIndWeightValuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcIndOtherChargesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public PcIndOtherChargesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pcIndOtherCharges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPcIndOtherCharges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcIndOtherChargesContext pcIndOtherCharges() {
		PcIndOtherChargesContext _localctx = new PcIndOtherChargesContext(Context, State);
		EnterRule(_localctx, 336, RULE_pcIndOtherCharges);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherChargeCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public OtherChargeCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherChargeCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherChargeCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherChargeCodeContext otherChargeCode() {
		OtherChargeCodeContext _localctx = new OtherChargeCodeContext(Context, State);
		EnterRule(_localctx, 338, RULE_otherChargeCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			Match(A);
			State = 1501;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntitlementCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fwb17Parser.A, 0); }
		public EntitlementCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entitlementCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntitlementCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntitlementCodeContext entitlementCode() {
		EntitlementCodeContext _localctx = new EntitlementCodeContext(Context, State);
		EnterRule(_localctx, 340, RULE_entitlementCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public ChargeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeIdentifierContext chargeIdentifier() {
		ChargeIdentifierContext _localctx = new ChargeIdentifierContext(Context, State);
		EnterRule(_localctx, 342, RULE_chargeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505;
			Match(A);
			State = 1506;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomsOriginCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CustomsOriginCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customsOriginCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomsOriginCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomsOriginCodeContext customsOriginCode() {
		CustomsOriginCodeContext _localctx = new CustomsOriginCodeContext(Context, State);
		EnterRule(_localctx, 344, RULE_customsOriginCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A || _la==N) {
				{
				State = 1509;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CassSettlementFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CassSettlementFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cassSettlementFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCassSettlementFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CassSettlementFactorContext cassSettlementFactor() {
		CassSettlementFactorContext _localctx = new CassSettlementFactorContext(Context, State);
		EnterRule(_localctx, 346, RULE_cassSettlementFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1512;
				Match(N);
				}
				}
				State = 1515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1517;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1518;
					Match(N);
					}
					}
					State = 1521;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsoCurrencyCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public IsoCurrencyCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isoCurrencyCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsoCurrencyCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsoCurrencyCodeContext isoCurrencyCode() {
		IsoCurrencyCodeContext _localctx = new IsoCurrencyCodeContext(Context, State);
		EnterRule(_localctx, 348, RULE_isoCurrencyCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525;
			Match(A);
			State = 1526;
			Match(A);
			State = 1527;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RateOfExchangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public RateOfExchangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rateOfExchange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRateOfExchange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RateOfExchangeContext rateOfExchange() {
		RateOfExchangeContext _localctx = new RateOfExchangeContext(Context, State);
		EnterRule(_localctx, 350, RULE_rateOfExchange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1529;
				Match(N);
				}
				}
				State = 1532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1534;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1535;
					Match(N);
					}
					}
					State = 1538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ChargeAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeAmountContext chargeAmount() {
		ChargeAmountContext _localctx = new ChargeAmountContext(Context, State);
		EnterRule(_localctx, 352, RULE_chargeAmount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1542;
				Match(N);
				}
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 1553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 1547;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1548;
					Match(N);
					}
					}
					State = 1551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CassIndicatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public CassIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cassIndicator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCassIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CassIndicatorContext cassIndicator() {
		CassIndicatorContext _localctx = new CassIndicatorContext(Context, State);
		EnterRule(_localctx, 354, RULE_cassIndicator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			Match(A);
			State = 1557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1556;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public SpecialHandlingCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingCodeContext specialHandlingCode() {
		SpecialHandlingCodeContext _localctx = new SpecialHandlingCodeContext(Context, State);
		EnterRule(_localctx, 356, RULE_specialHandlingCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			Match(A);
			State = 1560;
			Match(A);
			State = 1561;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCityCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public AirportCityCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCityCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCityCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCityCodeContext airportCityCode() {
		AirportCityCodeContext _localctx = new AirportCityCodeContext(Context, State);
		EnterRule(_localctx, 358, RULE_airportCityCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563;
			Match(A);
			State = 1564;
			Match(A);
			State = 1565;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OfficeFunctionDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public OfficeFunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_officeFunctionDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOfficeFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OfficeFunctionDesignatorContext officeFunctionDesignator() {
		OfficeFunctionDesignatorContext _localctx = new OfficeFunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 360, RULE_officeFunctionDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1568;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanyDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public CompanyDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companyDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanyDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanyDesignatorContext companyDesignator() {
		CompanyDesignatorContext _localctx = new CompanyDesignatorContext(Context, State);
		EnterRule(_localctx, 362, RULE_companyDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1571;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ParticipantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantIdentifierContext participantIdentifier() {
		ParticipantIdentifierContext _localctx = new ParticipantIdentifierContext(Context, State);
		EnterRule(_localctx, 364, RULE_participantIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1574;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A || _la==N) {
				{
				State = 1577;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParticipantCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fwb17Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fwb17Parser.N, i);
		}
		public ParticipantCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_participantCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParticipantCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParticipantCodeContext participantCode() {
		ParticipantCodeContext _localctx = new ParticipantCodeContext(Context, State);
		EnterRule(_localctx, 366, RULE_participantCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1580;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 1583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsoCountryCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public IsoCountryCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isoCountryCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsoCountryCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsoCountryCodeContext isoCountryCode() {
		IsoCountryCodeContext _localctx = new IsoCountryCodeContext(Context, State);
		EnterRule(_localctx, 368, RULE_isoCountryCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585;
			Match(A);
			State = 1586;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InformationIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public InformationIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_informationIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInformationIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InformationIdentifierContext informationIdentifier() {
		InformationIdentifierContext _localctx = new InformationIdentifierContext(Context, State);
		EnterRule(_localctx, 370, RULE_informationIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			Match(A);
			State = 1589;
			Match(A);
			State = 1590;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustSecurityAndRegulatCtrlInfoIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fwb17Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fwb17Parser.A, i);
		}
		public CustSecurityAndRegulatCtrlInfoIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_custSecurityAndRegulatCtrlInfoId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustSecurityAndRegulatCtrlInfoId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustSecurityAndRegulatCtrlInfoIdContext custSecurityAndRegulatCtrlInfoId() {
		CustSecurityAndRegulatCtrlInfoIdContext _localctx = new CustSecurityAndRegulatCtrlInfoIdContext(Context, State);
		EnterRule(_localctx, 372, RULE_custSecurityAndRegulatCtrlInfoId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			Match(A);
			State = 1594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 1593;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplemCustSecurityAndRegulatCtrlInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public SupplemCustSecurityAndRegulatCtrlInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplemCustSecurityAndRegulatCtrlInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplemCustSecurityAndRegulatCtrlInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplemCustSecurityAndRegulatCtrlInfoContext supplemCustSecurityAndRegulatCtrlInfo() {
		SupplemCustSecurityAndRegulatCtrlInfoContext _localctx = new SupplemCustSecurityAndRegulatCtrlInfoContext(Context, State);
		EnterRule(_localctx, 374, RULE_supplemCustSecurityAndRegulatCtrlInfo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1596;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1599;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public FileReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileReferenceContext fileReference() {
		FileReferenceContext _localctx = new FileReferenceContext(Context, State);
		EnterRule(_localctx, 376, RULE_fileReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1601;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public NameInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameInnerContext nameInner() {
		NameInnerContext _localctx = new NameInnerContext(Context, State);
		EnterRule(_localctx, 378, RULE_nameInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1606;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1609;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public PlaceInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceInnerContext placeInner() {
		PlaceInnerContext _localctx = new PlaceInnerContext(Context, State);
		EnterRule(_localctx, 380, RULE_placeInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1611;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public ReferenceNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceNumberContext referenceNumber() {
		ReferenceNumberContext _localctx = new ReferenceNumberContext(Context, State);
		EnterRule(_localctx, 382, RULE_referenceNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1616;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerSupplementaryShipmentInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public InnerSupplementaryShipmentInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerSupplementaryShipmentInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerSupplementaryShipmentInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerSupplementaryShipmentInformationContext innerSupplementaryShipmentInformation() {
		InnerSupplementaryShipmentInformationContext _localctx = new InnerSupplementaryShipmentInformationContext(Context, State);
		EnterRule(_localctx, 384, RULE_innerSupplementaryShipmentInformation);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1621;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 386, RULE_signature);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1626;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherServiceInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public OtherServiceInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherServiceInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherServiceInformationItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherServiceInformationItemContext otherServiceInformationItem() {
		OtherServiceInformationItemContext _localctx = new OtherServiceInformationItemContext(Context, State);
		EnterRule(_localctx, 388, RULE_otherServiceInformationItem);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1631;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialServiceRequestInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public SpecialServiceRequestInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialServiceRequestInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialServiceRequestInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialServiceRequestInnerContext specialServiceRequestInner() {
		SpecialServiceRequestInnerContext _localctx = new SpecialServiceRequestInnerContext(Context, State);
		EnterRule(_localctx, 390, RULE_specialServiceRequestInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1636;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountingInformationInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public AccountingInformationInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountingInformationInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountingInformationInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountingInformationInnerContext accountingInformationInner() {
		AccountingInformationInnerContext _localctx = new AccountingInformationInnerContext(Context, State);
		EnterRule(_localctx, 392, RULE_accountingInformationInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1641;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public AccountNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccountNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountNumberContext accountNumber() {
		AccountNumberContext _localctx = new AccountNumberContext(Context, State);
		EnterRule(_localctx, 394, RULE_accountNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1646;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public StreetAddressInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddressInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddressInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressInnerContext streetAddressInner() {
		StreetAddressInnerContext _localctx = new StreetAddressInnerContext(Context, State);
		EnterRule(_localctx, 396, RULE_streetAddressInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1651;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1654;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateProvinceInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public StateProvinceInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateProvinceInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateProvinceInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateProvinceInnerContext stateProvinceInner() {
		StateProvinceInnerContext _localctx = new StateProvinceInnerContext(Context, State);
		EnterRule(_localctx, 398, RULE_stateProvinceInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1656;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1659;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostCodeInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public PostCodeInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postCodeInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostCodeInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostCodeInnerContext postCodeInner() {
		PostCodeInnerContext _localctx = new PostCodeInnerContext(Context, State);
		EnterRule(_localctx, 400, RULE_postCodeInner);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1661;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatureAndQuantityOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fwb17Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fwb17Parser.SeparatorSlant, i);
		}
		public NatureAndQuantityOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natureAndQuantityOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifwb17Visitor<TResult> typedVisitor = visitor as Ifwb17Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatureAndQuantityOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatureAndQuantityOfGoodsContext natureAndQuantityOfGoods() {
		NatureAndQuantityOfGoodsContext _localctx = new NatureAndQuantityOfGoodsContext(Context, State);
		EnterRule(_localctx, 402, RULE_natureAndQuantityOfGoods);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1667;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1666;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==SeparatorSlant) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,1672,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,1,0,1,0,1,0,3,0,408,8,0,1,0,1,0,1,0,1,0,3,0,414,8,0,1,0,3,
		0,417,8,0,1,0,3,0,420,8,0,1,0,3,0,423,8,0,1,0,1,0,1,0,3,0,428,8,0,1,0,
		3,0,431,8,0,1,0,3,0,434,8,0,1,0,3,0,437,8,0,1,0,1,0,3,0,441,8,0,1,0,3,
		0,444,8,0,1,0,1,0,3,0,448,8,0,1,0,3,0,451,8,0,1,0,3,0,454,8,0,1,0,3,0,
		457,8,0,1,0,3,0,460,8,0,1,0,3,0,463,8,0,1,0,3,0,466,8,0,1,0,5,0,469,8,
		0,10,0,12,0,472,9,0,1,0,3,0,475,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,3,2,486,8,2,1,2,3,2,489,8,2,1,2,1,2,1,3,1,3,4,3,495,8,3,11,3,12,3,496,
		1,3,1,3,1,4,1,4,1,4,5,4,504,8,4,10,4,12,4,507,9,4,1,4,1,4,1,5,1,5,3,5,
		513,8,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,521,8,5,10,5,12,5,524,9,5,1,5,1,5,
		1,6,1,6,3,6,530,8,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,538,8,6,10,6,12,6,541,
		9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,4,8,553,8,8,11,8,12,8,554,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,564,8,9,10,9,12,9,567,9,9,1,9,1,9,1,10,
		1,10,4,10,573,8,10,11,10,12,10,574,1,11,1,11,1,11,1,11,1,11,3,11,582,8,
		11,1,11,1,11,3,11,586,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,4,12,598,8,12,11,12,12,12,599,1,13,1,13,4,13,604,8,13,11,13,12,13,
		605,1,14,1,14,5,14,610,8,14,10,14,12,14,613,9,14,1,14,1,14,5,14,617,8,
		14,10,14,12,14,620,9,14,1,14,1,14,1,15,1,15,5,15,626,8,15,10,15,12,15,
		629,9,15,1,15,1,15,5,15,633,8,15,10,15,12,15,636,9,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,648,8,17,1,17,1,17,1,18,1,18,4,18,
		654,8,18,11,18,12,18,655,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,3,20,673,8,20,1,20,3,20,676,8,20,1,20,1,
		20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,688,8,22,1,22,3,22,691,
		8,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,699,8,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,25,1,25,4,25,710,8,25,11,25,12,25,711,1,25,1,25,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,3,27,726,8,27,1,27,3,27,729,
		8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,739,8,28,1,28,3,28,742,
		8,28,1,28,1,28,1,29,1,29,4,29,748,8,29,11,29,12,29,749,1,30,1,30,3,30,
		754,8,30,1,30,3,30,757,8,30,1,31,1,31,1,31,1,32,3,32,763,8,32,1,32,3,32,
		766,8,32,1,32,3,32,769,8,32,1,32,3,32,772,8,32,1,32,3,32,775,8,32,1,32,
		3,32,778,8,32,1,32,3,32,781,8,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,3,33,794,8,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,802,
		8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,
		816,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,826,8,39,1,40,1,
		40,1,40,1,40,3,40,832,8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,3,43,
		842,8,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
		46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,
		50,1,51,1,51,1,51,1,52,1,52,3,52,876,8,52,1,53,1,53,1,53,1,53,1,53,1,53,
		1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
		1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,
		1,60,1,60,1,61,1,61,3,61,916,8,61,1,61,1,61,1,62,1,62,1,62,3,62,923,8,
		62,1,63,1,63,1,63,1,64,1,64,3,64,930,8,64,1,65,1,65,3,65,934,8,65,1,66,
		1,66,3,66,938,8,66,1,67,1,67,4,67,942,8,67,11,67,12,67,943,1,67,1,67,1,
		68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,
		71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,970,8,72,1,72,3,72,973,8,72,
		1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,
		1,79,1,80,1,80,3,80,992,8,80,1,80,3,80,995,8,80,1,81,1,81,1,82,1,82,1,
		82,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,86,1,86,3,86,1011,8,86,1,86,1,
		86,3,86,1015,8,86,1,86,1,86,3,86,1019,8,86,1,86,1,86,1,86,1,86,1,87,1,
		87,1,87,1,88,1,88,4,88,1030,8,88,11,88,12,88,1031,1,89,1,89,1,89,1,89,
		1,90,1,90,4,90,1040,8,90,11,90,12,90,1041,1,91,1,91,1,91,1,91,1,92,1,92,
		1,92,1,92,3,92,1052,8,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,3,94,
		1062,8,94,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,3,97,1074,
		8,97,1,97,1,97,1,97,3,97,1079,8,97,1,98,1,98,3,98,1083,8,98,1,98,3,98,
		1086,8,98,1,99,1,99,1,99,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,
		1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,
		1,105,1,105,3,105,1113,8,105,1,105,3,105,1116,8,105,1,106,1,106,1,106,
		1,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,109,1,109,
		3,109,1133,8,109,1,109,3,109,1136,8,109,1,110,1,110,1,111,1,111,1,111,
		1,112,1,112,1,112,1,112,1,113,1,113,3,113,1149,8,113,1,113,3,113,1152,
		8,113,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,116,1,116,
		1,116,1,116,1,117,1,117,3,117,1169,8,117,1,117,3,117,1172,8,117,1,118,
		1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,
		1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,
		1,123,1,123,1,123,1,124,1,124,1,125,1,125,1,125,1,126,4,126,1208,8,126,
		11,126,12,126,1209,1,126,1,126,4,126,1214,8,126,11,126,12,126,1215,3,126,
		1218,8,126,1,127,1,127,1,127,1,128,1,128,3,128,1225,8,128,1,129,4,129,
		1228,8,129,11,129,12,129,1229,1,129,1,129,4,129,1234,8,129,11,129,12,129,
		1235,3,129,1238,8,129,1,130,4,130,1241,8,130,11,130,12,130,1242,1,130,
		1,130,4,130,1247,8,130,11,130,12,130,1248,3,130,1251,8,130,1,131,4,131,
		1254,8,131,11,131,12,131,1255,1,131,1,131,4,131,1260,8,131,11,131,12,131,
		1261,3,131,1264,8,131,1,132,1,132,1,132,1,132,1,133,1,133,3,133,1272,8,
		133,1,133,3,133,1275,8,133,1,134,4,134,1278,8,134,11,134,12,134,1279,1,
		135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,
		1,136,1,137,1,137,1,137,1,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,
		1,140,1,140,1,140,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,3,142,
		1317,8,142,1,142,3,142,1320,8,142,1,143,1,143,1,143,1,144,1,144,1,145,
		1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,3,146,1336,8,146,1,147,
		1,147,1,147,1,148,1,148,3,148,1343,8,148,1,148,3,148,1346,8,148,1,148,
		3,148,1349,8,148,1,148,3,148,1352,8,148,1,149,4,149,1355,8,149,11,149,
		12,149,1356,1,150,1,150,3,150,1361,8,150,1,150,3,150,1364,8,150,1,151,
		1,151,3,151,1368,8,151,1,151,3,151,1371,8,151,1,151,3,151,1374,8,151,1,
		151,3,151,1377,8,151,1,152,1,152,3,152,1381,8,152,1,152,3,152,1384,8,152,
		1,152,3,152,1387,8,152,1,152,3,152,1390,8,152,1,153,1,153,3,153,1394,8,
		153,1,153,3,153,1397,8,153,1,153,3,153,1400,8,153,1,153,3,153,1403,8,153,
		1,154,4,154,1406,8,154,11,154,12,154,1407,1,154,1,154,4,154,1412,8,154,
		11,154,12,154,1413,3,154,1416,8,154,1,155,4,155,1419,8,155,11,155,12,155,
		1420,1,155,1,155,4,155,1425,8,155,11,155,12,155,1426,3,155,1429,8,155,
		1,156,1,156,1,156,1,156,1,156,3,156,1436,8,156,1,156,3,156,1439,8,156,
		1,156,3,156,1442,8,156,1,157,1,157,3,157,1446,8,157,1,157,3,157,1449,8,
		157,1,158,1,158,1,159,1,159,1,160,1,160,3,160,1457,8,160,1,160,3,160,1460,
		8,160,1,161,1,161,1,162,4,162,1465,8,162,11,162,12,162,1466,1,162,1,162,
		4,162,1471,8,162,11,162,12,162,1472,3,162,1475,8,162,1,163,1,163,1,163,
		1,163,1,164,1,164,3,164,1483,8,164,1,164,3,164,1486,8,164,1,164,3,164,
		1489,8,164,1,165,1,165,1,166,1,166,3,166,1495,8,166,1,167,1,167,1,168,
		1,168,1,169,1,169,1,169,1,170,1,170,1,171,1,171,1,171,1,172,1,172,3,172,
		1511,8,172,1,173,4,173,1514,8,173,11,173,12,173,1515,1,173,1,173,4,173,
		1520,8,173,11,173,12,173,1521,3,173,1524,8,173,1,174,1,174,1,174,1,174,
		1,175,4,175,1531,8,175,11,175,12,175,1532,1,175,1,175,4,175,1537,8,175,
		11,175,12,175,1538,3,175,1541,8,175,1,176,4,176,1544,8,176,11,176,12,176,
		1545,1,176,1,176,4,176,1550,8,176,11,176,12,176,1551,3,176,1554,8,176,
		1,177,1,177,3,177,1558,8,177,1,178,1,178,1,178,1,178,1,179,1,179,1,179,
		1,179,1,180,1,180,1,180,1,181,1,181,1,181,1,182,1,182,3,182,1576,8,182,
		1,182,3,182,1579,8,182,1,183,4,183,1582,8,183,11,183,12,183,1583,1,184,
		1,184,1,184,1,185,1,185,1,185,1,185,1,186,1,186,3,186,1595,8,186,1,187,
		4,187,1598,8,187,11,187,12,187,1599,1,188,4,188,1603,8,188,11,188,12,188,
		1604,1,189,4,189,1608,8,189,11,189,12,189,1609,1,190,4,190,1613,8,190,
		11,190,12,190,1614,1,191,4,191,1618,8,191,11,191,12,191,1619,1,192,4,192,
		1623,8,192,11,192,12,192,1624,1,193,4,193,1628,8,193,11,193,12,193,1629,
		1,194,4,194,1633,8,194,11,194,12,194,1634,1,195,4,195,1638,8,195,11,195,
		12,195,1639,1,196,4,196,1643,8,196,11,196,12,196,1644,1,197,4,197,1648,
		8,197,11,197,12,197,1649,1,198,4,198,1653,8,198,11,198,12,198,1654,1,199,
		4,199,1658,8,199,11,199,12,199,1659,1,200,4,200,1663,8,200,11,200,12,200,
		1664,1,201,4,201,1668,8,201,11,201,12,201,1669,1,201,0,0,202,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
		248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
		284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
		320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
		356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
		392,394,396,398,400,402,0,3,1,0,1,2,1,0,21,22,1,0,19,19,1662,0,404,1,0,
		0,0,2,476,1,0,0,0,4,481,1,0,0,0,6,492,1,0,0,0,8,500,1,0,0,0,10,510,1,0,
		0,0,12,527,1,0,0,0,14,544,1,0,0,0,16,550,1,0,0,0,18,556,1,0,0,0,20,570,
		1,0,0,0,22,576,1,0,0,0,24,595,1,0,0,0,26,601,1,0,0,0,28,607,1,0,0,0,30,
		623,1,0,0,0,32,639,1,0,0,0,34,644,1,0,0,0,36,651,1,0,0,0,38,657,1,0,0,
		0,40,669,1,0,0,0,42,679,1,0,0,0,44,684,1,0,0,0,46,694,1,0,0,0,48,702,1,
		0,0,0,50,707,1,0,0,0,52,715,1,0,0,0,54,722,1,0,0,0,56,732,1,0,0,0,58,745,
		1,0,0,0,60,751,1,0,0,0,62,758,1,0,0,0,64,762,1,0,0,0,66,793,1,0,0,0,68,
		797,1,0,0,0,70,803,1,0,0,0,72,806,1,0,0,0,74,810,1,0,0,0,76,817,1,0,0,
		0,78,821,1,0,0,0,80,827,1,0,0,0,82,833,1,0,0,0,84,836,1,0,0,0,86,839,1,
		0,0,0,88,846,1,0,0,0,90,850,1,0,0,0,92,855,1,0,0,0,94,858,1,0,0,0,96,861,
		1,0,0,0,98,864,1,0,0,0,100,867,1,0,0,0,102,870,1,0,0,0,104,873,1,0,0,0,
		106,877,1,0,0,0,108,885,1,0,0,0,110,889,1,0,0,0,112,892,1,0,0,0,114,898,
		1,0,0,0,116,901,1,0,0,0,118,904,1,0,0,0,120,907,1,0,0,0,122,913,1,0,0,
		0,124,919,1,0,0,0,126,924,1,0,0,0,128,929,1,0,0,0,130,933,1,0,0,0,132,
		937,1,0,0,0,134,939,1,0,0,0,136,947,1,0,0,0,138,951,1,0,0,0,140,955,1,
		0,0,0,142,959,1,0,0,0,144,963,1,0,0,0,146,974,1,0,0,0,148,977,1,0,0,0,
		150,979,1,0,0,0,152,981,1,0,0,0,154,983,1,0,0,0,156,985,1,0,0,0,158,987,
		1,0,0,0,160,989,1,0,0,0,162,996,1,0,0,0,164,998,1,0,0,0,166,1001,1,0,0,
		0,168,1003,1,0,0,0,170,1006,1,0,0,0,172,1008,1,0,0,0,174,1024,1,0,0,0,
		176,1027,1,0,0,0,178,1033,1,0,0,0,180,1037,1,0,0,0,182,1043,1,0,0,0,184,
		1047,1,0,0,0,186,1055,1,0,0,0,188,1058,1,0,0,0,190,1063,1,0,0,0,192,1066,
		1,0,0,0,194,1071,1,0,0,0,196,1080,1,0,0,0,198,1087,1,0,0,0,200,1090,1,
		0,0,0,202,1092,1,0,0,0,204,1098,1,0,0,0,206,1102,1,0,0,0,208,1106,1,0,
		0,0,210,1110,1,0,0,0,212,1117,1,0,0,0,214,1121,1,0,0,0,216,1123,1,0,0,
		0,218,1130,1,0,0,0,220,1137,1,0,0,0,222,1139,1,0,0,0,224,1142,1,0,0,0,
		226,1146,1,0,0,0,228,1153,1,0,0,0,230,1155,1,0,0,0,232,1162,1,0,0,0,234,
		1166,1,0,0,0,236,1173,1,0,0,0,238,1177,1,0,0,0,240,1180,1,0,0,0,242,1184,
		1,0,0,0,244,1193,1,0,0,0,246,1197,1,0,0,0,248,1201,1,0,0,0,250,1203,1,
		0,0,0,252,1207,1,0,0,0,254,1219,1,0,0,0,256,1222,1,0,0,0,258,1227,1,0,
		0,0,260,1240,1,0,0,0,262,1253,1,0,0,0,264,1265,1,0,0,0,266,1269,1,0,0,
		0,268,1277,1,0,0,0,270,1281,1,0,0,0,272,1289,1,0,0,0,274,1294,1,0,0,0,
		276,1298,1,0,0,0,278,1301,1,0,0,0,280,1305,1,0,0,0,282,1308,1,0,0,0,284,
		1312,1,0,0,0,286,1321,1,0,0,0,288,1324,1,0,0,0,290,1326,1,0,0,0,292,1330,
		1,0,0,0,294,1337,1,0,0,0,296,1340,1,0,0,0,298,1354,1,0,0,0,300,1358,1,
		0,0,0,302,1365,1,0,0,0,304,1378,1,0,0,0,306,1391,1,0,0,0,308,1405,1,0,
		0,0,310,1418,1,0,0,0,312,1430,1,0,0,0,314,1443,1,0,0,0,316,1450,1,0,0,
		0,318,1452,1,0,0,0,320,1454,1,0,0,0,322,1461,1,0,0,0,324,1464,1,0,0,0,
		326,1476,1,0,0,0,328,1480,1,0,0,0,330,1490,1,0,0,0,332,1492,1,0,0,0,334,
		1496,1,0,0,0,336,1498,1,0,0,0,338,1500,1,0,0,0,340,1503,1,0,0,0,342,1505,
		1,0,0,0,344,1508,1,0,0,0,346,1513,1,0,0,0,348,1525,1,0,0,0,350,1530,1,
		0,0,0,352,1543,1,0,0,0,354,1555,1,0,0,0,356,1559,1,0,0,0,358,1563,1,0,
		0,0,360,1567,1,0,0,0,362,1570,1,0,0,0,364,1573,1,0,0,0,366,1581,1,0,0,
		0,368,1585,1,0,0,0,370,1588,1,0,0,0,372,1592,1,0,0,0,374,1597,1,0,0,0,
		376,1602,1,0,0,0,378,1607,1,0,0,0,380,1612,1,0,0,0,382,1617,1,0,0,0,384,
		1622,1,0,0,0,386,1627,1,0,0,0,388,1632,1,0,0,0,390,1637,1,0,0,0,392,1642,
		1,0,0,0,394,1647,1,0,0,0,396,1652,1,0,0,0,398,1657,1,0,0,0,400,1662,1,
		0,0,0,402,1667,1,0,0,0,404,405,3,2,1,0,405,407,3,4,2,0,406,408,3,6,3,0,
		407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,3,8,4,0,410,411,
		3,10,5,0,411,413,3,12,6,0,412,414,3,14,7,0,413,412,1,0,0,0,413,414,1,0,
		0,0,414,416,1,0,0,0,415,417,3,16,8,0,416,415,1,0,0,0,416,417,1,0,0,0,417,
		419,1,0,0,0,418,420,3,18,9,0,419,418,1,0,0,0,419,420,1,0,0,0,420,422,1,
		0,0,0,421,423,3,20,10,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,
		0,424,425,3,22,11,0,425,427,3,24,12,0,426,428,3,26,13,0,427,426,1,0,0,
		0,427,428,1,0,0,0,428,430,1,0,0,0,429,431,3,28,14,0,430,429,1,0,0,0,430,
		431,1,0,0,0,431,433,1,0,0,0,432,434,3,30,15,0,433,432,1,0,0,0,433,434,
		1,0,0,0,434,436,1,0,0,0,435,437,3,32,16,0,436,435,1,0,0,0,436,437,1,0,
		0,0,437,438,1,0,0,0,438,440,3,34,17,0,439,441,3,36,18,0,440,439,1,0,0,
		0,440,441,1,0,0,0,441,443,1,0,0,0,442,444,3,38,19,0,443,442,1,0,0,0,443,
		444,1,0,0,0,444,445,1,0,0,0,445,447,3,40,20,0,446,448,3,42,21,0,447,446,
		1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,451,3,44,22,0,450,449,1,0,
		0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,454,3,46,23,0,453,452,1,0,0,0,
		453,454,1,0,0,0,454,456,1,0,0,0,455,457,3,48,24,0,456,455,1,0,0,0,456,
		457,1,0,0,0,457,459,1,0,0,0,458,460,3,50,25,0,459,458,1,0,0,0,459,460,
		1,0,0,0,460,462,1,0,0,0,461,463,3,52,26,0,462,461,1,0,0,0,462,463,1,0,
		0,0,463,465,1,0,0,0,464,466,3,54,27,0,465,464,1,0,0,0,465,466,1,0,0,0,
		466,470,1,0,0,0,467,469,3,56,28,0,468,467,1,0,0,0,469,472,1,0,0,0,470,
		468,1,0,0,0,470,471,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,473,475,3,
		58,29,0,474,473,1,0,0,0,474,475,1,0,0,0,475,1,1,0,0,0,476,477,3,232,116,
		0,477,478,5,19,0,0,478,479,3,234,117,0,479,480,5,24,0,0,480,3,1,0,0,0,
		481,482,3,108,54,0,482,483,3,110,55,0,483,485,3,112,56,0,484,486,3,114,
		57,0,485,484,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,489,3,116,58,
		0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,5,24,0,0,491,
		5,1,0,0,0,492,494,3,236,118,0,493,495,3,120,60,0,494,493,1,0,0,0,495,496,
		1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,5,24,0,
		0,499,7,1,0,0,0,500,501,3,236,118,0,501,505,3,122,61,0,502,504,3,124,62,
		0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
		508,1,0,0,0,507,505,1,0,0,0,508,509,5,24,0,0,509,9,1,0,0,0,510,512,3,236,
		118,0,511,513,3,174,87,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,
		0,514,515,5,24,0,0,515,516,3,176,88,0,516,517,3,180,90,0,517,518,3,184,
		92,0,518,522,3,188,94,0,519,521,3,192,96,0,520,519,1,0,0,0,521,524,1,0,
		0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,
		526,5,24,0,0,526,11,1,0,0,0,527,529,3,236,118,0,528,530,3,174,87,0,529,
		528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,24,0,0,532,533,3,
		176,88,0,533,534,3,180,90,0,534,535,3,184,92,0,535,539,3,188,94,0,536,
		538,3,192,96,0,537,536,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,
		1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,543,5,24,0,0,543,13,1,0,0,
		0,544,545,3,236,118,0,545,546,3,194,97,0,546,547,5,24,0,0,547,548,3,178,
		89,0,548,549,3,204,102,0,549,15,1,0,0,0,550,552,3,236,118,0,551,553,3,
		206,103,0,552,551,1,0,0,0,553,554,1,0,0,0,554,552,1,0,0,0,554,555,1,0,
		0,0,555,17,1,0,0,0,556,557,3,236,118,0,557,558,5,24,0,0,558,559,3,176,
		88,0,559,560,3,180,90,0,560,561,3,184,92,0,561,565,3,188,94,0,562,564,
		3,192,96,0,563,562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,
		0,0,566,568,1,0,0,0,567,565,1,0,0,0,568,569,5,24,0,0,569,19,1,0,0,0,570,
		572,3,236,118,0,571,573,3,202,101,0,572,571,1,0,0,0,573,574,1,0,0,0,574,
		572,1,0,0,0,574,575,1,0,0,0,575,21,1,0,0,0,576,577,3,236,118,0,577,578,
		5,19,0,0,578,579,3,348,174,0,579,581,5,19,0,0,580,582,3,238,119,0,581,
		580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,585,5,19,0,0,584,586,3,
		126,63,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,5,19,
		0,0,588,589,3,128,64,0,589,590,5,19,0,0,590,591,3,130,65,0,591,592,5,19,
		0,0,592,593,3,132,66,0,593,594,5,24,0,0,594,23,1,0,0,0,595,597,3,236,118,
		0,596,598,3,60,30,0,597,596,1,0,0,0,598,599,1,0,0,0,599,597,1,0,0,0,599,
		600,1,0,0,0,600,25,1,0,0,0,601,603,3,236,118,0,602,604,3,134,67,0,603,
		602,1,0,0,0,604,605,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,27,1,0,
		0,0,607,611,5,6,0,0,608,610,3,140,70,0,609,608,1,0,0,0,610,613,1,0,0,0,
		611,609,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,611,1,0,0,0,614,618,
		5,24,0,0,615,617,3,142,71,0,616,615,1,0,0,0,617,620,1,0,0,0,618,616,1,
		0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,618,1,0,0,0,621,622,5,24,0,0,
		622,29,1,0,0,0,623,627,5,7,0,0,624,626,3,140,70,0,625,624,1,0,0,0,626,
		629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,627,1,
		0,0,0,630,634,5,24,0,0,631,633,3,142,71,0,632,631,1,0,0,0,633,636,1,0,
		0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,634,1,0,0,0,637,
		638,5,24,0,0,638,31,1,0,0,0,639,640,3,236,118,0,640,641,5,19,0,0,641,642,
		3,386,193,0,642,643,5,24,0,0,643,33,1,0,0,0,644,645,3,236,118,0,645,647,
		3,144,72,0,646,648,3,146,73,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,
		1,0,0,0,649,650,5,24,0,0,650,35,1,0,0,0,651,653,3,236,118,0,652,654,3,
		208,104,0,653,652,1,0,0,0,654,655,1,0,0,0,655,653,1,0,0,0,655,656,1,0,
		0,0,656,37,1,0,0,0,657,658,3,236,118,0,658,659,5,19,0,0,659,660,3,148,
		74,0,660,661,3,150,75,0,661,662,5,19,0,0,662,663,3,152,76,0,663,664,5,
		19,0,0,664,665,3,154,77,0,665,666,5,19,0,0,666,667,3,156,78,0,667,668,
		5,24,0,0,668,39,1,0,0,0,669,670,3,236,118,0,670,672,5,19,0,0,671,673,3,
		212,106,0,672,671,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,676,3,210,
		105,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,24,0,0,
		678,41,1,0,0,0,679,680,3,236,118,0,680,681,5,19,0,0,681,682,3,344,172,
		0,682,683,5,24,0,0,683,43,1,0,0,0,684,685,3,236,118,0,685,687,5,19,0,0,
		686,688,3,158,79,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,
		691,3,160,80,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,
		5,24,0,0,693,45,1,0,0,0,694,695,5,5,0,0,695,696,5,19,0,0,696,698,3,166,
		83,0,697,699,3,168,84,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,
		0,700,701,5,24,0,0,701,47,1,0,0,0,702,703,3,236,118,0,703,704,5,19,0,0,
		704,705,3,170,85,0,705,706,5,24,0,0,706,49,1,0,0,0,707,709,3,236,118,0,
		708,710,3,118,59,0,709,708,1,0,0,0,710,711,1,0,0,0,711,709,1,0,0,0,711,
		712,1,0,0,0,712,713,1,0,0,0,713,714,5,24,0,0,714,51,1,0,0,0,715,716,5,
		4,0,0,716,717,5,19,0,0,717,718,3,378,189,0,718,719,5,19,0,0,719,720,3,
		380,190,0,720,721,5,24,0,0,721,53,1,0,0,0,722,723,5,3,0,0,723,725,5,19,
		0,0,724,726,3,382,191,0,725,724,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,
		0,727,729,3,218,109,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,
		730,731,5,24,0,0,731,55,1,0,0,0,732,733,3,236,118,0,733,734,5,19,0,0,734,
		735,3,378,189,0,735,736,5,24,0,0,736,738,5,19,0,0,737,739,3,224,112,0,
		738,737,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,742,3,226,113,0,741,
		740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,5,24,0,0,744,57,1,
		0,0,0,745,747,3,236,118,0,746,748,3,172,86,0,747,746,1,0,0,0,748,749,1,
		0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,59,1,0,0,0,751,753,3,62,31,0,
		752,754,3,64,32,0,753,752,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,
		757,3,66,33,0,756,755,1,0,0,0,756,757,1,0,0,0,757,61,1,0,0,0,758,759,5,
		19,0,0,759,760,3,332,166,0,760,63,1,0,0,0,761,763,3,68,34,0,762,761,1,
		0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,766,3,70,35,0,765,764,1,0,0,
		0,765,766,1,0,0,0,766,768,1,0,0,0,767,769,3,72,36,0,768,767,1,0,0,0,768,
		769,1,0,0,0,769,771,1,0,0,0,770,772,3,74,37,0,771,770,1,0,0,0,771,772,
		1,0,0,0,772,774,1,0,0,0,773,775,3,76,38,0,774,773,1,0,0,0,774,775,1,0,
		0,0,775,777,1,0,0,0,776,778,3,78,39,0,777,776,1,0,0,0,777,778,1,0,0,0,
		778,780,1,0,0,0,779,781,3,80,40,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
		782,1,0,0,0,782,783,5,24,0,0,783,65,1,0,0,0,784,794,3,82,41,0,785,794,
		3,84,42,0,786,794,3,86,43,0,787,794,3,88,44,0,788,794,3,90,45,0,789,794,
		3,92,46,0,790,794,3,94,47,0,791,794,3,96,48,0,792,794,3,98,49,0,793,784,
		1,0,0,0,793,785,1,0,0,0,793,786,1,0,0,0,793,787,1,0,0,0,793,788,1,0,0,
		0,793,789,1,0,0,0,793,790,1,0,0,0,793,791,1,0,0,0,793,792,1,0,0,0,794,
		795,1,0,0,0,795,796,5,24,0,0,796,67,1,0,0,0,797,798,5,19,0,0,798,801,3,
		330,165,0,799,802,3,328,164,0,800,802,3,326,163,0,801,799,1,0,0,0,801,
		800,1,0,0,0,802,69,1,0,0,0,803,804,5,19,0,0,804,805,3,102,51,0,805,71,
		1,0,0,0,806,807,5,19,0,0,807,808,3,330,165,0,808,809,3,318,159,0,809,73,
		1,0,0,0,810,811,5,19,0,0,811,815,3,330,165,0,812,816,3,312,156,0,813,816,
		3,314,157,0,814,816,3,100,50,0,815,812,1,0,0,0,815,813,1,0,0,0,815,814,
		1,0,0,0,816,75,1,0,0,0,817,818,5,19,0,0,818,819,3,330,165,0,819,820,3,
		324,162,0,820,77,1,0,0,0,821,822,5,19,0,0,822,825,3,330,165,0,823,826,
		3,308,154,0,824,826,3,310,155,0,825,823,1,0,0,0,825,824,1,0,0,0,826,79,
		1,0,0,0,827,828,5,19,0,0,828,831,3,330,165,0,829,832,3,352,176,0,830,832,
		3,310,155,0,831,829,1,0,0,0,831,830,1,0,0,0,832,81,1,0,0,0,833,834,5,11,
		0,0,834,835,3,402,201,0,835,83,1,0,0,0,836,837,5,12,0,0,837,838,3,402,
		201,0,838,85,1,0,0,0,839,841,5,13,0,0,840,842,3,102,51,0,841,840,1,0,0,
		0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,5,19,0,0,844,845,3,104,52,0,
		845,87,1,0,0,0,846,847,5,14,0,0,847,848,3,250,125,0,848,849,3,252,126,
		0,849,89,1,0,0,0,850,851,5,15,0,0,851,852,3,290,145,0,852,853,3,292,146,
		0,853,854,3,294,147,0,854,91,1,0,0,0,855,856,5,16,0,0,856,857,3,296,148,
		0,857,93,1,0,0,0,858,859,5,17,0,0,859,860,3,298,149,0,860,95,1,0,0,0,861,
		862,5,18,0,0,862,863,3,368,184,0,863,97,1,0,0,0,864,865,5,19,0,0,865,866,
		3,288,144,0,866,99,1,0,0,0,867,868,3,316,158,0,868,869,3,320,160,0,869,
		101,1,0,0,0,870,871,3,322,161,0,871,872,3,324,162,0,872,103,1,0,0,0,873,
		875,3,300,150,0,874,876,3,106,53,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
		105,1,0,0,0,877,878,3,302,151,0,878,879,5,20,0,0,879,880,3,304,152,0,880,
		881,5,20,0,0,881,882,3,306,153,0,882,883,5,19,0,0,883,884,3,328,164,0,
		884,107,1,0,0,0,885,886,3,240,120,0,886,887,5,20,0,0,887,888,3,242,121,
		0,888,109,1,0,0,0,889,890,3,244,122,0,890,891,3,246,123,0,891,111,1,0,
		0,0,892,893,5,19,0,0,893,894,3,248,124,0,894,895,3,328,164,0,895,896,3,
		322,161,0,896,897,3,324,162,0,897,113,1,0,0,0,898,899,3,250,125,0,899,
		900,3,252,126,0,900,115,1,0,0,0,901,902,3,254,127,0,902,903,3,256,128,
		0,903,117,1,0,0,0,904,905,5,19,0,0,905,906,3,356,178,0,906,119,1,0,0,0,
		907,908,5,19,0,0,908,909,3,286,143,0,909,910,3,284,142,0,910,911,5,19,
		0,0,911,912,3,276,138,0,912,121,1,0,0,0,913,915,5,19,0,0,914,916,3,282,
		141,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,3,286,143,
		0,918,123,1,0,0,0,919,920,5,19,0,0,920,922,3,282,141,0,921,923,3,286,143,
		0,922,921,1,0,0,0,922,923,1,0,0,0,923,125,1,0,0,0,924,925,3,334,167,0,
		925,926,3,336,168,0,926,127,1,0,0,0,927,930,3,258,129,0,928,930,3,264,
		132,0,929,927,1,0,0,0,929,928,1,0,0,0,930,129,1,0,0,0,931,934,3,260,130,
		0,932,934,3,264,132,0,933,931,1,0,0,0,933,932,1,0,0,0,934,131,1,0,0,0,
		935,938,3,262,131,0,936,938,3,264,132,0,937,935,1,0,0,0,937,936,1,0,0,
		0,938,133,1,0,0,0,939,941,3,136,68,0,940,942,3,138,69,0,941,940,1,0,0,
		0,942,943,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,
		946,5,24,0,0,946,135,1,0,0,0,947,948,5,19,0,0,948,949,3,336,168,0,949,
		950,5,19,0,0,950,137,1,0,0,0,951,952,3,338,169,0,952,953,3,340,170,0,953,
		954,3,352,176,0,954,139,1,0,0,0,955,956,5,19,0,0,956,957,3,342,171,0,957,
		958,3,352,176,0,958,141,1,0,0,0,959,960,5,19,0,0,960,961,3,342,171,0,961,
		962,3,352,176,0,962,143,1,0,0,0,963,964,5,19,0,0,964,965,3,276,138,0,965,
		966,3,278,139,0,966,967,3,280,140,0,967,969,5,19,0,0,968,970,3,380,190,
		0,969,968,1,0,0,0,969,970,1,0,0,0,970,972,1,0,0,0,971,973,3,358,179,0,
		972,971,1,0,0,0,972,973,1,0,0,0,973,145,1,0,0,0,974,975,5,19,0,0,975,976,
		3,386,193,0,976,147,1,0,0,0,977,978,3,348,174,0,978,149,1,0,0,0,979,980,
		3,350,175,0,980,151,1,0,0,0,981,982,3,352,176,0,982,153,1,0,0,0,983,984,
		3,352,176,0,984,155,1,0,0,0,985,986,3,352,176,0,986,157,1,0,0,0,987,988,
		3,354,177,0,988,159,1,0,0,0,989,991,5,19,0,0,990,992,3,162,81,0,991,990,
		1,0,0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,995,3,164,82,0,994,993,1,0,
		0,0,994,995,1,0,0,0,995,161,1,0,0,0,996,997,3,346,173,0,997,163,1,0,0,
		0,998,999,5,19,0,0,999,1000,3,346,173,0,1000,165,1,0,0,0,1001,1002,3,352,
		176,0,1002,167,1,0,0,0,1003,1004,5,19,0,0,1004,1005,3,354,177,0,1005,169,
		1,0,0,0,1006,1007,3,376,188,0,1007,171,1,0,0,0,1008,1010,5,19,0,0,1009,
		1011,3,368,184,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,
		1012,1014,5,19,0,0,1013,1015,3,370,185,0,1014,1013,1,0,0,0,1014,1015,1,
		0,0,0,1015,1016,1,0,0,0,1016,1018,5,19,0,0,1017,1019,3,372,186,0,1018,
		1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1021,5,19,0,0,1021,
		1022,3,374,187,0,1022,1023,5,24,0,0,1023,173,1,0,0,0,1024,1025,5,19,0,
		0,1025,1026,3,394,197,0,1026,175,1,0,0,0,1027,1029,5,8,0,0,1028,1030,3,
		178,89,0,1029,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1029,1,0,0,0,1031,1032,
		1,0,0,0,1032,177,1,0,0,0,1033,1034,5,19,0,0,1034,1035,3,378,189,0,1035,
		1036,5,24,0,0,1036,179,1,0,0,0,1037,1039,5,9,0,0,1038,1040,3,182,91,0,
		1039,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,
		0,1042,181,1,0,0,0,1043,1044,5,19,0,0,1044,1045,3,396,198,0,1045,1046,
		5,24,0,0,1046,183,1,0,0,0,1047,1048,5,10,0,0,1048,1049,5,19,0,0,1049,1051,
		3,380,190,0,1050,1052,3,186,93,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,
		1053,1,0,0,0,1053,1054,5,24,0,0,1054,185,1,0,0,0,1055,1056,5,19,0,0,1056,
		1057,3,398,199,0,1057,187,1,0,0,0,1058,1059,5,19,0,0,1059,1061,3,368,184,
		0,1060,1062,3,190,95,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,189,1,
		0,0,0,1063,1064,5,19,0,0,1064,1065,3,400,200,0,1065,191,1,0,0,0,1066,1067,
		5,19,0,0,1067,1068,3,266,133,0,1068,1069,5,19,0,0,1069,1070,3,268,134,
		0,1070,193,1,0,0,0,1071,1073,5,19,0,0,1072,1074,3,394,197,0,1073,1072,
		1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,5,19,0,0,1076,1078,
		3,270,135,0,1077,1079,3,196,98,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,
		195,1,0,0,0,1080,1082,5,19,0,0,1081,1083,3,200,100,0,1082,1081,1,0,0,0,
		1082,1083,1,0,0,0,1083,1085,1,0,0,0,1084,1086,3,198,99,0,1085,1084,1,0,
		0,0,1085,1086,1,0,0,0,1086,197,1,0,0,0,1087,1088,5,19,0,0,1088,1089,3,
		364,182,0,1089,199,1,0,0,0,1090,1091,3,272,136,0,1091,201,1,0,0,0,1092,
		1093,5,19,0,0,1093,1094,3,274,137,0,1094,1095,5,19,0,0,1095,1096,3,392,
		196,0,1096,1097,5,24,0,0,1097,203,1,0,0,0,1098,1099,5,19,0,0,1099,1100,
		3,380,190,0,1100,1101,5,24,0,0,1101,205,1,0,0,0,1102,1103,5,19,0,0,1103,
		1104,3,390,195,0,1104,1105,5,24,0,0,1105,207,1,0,0,0,1106,1107,5,19,0,
		0,1107,1108,3,388,194,0,1108,1109,5,24,0,0,1109,209,1,0,0,0,1110,1112,
		5,19,0,0,1111,1113,3,214,107,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,
		1115,1,0,0,0,1114,1116,3,216,108,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,
		1116,211,1,0,0,0,1117,1118,3,358,179,0,1118,1119,3,360,180,0,1119,1120,
		3,362,181,0,1120,213,1,0,0,0,1121,1122,3,376,188,0,1122,215,1,0,0,0,1123,
		1124,5,19,0,0,1124,1125,3,364,182,0,1125,1126,5,19,0,0,1126,1127,3,366,
		183,0,1127,1128,5,19,0,0,1128,1129,3,282,141,0,1129,217,1,0,0,0,1130,1132,
		5,19,0,0,1131,1133,3,220,110,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,
		1135,1,0,0,0,1134,1136,3,222,111,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,
		1136,219,1,0,0,0,1137,1138,3,384,192,0,1138,221,1,0,0,0,1139,1140,5,19,
		0,0,1140,1141,3,384,192,0,1141,223,1,0,0,0,1142,1143,3,358,179,0,1143,
		1144,3,360,180,0,1144,1145,3,362,181,0,1145,225,1,0,0,0,1146,1148,5,19,
		0,0,1147,1149,3,228,114,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1151,
		1,0,0,0,1150,1152,3,230,115,0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,
		227,1,0,0,0,1153,1154,3,376,188,0,1154,229,1,0,0,0,1155,1156,5,19,0,0,
		1156,1157,3,364,182,0,1157,1158,5,19,0,0,1158,1159,3,366,183,0,1159,1160,
		5,19,0,0,1160,1161,3,358,179,0,1161,231,1,0,0,0,1162,1163,5,21,0,0,1163,
		1164,5,21,0,0,1164,1165,5,21,0,0,1165,233,1,0,0,0,1166,1168,5,22,0,0,1167,
		1169,5,22,0,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,
		1172,5,22,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,235,1,0,0,0,1173,
		1174,5,21,0,0,1174,1175,5,21,0,0,1175,1176,5,21,0,0,1176,237,1,0,0,0,1177,
		1178,5,21,0,0,1178,1179,5,21,0,0,1179,239,1,0,0,0,1180,1181,5,22,0,0,1181,
		1182,5,22,0,0,1182,1183,5,22,0,0,1183,241,1,0,0,0,1184,1185,5,22,0,0,1185,
		1186,5,22,0,0,1186,1187,5,22,0,0,1187,1188,5,22,0,0,1188,1189,5,22,0,0,
		1189,1190,5,22,0,0,1190,1191,5,22,0,0,1191,1192,5,22,0,0,1192,243,1,0,
		0,0,1193,1194,5,21,0,0,1194,1195,5,21,0,0,1195,1196,5,21,0,0,1196,245,
		1,0,0,0,1197,1198,5,21,0,0,1198,1199,5,21,0,0,1199,1200,5,21,0,0,1200,
		247,1,0,0,0,1201,1202,5,21,0,0,1202,249,1,0,0,0,1203,1204,5,21,0,0,1204,
		1205,5,21,0,0,1205,251,1,0,0,0,1206,1208,5,22,0,0,1207,1206,1,0,0,0,1208,
		1209,1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,1217,1,0,0,0,1211,
		1213,7,0,0,0,1212,1214,5,22,0,0,1213,1212,1,0,0,0,1214,1215,1,0,0,0,1215,
		1213,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1211,1,0,0,0,1217,
		1218,1,0,0,0,1218,253,1,0,0,0,1219,1220,5,21,0,0,1220,1221,5,21,0,0,1221,
		255,1,0,0,0,1222,1224,5,22,0,0,1223,1225,5,22,0,0,1224,1223,1,0,0,0,1224,
		1225,1,0,0,0,1225,257,1,0,0,0,1226,1228,5,22,0,0,1227,1226,1,0,0,0,1228,
		1229,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1237,1,0,0,0,1231,
		1233,7,0,0,0,1232,1234,5,22,0,0,1233,1232,1,0,0,0,1234,1235,1,0,0,0,1235,
		1233,1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,1237,1231,1,0,0,0,1237,
		1238,1,0,0,0,1238,259,1,0,0,0,1239,1241,5,22,0,0,1240,1239,1,0,0,0,1241,
		1242,1,0,0,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,1250,1,0,0,0,1244,
		1246,7,0,0,0,1245,1247,5,22,0,0,1246,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
		1246,1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1244,1,0,0,0,1250,
		1251,1,0,0,0,1251,261,1,0,0,0,1252,1254,5,22,0,0,1253,1252,1,0,0,0,1254,
		1255,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1263,1,0,0,0,1257,
		1259,7,0,0,0,1258,1260,5,22,0,0,1259,1258,1,0,0,0,1260,1261,1,0,0,0,1261,
		1259,1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,1257,1,0,0,0,1263,
		1264,1,0,0,0,1264,263,1,0,0,0,1265,1266,5,21,0,0,1266,1267,5,21,0,0,1267,
		1268,5,21,0,0,1268,265,1,0,0,0,1269,1271,7,1,0,0,1270,1272,7,1,0,0,1271,
		1270,1,0,0,0,1271,1272,1,0,0,0,1272,1274,1,0,0,0,1273,1275,7,1,0,0,1274,
		1273,1,0,0,0,1274,1275,1,0,0,0,1275,267,1,0,0,0,1276,1278,7,1,0,0,1277,
		1276,1,0,0,0,1278,1279,1,0,0,0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,
		269,1,0,0,0,1281,1282,5,22,0,0,1282,1283,5,22,0,0,1283,1284,5,22,0,0,1284,
		1285,5,22,0,0,1285,1286,5,22,0,0,1286,1287,5,22,0,0,1287,1288,5,22,0,0,
		1288,271,1,0,0,0,1289,1290,5,22,0,0,1290,1291,5,22,0,0,1291,1292,5,22,
		0,0,1292,1293,5,22,0,0,1293,273,1,0,0,0,1294,1295,5,21,0,0,1295,1296,5,
		21,0,0,1296,1297,5,21,0,0,1297,275,1,0,0,0,1298,1299,5,22,0,0,1299,1300,
		5,22,0,0,1300,277,1,0,0,0,1301,1302,5,21,0,0,1302,1303,5,21,0,0,1303,1304,
		5,21,0,0,1304,279,1,0,0,0,1305,1306,5,22,0,0,1306,1307,5,22,0,0,1307,281,
		1,0,0,0,1308,1309,5,21,0,0,1309,1310,5,21,0,0,1310,1311,5,21,0,0,1311,
		283,1,0,0,0,1312,1313,5,22,0,0,1313,1314,5,22,0,0,1314,1316,5,22,0,0,1315,
		1317,5,22,0,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,
		1320,5,21,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,285,1,0,0,0,1321,
		1322,7,1,0,0,1322,1323,7,1,0,0,1323,287,1,0,0,0,1324,1325,5,21,0,0,1325,
		289,1,0,0,0,1326,1327,5,21,0,0,1327,1328,7,1,0,0,1328,1329,7,1,0,0,1329,
		291,1,0,0,0,1330,1331,7,1,0,0,1331,1332,5,22,0,0,1332,1333,5,22,0,0,1333,
		1335,5,22,0,0,1334,1336,5,22,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,
		293,1,0,0,0,1337,1338,7,1,0,0,1338,1339,7,1,0,0,1339,295,1,0,0,0,1340,
		1342,5,22,0,0,1341,1343,5,22,0,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,
		1345,1,0,0,0,1344,1346,5,22,0,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,
		1348,1,0,0,0,1347,1349,5,22,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,
		1351,1,0,0,0,1350,1352,5,22,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,
		297,1,0,0,0,1353,1355,7,1,0,0,1354,1353,1,0,0,0,1355,1356,1,0,0,0,1356,
		1354,1,0,0,0,1356,1357,1,0,0,0,1357,299,1,0,0,0,1358,1360,7,1,0,0,1359,
		1361,7,1,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,
		1364,7,1,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,301,1,0,0,0,1365,
		1367,5,22,0,0,1366,1368,5,22,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,
		1370,1,0,0,0,1369,1371,5,22,0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,
		1373,1,0,0,0,1372,1374,5,22,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,
		1376,1,0,0,0,1375,1377,5,22,0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,
		303,1,0,0,0,1378,1380,5,22,0,0,1379,1381,5,22,0,0,1380,1379,1,0,0,0,1380,
		1381,1,0,0,0,1381,1383,1,0,0,0,1382,1384,5,22,0,0,1383,1382,1,0,0,0,1383,
		1384,1,0,0,0,1384,1386,1,0,0,0,1385,1387,5,22,0,0,1386,1385,1,0,0,0,1386,
		1387,1,0,0,0,1387,1389,1,0,0,0,1388,1390,5,22,0,0,1389,1388,1,0,0,0,1389,
		1390,1,0,0,0,1390,305,1,0,0,0,1391,1393,5,22,0,0,1392,1394,5,22,0,0,1393,
		1392,1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,1397,5,22,0,0,1396,
		1395,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1400,5,22,0,0,1399,
		1398,1,0,0,0,1399,1400,1,0,0,0,1400,1402,1,0,0,0,1401,1403,5,22,0,0,1402,
		1401,1,0,0,0,1402,1403,1,0,0,0,1403,307,1,0,0,0,1404,1406,5,22,0,0,1405,
		1404,1,0,0,0,1406,1407,1,0,0,0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,
		1415,1,0,0,0,1409,1411,7,0,0,0,1410,1412,5,22,0,0,1411,1410,1,0,0,0,1412,
		1413,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1416,1,0,0,0,1415,
		1409,1,0,0,0,1415,1416,1,0,0,0,1416,309,1,0,0,0,1417,1419,5,22,0,0,1418,
		1417,1,0,0,0,1419,1420,1,0,0,0,1420,1418,1,0,0,0,1420,1421,1,0,0,0,1421,
		1428,1,0,0,0,1422,1424,7,0,0,0,1423,1425,5,22,0,0,1424,1423,1,0,0,0,1425,
		1426,1,0,0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,
		1422,1,0,0,0,1428,1429,1,0,0,0,1429,311,1,0,0,0,1430,1431,5,22,0,0,1431,
		1432,5,22,0,0,1432,1433,5,22,0,0,1433,1435,5,22,0,0,1434,1436,5,22,0,0,
		1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1438,1,0,0,0,1437,1439,5,22,0,
		0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1441,1,0,0,0,1440,1442,5,22,
		0,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,313,1,0,0,0,1443,1445,5,22,
		0,0,1444,1446,5,21,0,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1448,1,
		0,0,0,1447,1449,5,21,0,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,315,
		1,0,0,0,1450,1451,5,21,0,0,1451,317,1,0,0,0,1452,1453,5,21,0,0,1453,319,
		1,0,0,0,1454,1456,5,22,0,0,1455,1457,5,22,0,0,1456,1455,1,0,0,0,1456,1457,
		1,0,0,0,1457,1459,1,0,0,0,1458,1460,5,22,0,0,1459,1458,1,0,0,0,1459,1460,
		1,0,0,0,1460,321,1,0,0,0,1461,1462,5,21,0,0,1462,323,1,0,0,0,1463,1465,
		5,22,0,0,1464,1463,1,0,0,0,1465,1466,1,0,0,0,1466,1464,1,0,0,0,1466,1467,
		1,0,0,0,1467,1474,1,0,0,0,1468,1470,7,0,0,0,1469,1471,5,22,0,0,1470,1469,
		1,0,0,0,1471,1472,1,0,0,0,1472,1470,1,0,0,0,1472,1473,1,0,0,0,1473,1475,
		1,0,0,0,1474,1468,1,0,0,0,1474,1475,1,0,0,0,1475,325,1,0,0,0,1476,1477,
		5,21,0,0,1477,1478,5,21,0,0,1478,1479,5,21,0,0,1479,327,1,0,0,0,1480,1482,
		5,22,0,0,1481,1483,5,22,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1485,
		1,0,0,0,1484,1486,5,22,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1488,
		1,0,0,0,1487,1489,5,22,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,329,
		1,0,0,0,1490,1491,5,21,0,0,1491,331,1,0,0,0,1492,1494,5,22,0,0,1493,1495,
		5,22,0,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,333,1,0,0,0,1496,1497,
		5,21,0,0,1497,335,1,0,0,0,1498,1499,5,21,0,0,1499,337,1,0,0,0,1500,1501,
		5,21,0,0,1501,1502,5,21,0,0,1502,339,1,0,0,0,1503,1504,5,21,0,0,1504,341,
		1,0,0,0,1505,1506,5,21,0,0,1506,1507,5,21,0,0,1507,343,1,0,0,0,1508,1510,
		7,1,0,0,1509,1511,7,1,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,345,
		1,0,0,0,1512,1514,5,22,0,0,1513,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1513,
		1,0,0,0,1515,1516,1,0,0,0,1516,1523,1,0,0,0,1517,1519,7,0,0,0,1518,1520,
		5,22,0,0,1519,1518,1,0,0,0,1520,1521,1,0,0,0,1521,1519,1,0,0,0,1521,1522,
		1,0,0,0,1522,1524,1,0,0,0,1523,1517,1,0,0,0,1523,1524,1,0,0,0,1524,347,
		1,0,0,0,1525,1526,5,21,0,0,1526,1527,5,21,0,0,1527,1528,5,21,0,0,1528,
		349,1,0,0,0,1529,1531,5,22,0,0,1530,1529,1,0,0,0,1531,1532,1,0,0,0,1532,
		1530,1,0,0,0,1532,1533,1,0,0,0,1533,1540,1,0,0,0,1534,1536,7,0,0,0,1535,
		1537,5,22,0,0,1536,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1536,1,0,0,0,1538,
		1539,1,0,0,0,1539,1541,1,0,0,0,1540,1534,1,0,0,0,1540,1541,1,0,0,0,1541,
		351,1,0,0,0,1542,1544,5,22,0,0,1543,1542,1,0,0,0,1544,1545,1,0,0,0,1545,
		1543,1,0,0,0,1545,1546,1,0,0,0,1546,1553,1,0,0,0,1547,1549,7,0,0,0,1548,
		1550,5,22,0,0,1549,1548,1,0,0,0,1550,1551,1,0,0,0,1551,1549,1,0,0,0,1551,
		1552,1,0,0,0,1552,1554,1,0,0,0,1553,1547,1,0,0,0,1553,1554,1,0,0,0,1554,
		353,1,0,0,0,1555,1557,5,21,0,0,1556,1558,5,21,0,0,1557,1556,1,0,0,0,1557,
		1558,1,0,0,0,1558,355,1,0,0,0,1559,1560,5,21,0,0,1560,1561,5,21,0,0,1561,
		1562,5,21,0,0,1562,357,1,0,0,0,1563,1564,5,21,0,0,1564,1565,5,21,0,0,1565,
		1566,5,21,0,0,1566,359,1,0,0,0,1567,1568,7,1,0,0,1568,1569,7,1,0,0,1569,
		361,1,0,0,0,1570,1571,7,1,0,0,1571,1572,7,1,0,0,1572,363,1,0,0,0,1573,
		1575,7,1,0,0,1574,1576,7,1,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,
		1578,1,0,0,0,1577,1579,7,1,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,
		365,1,0,0,0,1580,1582,7,1,0,0,1581,1580,1,0,0,0,1582,1583,1,0,0,0,1583,
		1581,1,0,0,0,1583,1584,1,0,0,0,1584,367,1,0,0,0,1585,1586,5,21,0,0,1586,
		1587,5,21,0,0,1587,369,1,0,0,0,1588,1589,5,21,0,0,1589,1590,5,21,0,0,1590,
		1591,5,21,0,0,1591,371,1,0,0,0,1592,1594,5,21,0,0,1593,1595,5,21,0,0,1594,
		1593,1,0,0,0,1594,1595,1,0,0,0,1595,373,1,0,0,0,1596,1598,8,2,0,0,1597,
		1596,1,0,0,0,1598,1599,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,
		375,1,0,0,0,1601,1603,8,2,0,0,1602,1601,1,0,0,0,1603,1604,1,0,0,0,1604,
		1602,1,0,0,0,1604,1605,1,0,0,0,1605,377,1,0,0,0,1606,1608,8,2,0,0,1607,
		1606,1,0,0,0,1608,1609,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,
		379,1,0,0,0,1611,1613,8,2,0,0,1612,1611,1,0,0,0,1613,1614,1,0,0,0,1614,
		1612,1,0,0,0,1614,1615,1,0,0,0,1615,381,1,0,0,0,1616,1618,8,2,0,0,1617,
		1616,1,0,0,0,1618,1619,1,0,0,0,1619,1617,1,0,0,0,1619,1620,1,0,0,0,1620,
		383,1,0,0,0,1621,1623,8,2,0,0,1622,1621,1,0,0,0,1623,1624,1,0,0,0,1624,
		1622,1,0,0,0,1624,1625,1,0,0,0,1625,385,1,0,0,0,1626,1628,8,2,0,0,1627,
		1626,1,0,0,0,1628,1629,1,0,0,0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,
		387,1,0,0,0,1631,1633,8,2,0,0,1632,1631,1,0,0,0,1633,1634,1,0,0,0,1634,
		1632,1,0,0,0,1634,1635,1,0,0,0,1635,389,1,0,0,0,1636,1638,8,2,0,0,1637,
		1636,1,0,0,0,1638,1639,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,1640,
		391,1,0,0,0,1641,1643,8,2,0,0,1642,1641,1,0,0,0,1643,1644,1,0,0,0,1644,
		1642,1,0,0,0,1644,1645,1,0,0,0,1645,393,1,0,0,0,1646,1648,8,2,0,0,1647,
		1646,1,0,0,0,1648,1649,1,0,0,0,1649,1647,1,0,0,0,1649,1650,1,0,0,0,1650,
		395,1,0,0,0,1651,1653,8,2,0,0,1652,1651,1,0,0,0,1653,1654,1,0,0,0,1654,
		1652,1,0,0,0,1654,1655,1,0,0,0,1655,397,1,0,0,0,1656,1658,8,2,0,0,1657,
		1656,1,0,0,0,1658,1659,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,
		399,1,0,0,0,1661,1663,8,2,0,0,1662,1661,1,0,0,0,1663,1664,1,0,0,0,1664,
		1662,1,0,0,0,1664,1665,1,0,0,0,1665,401,1,0,0,0,1666,1668,8,2,0,0,1667,
		1666,1,0,0,0,1668,1669,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,
		403,1,0,0,0,185,407,413,416,419,422,427,430,433,436,440,443,447,450,453,
		456,459,462,465,470,474,485,488,496,505,512,522,529,539,554,565,574,581,
		585,599,605,611,618,627,634,647,655,672,675,687,690,698,711,725,728,738,
		741,749,753,756,762,765,768,771,774,777,780,793,801,815,825,831,841,875,
		915,922,929,933,937,943,969,972,991,994,1010,1014,1018,1031,1041,1051,
		1061,1073,1078,1082,1085,1112,1115,1132,1135,1148,1151,1168,1171,1209,
		1215,1217,1224,1229,1235,1237,1242,1248,1250,1255,1261,1263,1271,1274,
		1279,1316,1319,1335,1342,1345,1348,1351,1356,1360,1363,1367,1370,1373,
		1376,1380,1383,1386,1389,1393,1396,1399,1402,1407,1413,1415,1420,1426,
		1428,1435,1438,1441,1445,1448,1456,1459,1466,1472,1474,1482,1485,1488,
		1494,1510,1515,1521,1523,1532,1538,1540,1545,1551,1553,1557,1575,1578,
		1583,1594,1599,1604,1609,1614,1619,1624,1629,1634,1639,1644,1649,1654,
		1659,1664,1669
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
