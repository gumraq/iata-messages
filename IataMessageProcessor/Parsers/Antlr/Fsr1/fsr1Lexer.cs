//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fsr1.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fsr1Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, SeparatorSlant=3, SeparatorHyphen=4, A=5, N=6, G=7, SeparatorCrlf=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf", 
		"DIGIT", "CAPITAL_LETTER", "SMALL_LETTER", "SLANT", "HYPHEN", "SPACE", 
		"EXCLAMATION_MARK", "DOUBLE_QUOTE", "NUMBER_SIGN", "DOLLAR_SIGN", "PERCENT", 
		"AMPERSAND", "SINGLE_QUOTE", "LEFT_OPENING_PARENTHESIS", "RIGHT_CLOSING_PARENTHESIS", 
		"ASTERISK", "PLUS", "COMMA", "DOT", "COLON", "SEMICOLON", "LESS_THAN", 
		"EQUAL_SIGN", "GREATER_THAN", "QUESTION_MARK", "AT_SYMBOL", "LEFT_OPENING_BRACKET", 
		"BACK_SLASH", "RIGHT_CLOSING_BRACKET", "CARET_CIRCUMFLEX", "UNDERSCORE", 
		"GRAVE_ACCENT", "LEFT_OPENING_BRACE", "VERTICAL_BAR", "RIGHT_CLOSING_BRACE", 
		"TILDE"
	};


	public fsr1Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public fsr1Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SeparatorSlant", "SeparatorHyphen", "A", "N", "G", 
		"SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fsr1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fsr1Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,8,213,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,133,8,6,1,7,3,7,136,8,
		7,1,7,1,7,3,7,140,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
		13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
		20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
		27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
		34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,
		41,1,41,1,42,1,42,1,43,1,43,0,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,
		45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,
		73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,1,0,3,1,0,48,57,1,0,65,90,1,0,
		97,122,208,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,5,93,
		1,0,0,0,7,95,1,0,0,0,9,97,1,0,0,0,11,99,1,0,0,0,13,132,1,0,0,0,15,139,
		1,0,0,0,17,141,1,0,0,0,19,143,1,0,0,0,21,145,1,0,0,0,23,147,1,0,0,0,25,
		149,1,0,0,0,27,151,1,0,0,0,29,153,1,0,0,0,31,155,1,0,0,0,33,157,1,0,0,
		0,35,159,1,0,0,0,37,161,1,0,0,0,39,163,1,0,0,0,41,165,1,0,0,0,43,167,1,
		0,0,0,45,169,1,0,0,0,47,171,1,0,0,0,49,173,1,0,0,0,51,175,1,0,0,0,53,177,
		1,0,0,0,55,179,1,0,0,0,57,181,1,0,0,0,59,183,1,0,0,0,61,185,1,0,0,0,63,
		187,1,0,0,0,65,189,1,0,0,0,67,191,1,0,0,0,69,193,1,0,0,0,71,195,1,0,0,
		0,73,197,1,0,0,0,75,199,1,0,0,0,77,201,1,0,0,0,79,203,1,0,0,0,81,205,1,
		0,0,0,83,207,1,0,0,0,85,209,1,0,0,0,87,211,1,0,0,0,89,90,5,46,0,0,90,2,
		1,0,0,0,91,92,5,44,0,0,92,4,1,0,0,0,93,94,3,23,11,0,94,6,1,0,0,0,95,96,
		3,25,12,0,96,8,1,0,0,0,97,98,3,19,9,0,98,10,1,0,0,0,99,100,3,17,8,0,100,
		12,1,0,0,0,101,133,3,27,13,0,102,133,3,29,14,0,103,133,3,31,15,0,104,133,
		3,33,16,0,105,133,3,35,17,0,106,133,3,37,18,0,107,133,3,39,19,0,108,133,
		3,41,20,0,109,133,3,43,21,0,110,133,3,45,22,0,111,133,3,47,23,0,112,133,
		3,49,24,0,113,133,3,51,25,0,114,133,3,53,26,0,115,133,3,55,27,0,116,133,
		3,57,28,0,117,133,3,59,29,0,118,133,3,61,30,0,119,133,3,63,31,0,120,133,
		3,65,32,0,121,133,3,67,33,0,122,133,3,69,34,0,123,133,3,71,35,0,124,133,
		3,73,36,0,125,133,3,75,37,0,126,133,3,77,38,0,127,133,3,79,39,0,128,133,
		3,81,40,0,129,133,3,83,41,0,130,133,3,85,42,0,131,133,3,87,43,0,132,101,
		1,0,0,0,132,102,1,0,0,0,132,103,1,0,0,0,132,104,1,0,0,0,132,105,1,0,0,
		0,132,106,1,0,0,0,132,107,1,0,0,0,132,108,1,0,0,0,132,109,1,0,0,0,132,
		110,1,0,0,0,132,111,1,0,0,0,132,112,1,0,0,0,132,113,1,0,0,0,132,114,1,
		0,0,0,132,115,1,0,0,0,132,116,1,0,0,0,132,117,1,0,0,0,132,118,1,0,0,0,
		132,119,1,0,0,0,132,120,1,0,0,0,132,121,1,0,0,0,132,122,1,0,0,0,132,123,
		1,0,0,0,132,124,1,0,0,0,132,125,1,0,0,0,132,126,1,0,0,0,132,127,1,0,0,
		0,132,128,1,0,0,0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,
		14,1,0,0,0,134,136,5,13,0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,137,1,
		0,0,0,137,140,5,10,0,0,138,140,5,13,0,0,139,135,1,0,0,0,139,138,1,0,0,
		0,140,16,1,0,0,0,141,142,7,0,0,0,142,18,1,0,0,0,143,144,7,1,0,0,144,20,
		1,0,0,0,145,146,7,2,0,0,146,22,1,0,0,0,147,148,5,47,0,0,148,24,1,0,0,0,
		149,150,5,45,0,0,150,26,1,0,0,0,151,152,5,32,0,0,152,28,1,0,0,0,153,154,
		5,33,0,0,154,30,1,0,0,0,155,156,5,34,0,0,156,32,1,0,0,0,157,158,5,35,0,
		0,158,34,1,0,0,0,159,160,5,36,0,0,160,36,1,0,0,0,161,162,5,37,0,0,162,
		38,1,0,0,0,163,164,5,38,0,0,164,40,1,0,0,0,165,166,5,39,0,0,166,42,1,0,
		0,0,167,168,5,40,0,0,168,44,1,0,0,0,169,170,5,41,0,0,170,46,1,0,0,0,171,
		172,5,42,0,0,172,48,1,0,0,0,173,174,5,43,0,0,174,50,1,0,0,0,175,176,5,
		44,0,0,176,52,1,0,0,0,177,178,5,46,0,0,178,54,1,0,0,0,179,180,5,58,0,0,
		180,56,1,0,0,0,181,182,5,59,0,0,182,58,1,0,0,0,183,184,5,60,0,0,184,60,
		1,0,0,0,185,186,5,61,0,0,186,62,1,0,0,0,187,188,5,62,0,0,188,64,1,0,0,
		0,189,190,5,63,0,0,190,66,1,0,0,0,191,192,5,64,0,0,192,68,1,0,0,0,193,
		194,5,91,0,0,194,70,1,0,0,0,195,196,5,92,0,0,196,72,1,0,0,0,197,198,5,
		93,0,0,198,74,1,0,0,0,199,200,5,94,0,0,200,76,1,0,0,0,201,202,5,95,0,0,
		202,78,1,0,0,0,203,204,5,96,0,0,204,80,1,0,0,0,205,206,5,123,0,0,206,82,
		1,0,0,0,207,208,5,124,0,0,208,84,1,0,0,0,209,210,5,125,0,0,210,86,1,0,
		0,0,211,212,5,126,0,0,212,88,1,0,0,0,4,0,132,135,139,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
