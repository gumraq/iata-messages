//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fsr.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fsrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, SeparatorSlant=3, SeparatorHyphen=4, A=5, N=6, G=7, SeparatorCrlf=8;
	public const int
		RULE_fsr = 0, RULE_standardMessageIdentification = 1, RULE_consignmentDetail = 2, 
		RULE_flightDetails = 3, RULE_otherServiceInformation = 4, RULE_awbIdentification = 5, 
		RULE_awbOriginAndDestination = 6, RULE_quantityDetail = 7, RULE_totalConsignmentPieces = 8, 
		RULE_weightDetails = 9, RULE_natureOfGoods = 10, RULE_flightIdentification = 11, 
		RULE_airportsOfDepartureAndArrival = 12, RULE_osiDetails1stLine = 13, 
		RULE_osiDetails2stLine = 14, RULE_flightDate = 15, RULE_standardMessageIdentifier = 16, 
		RULE_lineIdentifier = 17, RULE_airlinePrefix = 18, RULE_awbSerialNumber = 19, 
		RULE_shipmentDescriptionCode = 20, RULE_numberOfPieces = 21, RULE_weightCode = 22, 
		RULE_weight = 23, RULE_carrierCode = 24, RULE_flightNumber = 25, RULE_dayOfScheduledDeparture = 26, 
		RULE_monthOfScheduledDeparture = 27, RULE_airportCodeOfDeparture = 28, 
		RULE_airportCodeOfArrival = 29, RULE_airportCodeOfOrigin = 30, RULE_airportCodeOfDestitation = 31, 
		RULE_manifestDescriptionOfGoods = 32, RULE_osiDescription = 33;
	public static readonly string[] ruleNames = {
		"fsr", "standardMessageIdentification", "consignmentDetail", "flightDetails", 
		"otherServiceInformation", "awbIdentification", "awbOriginAndDestination", 
		"quantityDetail", "totalConsignmentPieces", "weightDetails", "natureOfGoods", 
		"flightIdentification", "airportsOfDepartureAndArrival", "osiDetails1stLine", 
		"osiDetails2stLine", "flightDate", "standardMessageIdentifier", "lineIdentifier", 
		"airlinePrefix", "awbSerialNumber", "shipmentDescriptionCode", "numberOfPieces", 
		"weightCode", "weight", "carrierCode", "flightNumber", "dayOfScheduledDeparture", 
		"monthOfScheduledDeparture", "airportCodeOfDeparture", "airportCodeOfArrival", 
		"airportCodeOfOrigin", "airportCodeOfDestitation", "manifestDescriptionOfGoods", 
		"osiDescription"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SeparatorSlant", "SeparatorHyphen", "A", "N", "G", 
		"SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fsr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fsrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fsrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fsrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FsrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentificationContext standardMessageIdentification() {
			return GetRuleContext<StandardMessageIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsignmentDetailContext consignmentDetail() {
			return GetRuleContext<ConsignmentDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightDetailsContext[] flightDetails() {
			return GetRuleContexts<FlightDetailsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightDetailsContext flightDetails(int i) {
			return GetRuleContext<FlightDetailsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherServiceInformationContext otherServiceInformation() {
			return GetRuleContext<OtherServiceInformationContext>(0);
		}
		public FsrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fsr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFsr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FsrContext fsr() {
		FsrContext _localctx = new FsrContext(Context, State);
		EnterRule(_localctx, 0, RULE_fsr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			standardMessageIdentification();
			State = 69;
			consignmentDetail();
			State = 73;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 70;
					flightDetails();
					}
					} 
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 76;
				otherServiceInformation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentifierContext standardMessageIdentifier() {
			return GetRuleContext<StandardMessageIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fsrParser.SeparatorCrlf, 0); }
		public StandardMessageIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentificationContext standardMessageIdentification() {
		StandardMessageIdentificationContext _localctx = new StandardMessageIdentificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_standardMessageIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			standardMessageIdentifier();
			State = 80;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsignmentDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AwbIdentificationContext awbIdentification() {
			return GetRuleContext<AwbIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fsrParser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwbOriginAndDestinationContext awbOriginAndDestination() {
			return GetRuleContext<AwbOriginAndDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityDetailContext quantityDetail() {
			return GetRuleContext<QuantityDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TotalConsignmentPiecesContext totalConsignmentPieces() {
			return GetRuleContext<TotalConsignmentPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatureOfGoodsContext natureOfGoods() {
			return GetRuleContext<NatureOfGoodsContext>(0);
		}
		public ConsignmentDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consignmentDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsignmentDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsignmentDetailContext consignmentDetail() {
		ConsignmentDetailContext _localctx = new ConsignmentDetailContext(Context, State);
		EnterRule(_localctx, 4, RULE_consignmentDetail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			awbIdentification();
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 83;
				awbOriginAndDestination();
				}
				break;
			}
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 86;
				quantityDetail();
				}
				break;
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 89;
				totalConsignmentPieces();
				}
			}

			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 92;
				natureOfGoods();
				}
			}

			State = 95;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FlightIdentificationContext flightIdentification() {
			return GetRuleContext<FlightIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AirportsOfDepartureAndArrivalContext airportsOfDepartureAndArrival() {
			return GetRuleContext<AirportsOfDepartureAndArrivalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fsrParser.SeparatorCrlf, 0); }
		public FlightDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightDetailsContext flightDetails() {
		FlightDetailsContext _localctx = new FlightDetailsContext(Context, State);
		EnterRule(_localctx, 6, RULE_flightDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			flightIdentification();
			State = 98;
			Match(SeparatorSlant);
			State = 99;
			airportsOfDepartureAndArrival();
			State = 100;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherServiceInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OsiDetails1stLineContext osiDetails1stLine() {
			return GetRuleContext<OsiDetails1stLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OsiDetails2stLineContext osiDetails2stLine() {
			return GetRuleContext<OsiDetails2stLineContext>(0);
		}
		public OtherServiceInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherServiceInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherServiceInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherServiceInformationContext otherServiceInformation() {
		OtherServiceInformationContext _localctx = new OtherServiceInformationContext(Context, State);
		EnterRule(_localctx, 8, RULE_otherServiceInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			lineIdentifier();
			State = 103;
			osiDetails1stLine();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 104;
				osiDetails2stLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirlinePrefixContext airlinePrefix() {
			return GetRuleContext<AirlinePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorHyphen() { return GetToken(fsrParser.SeparatorHyphen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwbSerialNumberContext awbSerialNumber() {
			return GetRuleContext<AwbSerialNumberContext>(0);
		}
		public AwbIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbIdentificationContext awbIdentification() {
		AwbIdentificationContext _localctx = new AwbIdentificationContext(Context, State);
		EnterRule(_localctx, 10, RULE_awbIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			airlinePrefix();
			State = 108;
			Match(SeparatorHyphen);
			State = 109;
			awbSerialNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbOriginAndDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfOriginContext airportCodeOfOrigin() {
			return GetRuleContext<AirportCodeOfOriginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDestitationContext airportCodeOfDestitation() {
			return GetRuleContext<AirportCodeOfDestitationContext>(0);
		}
		public AwbOriginAndDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbOriginAndDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbOriginAndDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbOriginAndDestinationContext awbOriginAndDestination() {
		AwbOriginAndDestinationContext _localctx = new AwbOriginAndDestinationContext(Context, State);
		EnterRule(_localctx, 12, RULE_awbOriginAndDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			airportCodeOfOrigin();
			State = 112;
			airportCodeOfDestitation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightDetailsContext weightDetails() {
			return GetRuleContext<WeightDetailsContext>(0);
		}
		public QuantityDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantityDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityDetailContext quantityDetail() {
		QuantityDetailContext _localctx = new QuantityDetailContext(Context, State);
		EnterRule(_localctx, 14, RULE_quantityDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(SeparatorSlant);
			State = 115;
			shipmentDescriptionCode();
			State = 116;
			numberOfPieces();
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 117;
				weightDetails();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TotalConsignmentPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		public TotalConsignmentPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_totalConsignmentPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalConsignmentPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TotalConsignmentPiecesContext totalConsignmentPieces() {
		TotalConsignmentPiecesContext _localctx = new TotalConsignmentPiecesContext(Context, State);
		EnterRule(_localctx, 16, RULE_totalConsignmentPieces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			shipmentDescriptionCode();
			State = 121;
			numberOfPieces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public WeightDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightDetailsContext weightDetails() {
		WeightDetailsContext _localctx = new WeightDetailsContext(Context, State);
		EnterRule(_localctx, 18, RULE_weightDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			weightCode();
			State = 124;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatureOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
			return GetRuleContext<ManifestDescriptionOfGoodsContext>(0);
		}
		public NatureOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natureOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatureOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatureOfGoodsContext natureOfGoods() {
		NatureOfGoodsContext _localctx = new NatureOfGoodsContext(Context, State);
		EnterRule(_localctx, 20, RULE_natureOfGoods);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(SeparatorSlant);
			State = 127;
			manifestDescriptionOfGoods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CarrierCodeContext carrierCode() {
			return GetRuleContext<CarrierCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlightNumberContext flightNumber() {
			return GetRuleContext<FlightNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlightDateContext flightDate() {
			return GetRuleContext<FlightDateContext>(0);
		}
		public FlightIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightIdentificationContext flightIdentification() {
		FlightIdentificationContext _localctx = new FlightIdentificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_flightIdentification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			carrierCode();
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 130;
				flightNumber();
				}
			}

			State = 133;
			Match(SeparatorSlant);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 134;
				flightDate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportsOfDepartureAndArrivalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDepartureContext airportCodeOfDeparture() {
			return GetRuleContext<AirportCodeOfDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfArrivalContext airportCodeOfArrival() {
			return GetRuleContext<AirportCodeOfArrivalContext>(0);
		}
		public AirportsOfDepartureAndArrivalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportsOfDepartureAndArrival; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportsOfDepartureAndArrival(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportsOfDepartureAndArrivalContext airportsOfDepartureAndArrival() {
		AirportsOfDepartureAndArrivalContext _localctx = new AirportsOfDepartureAndArrivalContext(Context, State);
		EnterRule(_localctx, 24, RULE_airportsOfDepartureAndArrival);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			airportCodeOfDeparture();
			State = 138;
			airportCodeOfArrival();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDetails1stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OsiDescriptionContext osiDescription() {
			return GetRuleContext<OsiDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fsrParser.SeparatorCrlf, 0); }
		public OsiDetails1stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDetails1stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDetails1stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDetails1stLineContext osiDetails1stLine() {
		OsiDetails1stLineContext _localctx = new OsiDetails1stLineContext(Context, State);
		EnterRule(_localctx, 26, RULE_osiDetails1stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(SeparatorSlant);
			State = 141;
			osiDescription();
			State = 142;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDetails2stLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fsrParser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OsiDescriptionContext osiDescription() {
			return GetRuleContext<OsiDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fsrParser.SeparatorCrlf, 0); }
		public OsiDetails2stLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDetails2stLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDetails2stLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDetails2stLineContext osiDetails2stLine() {
		OsiDetails2stLineContext _localctx = new OsiDetails2stLineContext(Context, State);
		EnterRule(_localctx, 28, RULE_osiDetails2stLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(SeparatorSlant);
			State = 145;
			osiDescription();
			State = 146;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightDateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
			return GetRuleContext<DayOfScheduledDepartureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
			return GetRuleContext<MonthOfScheduledDepartureContext>(0);
		}
		public FlightDateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightDate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightDateContext flightDate() {
		FlightDateContext _localctx = new FlightDateContext(Context, State);
		EnterRule(_localctx, 30, RULE_flightDate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			dayOfScheduledDeparture();
			State = 149;
			monthOfScheduledDeparture();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public StandardMessageIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentifierContext standardMessageIdentifier() {
		StandardMessageIdentifierContext _localctx = new StandardMessageIdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_standardMessageIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(A);
			State = 152;
			Match(A);
			State = 153;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public LineIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineIdentifierContext lineIdentifier() {
		LineIdentifierContext _localctx = new LineIdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_lineIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(A);
			State = 156;
			Match(A);
			State = 157;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirlinePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		public AirlinePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airlinePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirlinePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirlinePrefixContext airlinePrefix() {
		AirlinePrefixContext _localctx = new AirlinePrefixContext(Context, State);
		EnterRule(_localctx, 36, RULE_airlinePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(N);
			State = 160;
			Match(N);
			State = 161;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		public AwbSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbSerialNumberContext awbSerialNumber() {
		AwbSerialNumberContext _localctx = new AwbSerialNumberContext(Context, State);
		EnterRule(_localctx, 38, RULE_awbSerialNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(N);
			State = 164;
			Match(N);
			State = 165;
			Match(N);
			State = 166;
			Match(N);
			State = 167;
			Match(N);
			State = 168;
			Match(N);
			State = 169;
			Match(N);
			State = 170;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentDescriptionCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fsrParser.A, 0); }
		public ShipmentDescriptionCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentDescriptionCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentDescriptionCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
		ShipmentDescriptionCodeContext _localctx = new ShipmentDescriptionCodeContext(Context, State);
		EnterRule(_localctx, 40, RULE_shipmentDescriptionCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		public NumberOfPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPiecesContext numberOfPieces() {
		NumberOfPiecesContext _localctx = new NumberOfPiecesContext(Context, State);
		EnterRule(_localctx, 42, RULE_numberOfPieces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(N);
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 175;
				Match(N);
				}
				break;
			}
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 178;
				Match(N);
				}
				break;
			}
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 181;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fsrParser.A, 0); }
		public WeightCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightCodeContext weightCode() {
		WeightCodeContext _localctx = new WeightCodeContext(Context, State);
		EnterRule(_localctx, 44, RULE_weightCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 46, RULE_weight);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186;
				Match(N);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 191;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 192;
					Match(N);
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarrierCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public CarrierCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carrierCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarrierCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarrierCodeContext carrierCode() {
		CarrierCodeContext _localctx = new CarrierCodeContext(Context, State);
		EnterRule(_localctx, 48, RULE_carrierCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(A);
			State = 200;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlightNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fsrParser.A, 0); }
		public FlightNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flightNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlightNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlightNumberContext flightNumber() {
		FlightNumberContext _localctx = new FlightNumberContext(Context, State);
		EnterRule(_localctx, 50, RULE_flightNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(N);
			State = 203;
			Match(N);
			State = 204;
			Match(N);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 205;
				Match(N);
				}
			}

			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 208;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fsrParser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fsrParser.N, i);
		}
		public DayOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dayOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayOfScheduledDepartureContext dayOfScheduledDeparture() {
		DayOfScheduledDepartureContext _localctx = new DayOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 52, RULE_dayOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(N);
			State = 212;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthOfScheduledDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public MonthOfScheduledDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monthOfScheduledDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthOfScheduledDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthOfScheduledDepartureContext monthOfScheduledDeparture() {
		MonthOfScheduledDepartureContext _localctx = new MonthOfScheduledDepartureContext(Context, State);
		EnterRule(_localctx, 54, RULE_monthOfScheduledDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(A);
			State = 215;
			Match(A);
			State = 216;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDepartureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public AirportCodeOfDepartureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDeparture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDeparture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDepartureContext airportCodeOfDeparture() {
		AirportCodeOfDepartureContext _localctx = new AirportCodeOfDepartureContext(Context, State);
		EnterRule(_localctx, 56, RULE_airportCodeOfDeparture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(A);
			State = 219;
			Match(A);
			State = 220;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfArrivalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public AirportCodeOfArrivalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfArrival; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfArrival(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfArrivalContext airportCodeOfArrival() {
		AirportCodeOfArrivalContext _localctx = new AirportCodeOfArrivalContext(Context, State);
		EnterRule(_localctx, 58, RULE_airportCodeOfArrival);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(A);
			State = 223;
			Match(A);
			State = 224;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfOriginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public AirportCodeOfOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfOrigin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfOriginContext airportCodeOfOrigin() {
		AirportCodeOfOriginContext _localctx = new AirportCodeOfOriginContext(Context, State);
		EnterRule(_localctx, 60, RULE_airportCodeOfOrigin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(A);
			State = 227;
			Match(A);
			State = 228;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDestitationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fsrParser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fsrParser.A, i);
		}
		public AirportCodeOfDestitationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDestitation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDestitation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDestitationContext airportCodeOfDestitation() {
		AirportCodeOfDestitationContext _localctx = new AirportCodeOfDestitationContext(Context, State);
		EnterRule(_localctx, 62, RULE_airportCodeOfDestitation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(A);
			State = 231;
			Match(A);
			State = 232;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManifestDescriptionOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fsrParser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fsrParser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fsrParser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fsrParser.SeparatorCrlf, i);
		}
		public ManifestDescriptionOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_manifestDescriptionOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitManifestDescriptionOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
		ManifestDescriptionOfGoodsContext _localctx = new ManifestDescriptionOfGoodsContext(Context, State);
		EnterRule(_localctx, 64, RULE_manifestDescriptionOfGoods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 234;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OsiDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fsrParser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fsrParser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fsrParser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fsrParser.SeparatorCrlf, i);
		}
		public OsiDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_osiDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IfsrVisitor<TResult> typedVisitor = visitor as IfsrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOsiDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OsiDescriptionContext osiDescription() {
		OsiDescriptionContext _localctx = new OsiDescriptionContext(Context, State);
		EnterRule(_localctx, 66, RULE_osiDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 239;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,8,245,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,5,0,72,8,
		0,10,0,12,0,75,9,0,1,0,3,0,78,8,0,1,1,1,1,1,1,1,2,1,2,3,2,85,8,2,1,2,3,
		2,88,8,2,1,2,3,2,91,8,2,1,2,3,2,94,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,3,4,106,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,119,
		8,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,3,11,132,8,11,1,11,
		1,11,3,11,136,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,
		21,3,21,177,8,21,1,21,3,21,180,8,21,1,21,3,21,183,8,21,1,22,1,22,1,23,
		4,23,188,8,23,11,23,12,23,189,1,23,1,23,4,23,194,8,23,11,23,12,23,195,
		3,23,198,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,207,8,25,1,25,3,
		25,210,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,
		1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,4,32,236,8,
		32,11,32,12,32,237,1,33,4,33,241,8,33,11,33,12,33,242,1,33,0,0,34,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,0,2,1,0,1,2,2,0,3,3,8,8,230,0,68,1,0,0,0,2,79,1,0,
		0,0,4,82,1,0,0,0,6,97,1,0,0,0,8,102,1,0,0,0,10,107,1,0,0,0,12,111,1,0,
		0,0,14,114,1,0,0,0,16,120,1,0,0,0,18,123,1,0,0,0,20,126,1,0,0,0,22,129,
		1,0,0,0,24,137,1,0,0,0,26,140,1,0,0,0,28,144,1,0,0,0,30,148,1,0,0,0,32,
		151,1,0,0,0,34,155,1,0,0,0,36,159,1,0,0,0,38,163,1,0,0,0,40,172,1,0,0,
		0,42,174,1,0,0,0,44,184,1,0,0,0,46,187,1,0,0,0,48,199,1,0,0,0,50,202,1,
		0,0,0,52,211,1,0,0,0,54,214,1,0,0,0,56,218,1,0,0,0,58,222,1,0,0,0,60,226,
		1,0,0,0,62,230,1,0,0,0,64,235,1,0,0,0,66,240,1,0,0,0,68,69,3,2,1,0,69,
		73,3,4,2,0,70,72,3,6,3,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,
		74,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,76,78,3,8,4,0,77,76,1,0,0,0,77,
		78,1,0,0,0,78,1,1,0,0,0,79,80,3,32,16,0,80,81,5,8,0,0,81,3,1,0,0,0,82,
		84,3,10,5,0,83,85,3,12,6,0,84,83,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,
		88,3,14,7,0,87,86,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,91,3,16,8,0,90,
		89,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,94,3,20,10,0,93,92,1,0,0,0,93,
		94,1,0,0,0,94,95,1,0,0,0,95,96,5,8,0,0,96,5,1,0,0,0,97,98,3,22,11,0,98,
		99,5,3,0,0,99,100,3,24,12,0,100,101,5,8,0,0,101,7,1,0,0,0,102,103,3,34,
		17,0,103,105,3,26,13,0,104,106,3,28,14,0,105,104,1,0,0,0,105,106,1,0,0,
		0,106,9,1,0,0,0,107,108,3,36,18,0,108,109,5,4,0,0,109,110,3,38,19,0,110,
		11,1,0,0,0,111,112,3,60,30,0,112,113,3,62,31,0,113,13,1,0,0,0,114,115,
		5,3,0,0,115,116,3,40,20,0,116,118,3,42,21,0,117,119,3,18,9,0,118,117,1,
		0,0,0,118,119,1,0,0,0,119,15,1,0,0,0,120,121,3,40,20,0,121,122,3,42,21,
		0,122,17,1,0,0,0,123,124,3,44,22,0,124,125,3,46,23,0,125,19,1,0,0,0,126,
		127,5,3,0,0,127,128,3,64,32,0,128,21,1,0,0,0,129,131,3,48,24,0,130,132,
		3,50,25,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,135,5,3,
		0,0,134,136,3,30,15,0,135,134,1,0,0,0,135,136,1,0,0,0,136,23,1,0,0,0,137,
		138,3,56,28,0,138,139,3,58,29,0,139,25,1,0,0,0,140,141,5,3,0,0,141,142,
		3,66,33,0,142,143,5,8,0,0,143,27,1,0,0,0,144,145,5,3,0,0,145,146,3,66,
		33,0,146,147,5,8,0,0,147,29,1,0,0,0,148,149,3,52,26,0,149,150,3,54,27,
		0,150,31,1,0,0,0,151,152,5,5,0,0,152,153,5,5,0,0,153,154,5,5,0,0,154,33,
		1,0,0,0,155,156,5,5,0,0,156,157,5,5,0,0,157,158,5,5,0,0,158,35,1,0,0,0,
		159,160,5,6,0,0,160,161,5,6,0,0,161,162,5,6,0,0,162,37,1,0,0,0,163,164,
		5,6,0,0,164,165,5,6,0,0,165,166,5,6,0,0,166,167,5,6,0,0,167,168,5,6,0,
		0,168,169,5,6,0,0,169,170,5,6,0,0,170,171,5,6,0,0,171,39,1,0,0,0,172,173,
		5,5,0,0,173,41,1,0,0,0,174,176,5,6,0,0,175,177,5,6,0,0,176,175,1,0,0,0,
		176,177,1,0,0,0,177,179,1,0,0,0,178,180,5,6,0,0,179,178,1,0,0,0,179,180,
		1,0,0,0,180,182,1,0,0,0,181,183,5,6,0,0,182,181,1,0,0,0,182,183,1,0,0,
		0,183,43,1,0,0,0,184,185,5,5,0,0,185,45,1,0,0,0,186,188,5,6,0,0,187,186,
		1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,197,1,0,0,
		0,191,193,7,0,0,0,192,194,5,6,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,
		193,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,191,1,0,0,0,197,198,1,
		0,0,0,198,47,1,0,0,0,199,200,5,5,0,0,200,201,5,5,0,0,201,49,1,0,0,0,202,
		203,5,6,0,0,203,204,5,6,0,0,204,206,5,6,0,0,205,207,5,6,0,0,206,205,1,
		0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,210,5,5,0,0,209,208,1,0,0,0,
		209,210,1,0,0,0,210,51,1,0,0,0,211,212,5,6,0,0,212,213,5,6,0,0,213,53,
		1,0,0,0,214,215,5,5,0,0,215,216,5,5,0,0,216,217,5,5,0,0,217,55,1,0,0,0,
		218,219,5,5,0,0,219,220,5,5,0,0,220,221,5,5,0,0,221,57,1,0,0,0,222,223,
		5,5,0,0,223,224,5,5,0,0,224,225,5,5,0,0,225,59,1,0,0,0,226,227,5,5,0,0,
		227,228,5,5,0,0,228,229,5,5,0,0,229,61,1,0,0,0,230,231,5,5,0,0,231,232,
		5,5,0,0,232,233,5,5,0,0,233,63,1,0,0,0,234,236,8,1,0,0,235,234,1,0,0,0,
		236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,65,1,0,0,0,239,241,
		8,1,0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,
		0,243,67,1,0,0,0,20,73,77,84,87,90,93,105,118,131,135,176,179,182,189,
		195,197,206,209,237,242
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
