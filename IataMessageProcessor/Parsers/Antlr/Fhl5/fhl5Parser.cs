//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fhl5.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fhl5Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierSsr=3, LineIdentifierOsi=4, LineIdentifierUld=5, 
		HbsLineIdentifier=6, ShpLineIdentifier=7, CneLineIdentifier=8, NamIdentifier=9, 
		AdrIdentifier=10, LocIdentifier=11, HarmonisedCommodityCodeIdentifier=12, 
		SeparatorSlant=13, SeparatorHyphen=14, A=15, N=16, G=17, SeparatorCrlf=18;
	public const int
		RULE_fhl5 = 0, RULE_standardMessageIdentification = 1, RULE_masterAwbConsignmentDetail = 2, 
		RULE_houseWaybills = 3, RULE_shipperNameAndAddress = 4, RULE_consigneeNameAndAddress = 5, 
		RULE_chargeDeclarations = 6, RULE_houseWaybillSummaryDetails = 7, RULE_freeTextDescriptionOfGoods = 8, 
		RULE_harmonisedTariffScheduleInformation = 9, RULE_otherCustSecurityAndRegulatCtrlInfo = 10, 
		RULE_masterAwbIdentification = 11, RULE_awbOriginAndDestination = 12, 
		RULE_houseWaybillOriginAndDestination = 13, RULE_houseWaybillTotals = 14, 
		RULE_freeTextDescriptions = 15, RULE_harmonisedTariffs = 16, RULE_quantityDetail = 17, 
		RULE_natureOfGoods = 18, RULE_shrs = 19, RULE_name = 20, RULE_nameDetail = 21, 
		RULE_location = 22, RULE_stateProvince = 23, RULE_codedLocation = 24, 
		RULE_postCode = 25, RULE_contactDetail = 26, RULE_streetAddress = 27, 
		RULE_streetAddressDetail = 28, RULE_valueForCarriageDeclaration = 29, 
		RULE_valueForCustomsDeclaration = 30, RULE_valueForInsuranceDeclaration = 31, 
		RULE_specialHandlingRequirements = 32, RULE_prepaidCollectChargeDeclarations = 33, 
		RULE_otherCustSecurityAndRegulatCtrlInfoDet = 34, RULE_standardMessageIdentifier = 35, 
		RULE_messageTypeVersionNumber = 36, RULE_lineIdentifier = 37, RULE_hwbSerialNumber = 38, 
		RULE_airlinePrefix = 39, RULE_awbSerialNumber = 40, RULE_airportCodeOfOrigin = 41, 
		RULE_airportCodeOfDestitation = 42, RULE_slac = 43, RULE_shipmentDescriptionCode = 44, 
		RULE_isoCurrencyCode = 45, RULE_pcIndOtherCharges = 46, RULE_contactIdentifier = 47, 
		RULE_contactNumber = 48, RULE_pcIndWeightValuation = 49, RULE_declaredValueForCarriage = 50, 
		RULE_declaredValueForCustoms = 51, RULE_amountOfInsurance = 52, RULE_noValue = 53, 
		RULE_weightCode = 54, RULE_weight = 55, RULE_numberOfPieces = 56, RULE_specialHandlingCode = 57, 
		RULE_isoCountryCode = 58, RULE_informationIdentifier = 59, RULE_custSecurityAndRegulatCtrlInfoId = 60, 
		RULE_harmonisedCommodityCode = 61, RULE_freeText = 62, RULE_nameInner = 63, 
		RULE_supplemCustSecurityAndRegulatCtrlInfo = 64, RULE_manifestDescriptionOfGoods = 65, 
		RULE_streetAddressInner = 66, RULE_placeInner = 67, RULE_postCodeInner = 68, 
		RULE_stateProvinceInner = 69;
	public static readonly string[] ruleNames = {
		"fhl5", "standardMessageIdentification", "masterAwbConsignmentDetail", 
		"houseWaybills", "shipperNameAndAddress", "consigneeNameAndAddress", "chargeDeclarations", 
		"houseWaybillSummaryDetails", "freeTextDescriptionOfGoods", "harmonisedTariffScheduleInformation", 
		"otherCustSecurityAndRegulatCtrlInfo", "masterAwbIdentification", "awbOriginAndDestination", 
		"houseWaybillOriginAndDestination", "houseWaybillTotals", "freeTextDescriptions", 
		"harmonisedTariffs", "quantityDetail", "natureOfGoods", "shrs", "name", 
		"nameDetail", "location", "stateProvince", "codedLocation", "postCode", 
		"contactDetail", "streetAddress", "streetAddressDetail", "valueForCarriageDeclaration", 
		"valueForCustomsDeclaration", "valueForInsuranceDeclaration", "specialHandlingRequirements", 
		"prepaidCollectChargeDeclarations", "otherCustSecurityAndRegulatCtrlInfoDet", 
		"standardMessageIdentifier", "messageTypeVersionNumber", "lineIdentifier", 
		"hwbSerialNumber", "airlinePrefix", "awbSerialNumber", "airportCodeOfOrigin", 
		"airportCodeOfDestitation", "slac", "shipmentDescriptionCode", "isoCurrencyCode", 
		"pcIndOtherCharges", "contactIdentifier", "contactNumber", "pcIndWeightValuation", 
		"declaredValueForCarriage", "declaredValueForCustoms", "amountOfInsurance", 
		"noValue", "weightCode", "weight", "numberOfPieces", "specialHandlingCode", 
		"isoCountryCode", "informationIdentifier", "custSecurityAndRegulatCtrlInfoId", 
		"harmonisedCommodityCode", "freeText", "nameInner", "supplemCustSecurityAndRegulatCtrlInfo", 
		"manifestDescriptionOfGoods", "streetAddressInner", "placeInner", "postCodeInner", 
		"stateProvinceInner"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'SSR/'", "'OSI/'", "'ULD/'", "'HBS/'", "'SHP'", "'CNE'", 
		"'NAM'", "'ADR'", "'LOC'", "'/NH/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierSsr", "LineIdentifierOsi", "LineIdentifierUld", 
		"HbsLineIdentifier", "ShpLineIdentifier", "CneLineIdentifier", "NamIdentifier", 
		"AdrIdentifier", "LocIdentifier", "HarmonisedCommodityCodeIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fhl5.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fhl5Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fhl5Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fhl5Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Fhl5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentificationContext standardMessageIdentification() {
			return GetRuleContext<StandardMessageIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterAwbConsignmentDetailContext masterAwbConsignmentDetail() {
			return GetRuleContext<MasterAwbConsignmentDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillsContext[] houseWaybills() {
			return GetRuleContexts<HouseWaybillsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillsContext houseWaybills(int i) {
			return GetRuleContext<HouseWaybillsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShipperNameAndAddressContext shipperNameAndAddress() {
			return GetRuleContext<ShipperNameAndAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsigneeNameAndAddressContext consigneeNameAndAddress() {
			return GetRuleContext<ConsigneeNameAndAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChargeDeclarationsContext chargeDeclarations() {
			return GetRuleContext<ChargeDeclarationsContext>(0);
		}
		public Fhl5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fhl5; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFhl5(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fhl5Context fhl5() {
		Fhl5Context _localctx = new Fhl5Context(Context, State);
		EnterRule(_localctx, 0, RULE_fhl5);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			standardMessageIdentification();
			State = 141;
			masterAwbConsignmentDetail();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				houseWaybills();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HbsLineIdentifier );
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ShpLineIdentifier) {
				{
				State = 147;
				shipperNameAndAddress();
				}
			}

			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CneLineIdentifier) {
				{
				State = 150;
				consigneeNameAndAddress();
				}
			}

			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 153;
				chargeDeclarations();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardMessageIdentifierContext standardMessageIdentifier() {
			return GetRuleContext<StandardMessageIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeVersionNumberContext messageTypeVersionNumber() {
			return GetRuleContext<MessageTypeVersionNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public StandardMessageIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentificationContext standardMessageIdentification() {
		StandardMessageIdentificationContext _localctx = new StandardMessageIdentificationContext(Context, State);
		EnterRule(_localctx, 2, RULE_standardMessageIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			standardMessageIdentifier();
			State = 157;
			Match(SeparatorSlant);
			State = 158;
			messageTypeVersionNumber();
			State = 159;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterAwbConsignmentDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterAwbIdentificationContext masterAwbIdentification() {
			return GetRuleContext<MasterAwbIdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwbOriginAndDestinationContext awbOriginAndDestination() {
			return GetRuleContext<AwbOriginAndDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantityDetailContext quantityDetail() {
			return GetRuleContext<QuantityDetailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public MasterAwbConsignmentDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterAwbConsignmentDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterAwbConsignmentDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterAwbConsignmentDetailContext masterAwbConsignmentDetail() {
		MasterAwbConsignmentDetailContext _localctx = new MasterAwbConsignmentDetailContext(Context, State);
		EnterRule(_localctx, 4, RULE_masterAwbConsignmentDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			lineIdentifier();
			State = 162;
			Match(SeparatorSlant);
			State = 163;
			masterAwbIdentification();
			State = 164;
			awbOriginAndDestination();
			State = 165;
			quantityDetail();
			State = 166;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HouseWaybillsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillSummaryDetailsContext[] houseWaybillSummaryDetails() {
			return GetRuleContexts<HouseWaybillSummaryDetailsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillSummaryDetailsContext houseWaybillSummaryDetails(int i) {
			return GetRuleContext<HouseWaybillSummaryDetailsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextDescriptionOfGoodsContext freeTextDescriptionOfGoods() {
			return GetRuleContext<FreeTextDescriptionOfGoodsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedTariffScheduleInformationContext harmonisedTariffScheduleInformation() {
			return GetRuleContext<HarmonisedTariffScheduleInformationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoContext otherCustSecurityAndRegulatCtrlInfo() {
			return GetRuleContext<OtherCustSecurityAndRegulatCtrlInfoContext>(0);
		}
		public HouseWaybillsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_houseWaybills; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHouseWaybills(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HouseWaybillsContext houseWaybills() {
		HouseWaybillsContext _localctx = new HouseWaybillsContext(Context, State);
		EnterRule(_localctx, 6, RULE_houseWaybills);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 168;
					houseWaybillSummaryDetails();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 173;
				freeTextDescriptionOfGoods();
				}
				break;
			}
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 176;
				harmonisedTariffScheduleInformation();
				}
				break;
			}
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 179;
				otherCustSecurityAndRegulatCtrlInfo();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipperNameAndAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShpLineIdentifier() { return GetToken(fhl5Parser.ShpLineIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressContext streetAddress() {
			return GetRuleContext<StreetAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodedLocationContext codedLocation() {
			return GetRuleContext<CodedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext[] contactDetail() {
			return GetRuleContexts<ContactDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext contactDetail(int i) {
			return GetRuleContext<ContactDetailContext>(i);
		}
		public ShipperNameAndAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipperNameAndAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipperNameAndAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipperNameAndAddressContext shipperNameAndAddress() {
		ShipperNameAndAddressContext _localctx = new ShipperNameAndAddressContext(Context, State);
		EnterRule(_localctx, 8, RULE_shipperNameAndAddress);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ShpLineIdentifier);
			State = 183;
			Match(SeparatorCrlf);
			State = 184;
			name();
			State = 185;
			streetAddress();
			State = 186;
			location();
			State = 187;
			codedLocation();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 188;
				contactDetail();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsigneeNameAndAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CneLineIdentifier() { return GetToken(fhl5Parser.CneLineIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressContext streetAddress() {
			return GetRuleContext<StreetAddressContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodedLocationContext codedLocation() {
			return GetRuleContext<CodedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext[] contactDetail() {
			return GetRuleContexts<ContactDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactDetailContext contactDetail(int i) {
			return GetRuleContext<ContactDetailContext>(i);
		}
		public ConsigneeNameAndAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consigneeNameAndAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsigneeNameAndAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsigneeNameAndAddressContext consigneeNameAndAddress() {
		ConsigneeNameAndAddressContext _localctx = new ConsigneeNameAndAddressContext(Context, State);
		EnterRule(_localctx, 10, RULE_consigneeNameAndAddress);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(CneLineIdentifier);
			State = 197;
			Match(SeparatorCrlf);
			State = 198;
			name();
			State = 199;
			streetAddress();
			State = 200;
			location();
			State = 201;
			codedLocation();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SeparatorSlant) {
				{
				{
				State = 202;
				contactDetail();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChargeDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsoCurrencyCodeContext isoCurrencyCode() {
			return GetRuleContext<IsoCurrencyCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForCarriageDeclarationContext valueForCarriageDeclaration() {
			return GetRuleContext<ValueForCarriageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForCustomsDeclarationContext valueForCustomsDeclaration() {
			return GetRuleContext<ValueForCustomsDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueForInsuranceDeclarationContext valueForInsuranceDeclaration() {
			return GetRuleContext<ValueForInsuranceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrepaidCollectChargeDeclarationsContext prepaidCollectChargeDeclarations() {
			return GetRuleContext<PrepaidCollectChargeDeclarationsContext>(0);
		}
		public ChargeDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chargeDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChargeDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChargeDeclarationsContext chargeDeclarations() {
		ChargeDeclarationsContext _localctx = new ChargeDeclarationsContext(Context, State);
		EnterRule(_localctx, 12, RULE_chargeDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			lineIdentifier();
			State = 211;
			Match(SeparatorSlant);
			State = 212;
			isoCurrencyCode();
			State = 213;
			Match(SeparatorSlant);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 214;
				prepaidCollectChargeDeclarations();
				}
			}

			State = 217;
			Match(SeparatorSlant);
			State = 218;
			valueForCarriageDeclaration();
			State = 219;
			Match(SeparatorSlant);
			State = 220;
			valueForCustomsDeclaration();
			State = 221;
			Match(SeparatorSlant);
			State = 222;
			valueForInsuranceDeclaration();
			State = 223;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HouseWaybillSummaryDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HbsLineIdentifier() { return GetToken(fhl5Parser.HbsLineIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HwbSerialNumberContext hwbSerialNumber() {
			return GetRuleContext<HwbSerialNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillOriginAndDestinationContext houseWaybillOriginAndDestination() {
			return GetRuleContext<HouseWaybillOriginAndDestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HouseWaybillTotalsContext houseWaybillTotals() {
			return GetRuleContext<HouseWaybillTotalsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NatureOfGoodsContext natureOfGoods() {
			return GetRuleContext<NatureOfGoodsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShrsContext shrs() {
			return GetRuleContext<ShrsContext>(0);
		}
		public HouseWaybillSummaryDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_houseWaybillSummaryDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHouseWaybillSummaryDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HouseWaybillSummaryDetailsContext houseWaybillSummaryDetails() {
		HouseWaybillSummaryDetailsContext _localctx = new HouseWaybillSummaryDetailsContext(Context, State);
		EnterRule(_localctx, 14, RULE_houseWaybillSummaryDetails);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(HbsLineIdentifier);
			State = 226;
			hwbSerialNumber();
			State = 227;
			Match(SeparatorSlant);
			State = 228;
			houseWaybillOriginAndDestination();
			State = 229;
			Match(SeparatorSlant);
			State = 230;
			houseWaybillTotals();
			State = 231;
			natureOfGoods();
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 232;
				shrs();
				}
				break;
			}
			State = 235;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextDescriptionOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextDescriptionsContext[] freeTextDescriptions() {
			return GetRuleContexts<FreeTextDescriptionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextDescriptionsContext freeTextDescriptions(int i) {
			return GetRuleContext<FreeTextDescriptionsContext>(i);
		}
		public FreeTextDescriptionOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeTextDescriptionOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeTextDescriptionOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextDescriptionOfGoodsContext freeTextDescriptionOfGoods() {
		FreeTextDescriptionOfGoodsContext _localctx = new FreeTextDescriptionOfGoodsContext(Context, State);
		EnterRule(_localctx, 16, RULE_freeTextDescriptionOfGoods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			lineIdentifier();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 238;
				freeTextDescriptions();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HarmonisedTariffScheduleInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedTariffsContext[] harmonisedTariffs() {
			return GetRuleContexts<HarmonisedTariffsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedTariffsContext harmonisedTariffs(int i) {
			return GetRuleContext<HarmonisedTariffsContext>(i);
		}
		public HarmonisedTariffScheduleInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_harmonisedTariffScheduleInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHarmonisedTariffScheduleInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HarmonisedTariffScheduleInformationContext harmonisedTariffScheduleInformation() {
		HarmonisedTariffScheduleInformationContext _localctx = new HarmonisedTariffScheduleInformationContext(Context, State);
		EnterRule(_localctx, 18, RULE_harmonisedTariffScheduleInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			lineIdentifier();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 244;
				harmonisedTariffs();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCustSecurityAndRegulatCtrlInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineIdentifierContext lineIdentifier() {
			return GetRuleContext<LineIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoDetContext[] otherCustSecurityAndRegulatCtrlInfoDet() {
			return GetRuleContexts<OtherCustSecurityAndRegulatCtrlInfoDetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherCustSecurityAndRegulatCtrlInfoDetContext otherCustSecurityAndRegulatCtrlInfoDet(int i) {
			return GetRuleContext<OtherCustSecurityAndRegulatCtrlInfoDetContext>(i);
		}
		public OtherCustSecurityAndRegulatCtrlInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCustSecurityAndRegulatCtrlInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherCustSecurityAndRegulatCtrlInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherCustSecurityAndRegulatCtrlInfoContext otherCustSecurityAndRegulatCtrlInfo() {
		OtherCustSecurityAndRegulatCtrlInfoContext _localctx = new OtherCustSecurityAndRegulatCtrlInfoContext(Context, State);
		EnterRule(_localctx, 20, RULE_otherCustSecurityAndRegulatCtrlInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			lineIdentifier();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 250;
				otherCustSecurityAndRegulatCtrlInfoDet();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterAwbIdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirlinePrefixContext airlinePrefix() {
			return GetRuleContext<AirlinePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorHyphen() { return GetToken(fhl5Parser.SeparatorHyphen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwbSerialNumberContext awbSerialNumber() {
			return GetRuleContext<AwbSerialNumberContext>(0);
		}
		public MasterAwbIdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterAwbIdentification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterAwbIdentification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterAwbIdentificationContext masterAwbIdentification() {
		MasterAwbIdentificationContext _localctx = new MasterAwbIdentificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_masterAwbIdentification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			airlinePrefix();
			State = 256;
			Match(SeparatorHyphen);
			State = 257;
			awbSerialNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbOriginAndDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDestitationContext airportCodeOfDestitation() {
			return GetRuleContext<AirportCodeOfDestitationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfOriginContext airportCodeOfOrigin() {
			return GetRuleContext<AirportCodeOfOriginContext>(0);
		}
		public AwbOriginAndDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbOriginAndDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbOriginAndDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbOriginAndDestinationContext awbOriginAndDestination() {
		AwbOriginAndDestinationContext _localctx = new AwbOriginAndDestinationContext(Context, State);
		EnterRule(_localctx, 24, RULE_awbOriginAndDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 259;
				airportCodeOfOrigin();
				}
				break;
			}
			State = 262;
			airportCodeOfDestitation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HouseWaybillOriginAndDestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfDestitationContext airportCodeOfDestitation() {
			return GetRuleContext<AirportCodeOfDestitationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AirportCodeOfOriginContext airportCodeOfOrigin() {
			return GetRuleContext<AirportCodeOfOriginContext>(0);
		}
		public HouseWaybillOriginAndDestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_houseWaybillOriginAndDestination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHouseWaybillOriginAndDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HouseWaybillOriginAndDestinationContext houseWaybillOriginAndDestination() {
		HouseWaybillOriginAndDestinationContext _localctx = new HouseWaybillOriginAndDestinationContext(Context, State);
		EnterRule(_localctx, 26, RULE_houseWaybillOriginAndDestination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 264;
				airportCodeOfOrigin();
				}
				break;
			}
			State = 267;
			airportCodeOfDestitation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HouseWaybillTotalsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlacContext slac() {
			return GetRuleContext<SlacContext>(0);
		}
		public HouseWaybillTotalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_houseWaybillTotals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHouseWaybillTotals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HouseWaybillTotalsContext houseWaybillTotals() {
		HouseWaybillTotalsContext _localctx = new HouseWaybillTotalsContext(Context, State);
		EnterRule(_localctx, 28, RULE_houseWaybillTotals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			numberOfPieces();
			State = 270;
			Match(SeparatorSlant);
			State = 271;
			weightCode();
			State = 272;
			weight();
			State = 273;
			Match(SeparatorSlant);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 274;
				slac();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextDescriptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FreeTextContext freeText() {
			return GetRuleContext<FreeTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public FreeTextDescriptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeTextDescriptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeTextDescriptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextDescriptionsContext freeTextDescriptions() {
		FreeTextDescriptionsContext _localctx = new FreeTextDescriptionsContext(Context, State);
		EnterRule(_localctx, 30, RULE_freeTextDescriptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(SeparatorSlant);
			State = 278;
			freeText();
			State = 279;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HarmonisedTariffsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HarmonisedCommodityCodeContext harmonisedCommodityCode() {
			return GetRuleContext<HarmonisedCommodityCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public HarmonisedTariffsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_harmonisedTariffs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHarmonisedTariffs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HarmonisedTariffsContext harmonisedTariffs() {
		HarmonisedTariffsContext _localctx = new HarmonisedTariffsContext(Context, State);
		EnterRule(_localctx, 32, RULE_harmonisedTariffs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(SeparatorSlant);
			State = 282;
			harmonisedCommodityCode();
			State = 283;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
			return GetRuleContext<ShipmentDescriptionCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberOfPiecesContext numberOfPieces() {
			return GetRuleContext<NumberOfPiecesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightCodeContext weightCode() {
			return GetRuleContext<WeightCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public QuantityDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantityDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantityDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantityDetailContext quantityDetail() {
		QuantityDetailContext _localctx = new QuantityDetailContext(Context, State);
		EnterRule(_localctx, 34, RULE_quantityDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(SeparatorSlant);
			State = 286;
			shipmentDescriptionCode();
			State = 287;
			numberOfPieces();
			State = 288;
			weightCode();
			State = 289;
			weight();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatureOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
			return GetRuleContext<ManifestDescriptionOfGoodsContext>(0);
		}
		public NatureOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natureOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNatureOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NatureOfGoodsContext natureOfGoods() {
		NatureOfGoodsContext _localctx = new NatureOfGoodsContext(Context, State);
		EnterRule(_localctx, 36, RULE_natureOfGoods);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(SeparatorSlant);
			State = 292;
			manifestDescriptionOfGoods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext[] specialHandlingRequirements() {
			return GetRuleContexts<SpecialHandlingRequirementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingRequirementsContext specialHandlingRequirements(int i) {
			return GetRuleContext<SpecialHandlingRequirementsContext>(i);
		}
		public ShrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShrsContext shrs() {
		ShrsContext _localctx = new ShrsContext(Context, State);
		EnterRule(_localctx, 38, RULE_shrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(SeparatorCrlf);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 295;
				specialHandlingRequirements();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NamIdentifier() { return GetToken(fhl5Parser.NamIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameDetailContext[] nameDetail() {
			return GetRuleContexts<NameDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameDetailContext nameDetail(int i) {
			return GetRuleContext<NameDetailContext>(i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 40, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(NamIdentifier);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 301;
				nameDetail();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameInnerContext nameInner() {
			return GetRuleContext<NameInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public NameDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDetailContext nameDetail() {
		NameDetailContext _localctx = new NameDetailContext(Context, State);
		EnterRule(_localctx, 42, RULE_nameDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(SeparatorSlant);
			State = 307;
			nameInner();
			State = 308;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LocIdentifier() { return GetToken(fhl5Parser.LocIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlaceInnerContext placeInner() {
			return GetRuleContext<PlaceInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateProvinceContext stateProvince() {
			return GetRuleContext<StateProvinceContext>(0);
		}
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 44, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(LocIdentifier);
			State = 311;
			Match(SeparatorSlant);
			State = 312;
			placeInner();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SeparatorSlant) {
				{
				State = 313;
				stateProvince();
				}
			}

			State = 316;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateProvinceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StateProvinceInnerContext stateProvinceInner() {
			return GetRuleContext<StateProvinceInnerContext>(0);
		}
		public StateProvinceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateProvince; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateProvince(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateProvinceContext stateProvince() {
		StateProvinceContext _localctx = new StateProvinceContext(Context, State);
		EnterRule(_localctx, 46, RULE_stateProvince);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(SeparatorSlant);
			State = 319;
			stateProvinceInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodedLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoCountryCodeContext isoCountryCode() {
			return GetRuleContext<IsoCountryCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostCodeContext postCode() {
			return GetRuleContext<PostCodeContext>(0);
		}
		public CodedLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codedLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodedLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodedLocationContext codedLocation() {
		CodedLocationContext _localctx = new CodedLocationContext(Context, State);
		EnterRule(_localctx, 48, RULE_codedLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(SeparatorSlant);
			State = 322;
			isoCountryCode();
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 323;
				postCode();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostCodeInnerContext postCodeInner() {
			return GetRuleContext<PostCodeInnerContext>(0);
		}
		public PostCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostCodeContext postCode() {
		PostCodeContext _localctx = new PostCodeContext(Context, State);
		EnterRule(_localctx, 50, RULE_postCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(SeparatorSlant);
			State = 327;
			postCodeInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactIdentifierContext contactIdentifier() {
			return GetRuleContext<ContactIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContactNumberContext contactNumber() {
			return GetRuleContext<ContactNumberContext>(0);
		}
		public ContactDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactDetailContext contactDetail() {
		ContactDetailContext _localctx = new ContactDetailContext(Context, State);
		EnterRule(_localctx, 52, RULE_contactDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(SeparatorSlant);
			State = 330;
			contactIdentifier();
			State = 331;
			Match(SeparatorSlant);
			State = 332;
			contactNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdrIdentifier() { return GetToken(fhl5Parser.AdrIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressDetailContext[] streetAddressDetail() {
			return GetRuleContexts<StreetAddressDetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressDetailContext streetAddressDetail(int i) {
			return GetRuleContext<StreetAddressDetailContext>(i);
		}
		public StreetAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddress; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressContext streetAddress() {
		StreetAddressContext _localctx = new StreetAddressContext(Context, State);
		EnterRule(_localctx, 54, RULE_streetAddress);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(AdrIdentifier);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 335;
				streetAddressDetail();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SeparatorSlant );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreetAddressInnerContext streetAddressInner() {
			return GetRuleContext<StreetAddressInnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		public StreetAddressDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddressDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddressDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressDetailContext streetAddressDetail() {
		StreetAddressDetailContext _localctx = new StreetAddressDetailContext(Context, State);
		EnterRule(_localctx, 56, RULE_streetAddressDetail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(SeparatorSlant);
			State = 341;
			streetAddressInner();
			State = 342;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForCarriageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaredValueForCarriageContext declaredValueForCarriage() {
			return GetRuleContext<DeclaredValueForCarriageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForCarriageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForCarriageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForCarriageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForCarriageDeclarationContext valueForCarriageDeclaration() {
		ValueForCarriageDeclarationContext _localctx = new ValueForCarriageDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_valueForCarriageDeclaration);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				declaredValueForCarriage();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForCustomsDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaredValueForCustomsContext declaredValueForCustoms() {
			return GetRuleContext<DeclaredValueForCustomsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForCustomsDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForCustomsDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForCustomsDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForCustomsDeclarationContext valueForCustomsDeclaration() {
		ValueForCustomsDeclarationContext _localctx = new ValueForCustomsDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_valueForCustomsDeclaration);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				declaredValueForCustoms();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueForInsuranceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmountOfInsuranceContext amountOfInsurance() {
			return GetRuleContext<AmountOfInsuranceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoValueContext noValue() {
			return GetRuleContext<NoValueContext>(0);
		}
		public ValueForInsuranceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueForInsuranceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueForInsuranceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueForInsuranceDeclarationContext valueForInsuranceDeclaration() {
		ValueForInsuranceDeclarationContext _localctx = new ValueForInsuranceDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_valueForInsuranceDeclaration);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				amountOfInsurance();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				noValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingRequirementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant() { return GetToken(fhl5Parser.SeparatorSlant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHandlingCodeContext specialHandlingCode() {
			return GetRuleContext<SpecialHandlingCodeContext>(0);
		}
		public SpecialHandlingRequirementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingRequirements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingRequirements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingRequirementsContext specialHandlingRequirements() {
		SpecialHandlingRequirementsContext _localctx = new SpecialHandlingRequirementsContext(Context, State);
		EnterRule(_localctx, 64, RULE_specialHandlingRequirements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(SeparatorSlant);
			State = 357;
			specialHandlingCode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepaidCollectChargeDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PcIndWeightValuationContext pcIndWeightValuation() {
			return GetRuleContext<PcIndWeightValuationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PcIndOtherChargesContext pcIndOtherCharges() {
			return GetRuleContext<PcIndOtherChargesContext>(0);
		}
		public PrepaidCollectChargeDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepaidCollectChargeDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepaidCollectChargeDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepaidCollectChargeDeclarationsContext prepaidCollectChargeDeclarations() {
		PrepaidCollectChargeDeclarationsContext _localctx = new PrepaidCollectChargeDeclarationsContext(Context, State);
		EnterRule(_localctx, 66, RULE_prepaidCollectChargeDeclarations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			pcIndWeightValuation();
			State = 360;
			pcIndOtherCharges();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherCustSecurityAndRegulatCtrlInfoDetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupplemCustSecurityAndRegulatCtrlInfoContext supplemCustSecurityAndRegulatCtrlInfo() {
			return GetRuleContext<SupplemCustSecurityAndRegulatCtrlInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf() { return GetToken(fhl5Parser.SeparatorCrlf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsoCountryCodeContext isoCountryCode() {
			return GetRuleContext<IsoCountryCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InformationIdentifierContext informationIdentifier() {
			return GetRuleContext<InformationIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustSecurityAndRegulatCtrlInfoIdContext custSecurityAndRegulatCtrlInfoId() {
			return GetRuleContext<CustSecurityAndRegulatCtrlInfoIdContext>(0);
		}
		public OtherCustSecurityAndRegulatCtrlInfoDetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherCustSecurityAndRegulatCtrlInfoDet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherCustSecurityAndRegulatCtrlInfoDet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherCustSecurityAndRegulatCtrlInfoDetContext otherCustSecurityAndRegulatCtrlInfoDet() {
		OtherCustSecurityAndRegulatCtrlInfoDetContext _localctx = new OtherCustSecurityAndRegulatCtrlInfoDetContext(Context, State);
		EnterRule(_localctx, 68, RULE_otherCustSecurityAndRegulatCtrlInfoDet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(SeparatorSlant);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 363;
				isoCountryCode();
				}
			}

			State = 366;
			Match(SeparatorSlant);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 367;
				informationIdentifier();
				}
			}

			State = 370;
			Match(SeparatorSlant);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 371;
				custSecurityAndRegulatCtrlInfoId();
				}
			}

			State = 374;
			Match(SeparatorSlant);
			State = 375;
			supplemCustSecurityAndRegulatCtrlInfo();
			State = 376;
			Match(SeparatorCrlf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardMessageIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public StandardMessageIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardMessageIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardMessageIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardMessageIdentifierContext standardMessageIdentifier() {
		StandardMessageIdentifierContext _localctx = new StandardMessageIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_standardMessageIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(A);
			State = 379;
			Match(A);
			State = 380;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeVersionNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public MessageTypeVersionNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageTypeVersionNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageTypeVersionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeVersionNumberContext messageTypeVersionNumber() {
		MessageTypeVersionNumberContext _localctx = new MessageTypeVersionNumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_messageTypeVersionNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(N);
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 383;
				Match(N);
				}
				break;
			}
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 386;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public LineIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineIdentifierContext lineIdentifier() {
		LineIdentifierContext _localctx = new LineIdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_lineIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(A);
			State = 390;
			Match(A);
			State = 391;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HwbSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public HwbSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hwbSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHwbSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HwbSerialNumberContext hwbSerialNumber() {
		HwbSerialNumberContext _localctx = new HwbSerialNumberContext(Context, State);
		EnterRule(_localctx, 76, RULE_hwbSerialNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 393;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirlinePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public AirlinePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airlinePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirlinePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirlinePrefixContext airlinePrefix() {
		AirlinePrefixContext _localctx = new AirlinePrefixContext(Context, State);
		EnterRule(_localctx, 78, RULE_airlinePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(N);
			State = 399;
			Match(N);
			State = 400;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwbSerialNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public AwbSerialNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awbSerialNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwbSerialNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwbSerialNumberContext awbSerialNumber() {
		AwbSerialNumberContext _localctx = new AwbSerialNumberContext(Context, State);
		EnterRule(_localctx, 80, RULE_awbSerialNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(N);
			State = 403;
			Match(N);
			State = 404;
			Match(N);
			State = 405;
			Match(N);
			State = 406;
			Match(N);
			State = 407;
			Match(N);
			State = 408;
			Match(N);
			State = 409;
			Match(N);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfOriginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public AirportCodeOfOriginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfOrigin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfOrigin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfOriginContext airportCodeOfOrigin() {
		AirportCodeOfOriginContext _localctx = new AirportCodeOfOriginContext(Context, State);
		EnterRule(_localctx, 82, RULE_airportCodeOfOrigin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(A);
			State = 412;
			Match(A);
			State = 413;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AirportCodeOfDestitationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public AirportCodeOfDestitationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_airportCodeOfDestitation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAirportCodeOfDestitation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AirportCodeOfDestitationContext airportCodeOfDestitation() {
		AirportCodeOfDestitationContext _localctx = new AirportCodeOfDestitationContext(Context, State);
		EnterRule(_localctx, 84, RULE_airportCodeOfDestitation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(A);
			State = 416;
			Match(A);
			State = 417;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlacContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public SlacContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slac; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlacContext slac() {
		SlacContext _localctx = new SlacContext(Context, State);
		EnterRule(_localctx, 86, RULE_slac);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 419;
				Match(N);
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipmentDescriptionCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fhl5Parser.A, 0); }
		public ShipmentDescriptionCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipmentDescriptionCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipmentDescriptionCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipmentDescriptionCodeContext shipmentDescriptionCode() {
		ShipmentDescriptionCodeContext _localctx = new ShipmentDescriptionCodeContext(Context, State);
		EnterRule(_localctx, 88, RULE_shipmentDescriptionCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsoCurrencyCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public IsoCurrencyCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isoCurrencyCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsoCurrencyCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsoCurrencyCodeContext isoCurrencyCode() {
		IsoCurrencyCodeContext _localctx = new IsoCurrencyCodeContext(Context, State);
		EnterRule(_localctx, 90, RULE_isoCurrencyCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(A);
			State = 427;
			Match(A);
			State = 428;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcIndOtherChargesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fhl5Parser.A, 0); }
		public PcIndOtherChargesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pcIndOtherCharges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPcIndOtherCharges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcIndOtherChargesContext pcIndOtherCharges() {
		PcIndOtherChargesContext _localctx = new PcIndOtherChargesContext(Context, State);
		EnterRule(_localctx, 92, RULE_pcIndOtherCharges);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public ContactIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactIdentifierContext contactIdentifier() {
		ContactIdentifierContext _localctx = new ContactIdentifierContext(Context, State);
		EnterRule(_localctx, 94, RULE_contactIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 433;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A || _la==N) {
				{
				State = 436;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContactNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public ContactNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contactNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContactNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContactNumberContext contactNumber() {
		ContactNumberContext _localctx = new ContactNumberContext(Context, State);
		EnterRule(_localctx, 96, RULE_contactNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 439;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcIndWeightValuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fhl5Parser.A, 0); }
		public PcIndWeightValuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pcIndWeightValuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPcIndWeightValuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcIndWeightValuationContext pcIndWeightValuation() {
		PcIndWeightValuationContext _localctx = new PcIndWeightValuationContext(Context, State);
		EnterRule(_localctx, 98, RULE_pcIndWeightValuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaredValueForCarriageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public DeclaredValueForCarriageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaredValueForCarriage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaredValueForCarriage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaredValueForCarriageContext declaredValueForCarriage() {
		DeclaredValueForCarriageContext _localctx = new DeclaredValueForCarriageContext(Context, State);
		EnterRule(_localctx, 100, RULE_declaredValueForCarriage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 446;
				Match(N);
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 451;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 452;
					Match(N);
					}
					}
					State = 455;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaredValueForCustomsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public DeclaredValueForCustomsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaredValueForCustoms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaredValueForCustoms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaredValueForCustomsContext declaredValueForCustoms() {
		DeclaredValueForCustomsContext _localctx = new DeclaredValueForCustomsContext(Context, State);
		EnterRule(_localctx, 102, RULE_declaredValueForCustoms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 459;
				Match(N);
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 464;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 465;
					Match(N);
					}
					}
					State = 468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountOfInsuranceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public AmountOfInsuranceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountOfInsurance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountOfInsurance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountOfInsuranceContext amountOfInsurance() {
		AmountOfInsuranceContext _localctx = new AmountOfInsuranceContext(Context, State);
		EnterRule(_localctx, 104, RULE_amountOfInsurance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 472;
				Match(N);
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 477;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 478;
					Match(N);
					}
					}
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public NoValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoValueContext noValue() {
		NoValueContext _localctx = new NoValueContext(Context, State);
		EnterRule(_localctx, 106, RULE_noValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(A);
			State = 486;
			Match(A);
			State = 487;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(fhl5Parser.A, 0); }
		public WeightCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightCodeContext weightCode() {
		WeightCodeContext _localctx = new WeightCodeContext(Context, State);
		EnterRule(_localctx, 108, RULE_weightCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 110, RULE_weight);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 491;
				Match(N);
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==N );
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 496;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 497;
					Match(N);
					}
					}
					State = 500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==N );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfPiecesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public NumberOfPiecesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfPieces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfPieces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfPiecesContext numberOfPieces() {
		NumberOfPiecesContext _localctx = new NumberOfPiecesContext(Context, State);
		EnterRule(_localctx, 112, RULE_numberOfPieces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(N);
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 505;
				Match(N);
				}
				break;
			}
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 508;
				Match(N);
				}
				break;
			}
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==N) {
				{
				State = 511;
				Match(N);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHandlingCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public SpecialHandlingCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHandlingCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHandlingCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHandlingCodeContext specialHandlingCode() {
		SpecialHandlingCodeContext _localctx = new SpecialHandlingCodeContext(Context, State);
		EnterRule(_localctx, 114, RULE_specialHandlingCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 515;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 516;
			_la = TokenStream.LA(1);
			if ( !(_la==A || _la==N) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsoCountryCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public IsoCountryCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isoCountryCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsoCountryCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsoCountryCodeContext isoCountryCode() {
		IsoCountryCodeContext _localctx = new IsoCountryCodeContext(Context, State);
		EnterRule(_localctx, 116, RULE_isoCountryCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(A);
			State = 519;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InformationIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public InformationIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_informationIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInformationIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InformationIdentifierContext informationIdentifier() {
		InformationIdentifierContext _localctx = new InformationIdentifierContext(Context, State);
		EnterRule(_localctx, 118, RULE_informationIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(A);
			State = 522;
			Match(A);
			State = 523;
			Match(A);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustSecurityAndRegulatCtrlInfoIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		public CustSecurityAndRegulatCtrlInfoIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_custSecurityAndRegulatCtrlInfoId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustSecurityAndRegulatCtrlInfoId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustSecurityAndRegulatCtrlInfoIdContext custSecurityAndRegulatCtrlInfoId() {
		CustSecurityAndRegulatCtrlInfoIdContext _localctx = new CustSecurityAndRegulatCtrlInfoIdContext(Context, State);
		EnterRule(_localctx, 120, RULE_custSecurityAndRegulatCtrlInfoId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(A);
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==A) {
				{
				State = 526;
				Match(A);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HarmonisedCommodityCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] A() { return GetTokens(fhl5Parser.A); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A(int i) {
			return GetToken(fhl5Parser.A, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] N() { return GetTokens(fhl5Parser.N); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N(int i) {
			return GetToken(fhl5Parser.N, i);
		}
		public HarmonisedCommodityCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_harmonisedCommodityCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHarmonisedCommodityCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HarmonisedCommodityCodeContext harmonisedCommodityCode() {
		HarmonisedCommodityCodeContext _localctx = new HarmonisedCommodityCodeContext(Context, State);
		EnterRule(_localctx, 122, RULE_harmonisedCommodityCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 529;
				_la = TokenStream.LA(1);
				if ( !(_la==A || _la==N) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==A || _la==N );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public FreeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freeText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFreeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FreeTextContext freeText() {
		FreeTextContext _localctx = new FreeTextContext(Context, State);
		EnterRule(_localctx, 124, RULE_freeText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 534;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public NameInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameInnerContext nameInner() {
		NameInnerContext _localctx = new NameInnerContext(Context, State);
		EnterRule(_localctx, 126, RULE_nameInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 539;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupplemCustSecurityAndRegulatCtrlInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public SupplemCustSecurityAndRegulatCtrlInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplemCustSecurityAndRegulatCtrlInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplemCustSecurityAndRegulatCtrlInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupplemCustSecurityAndRegulatCtrlInfoContext supplemCustSecurityAndRegulatCtrlInfo() {
		SupplemCustSecurityAndRegulatCtrlInfoContext _localctx = new SupplemCustSecurityAndRegulatCtrlInfoContext(Context, State);
		EnterRule(_localctx, 128, RULE_supplemCustSecurityAndRegulatCtrlInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 544;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManifestDescriptionOfGoodsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public ManifestDescriptionOfGoodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_manifestDescriptionOfGoods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitManifestDescriptionOfGoods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ManifestDescriptionOfGoodsContext manifestDescriptionOfGoods() {
		ManifestDescriptionOfGoodsContext _localctx = new ManifestDescriptionOfGoodsContext(Context, State);
		EnterRule(_localctx, 130, RULE_manifestDescriptionOfGoods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 549;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreetAddressInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public StreetAddressInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streetAddressInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreetAddressInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreetAddressInnerContext streetAddressInner() {
		StreetAddressInnerContext _localctx = new StreetAddressInnerContext(Context, State);
		EnterRule(_localctx, 132, RULE_streetAddressInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 554;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public PlaceInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceInnerContext placeInner() {
		PlaceInnerContext _localctx = new PlaceInnerContext(Context, State);
		EnterRule(_localctx, 134, RULE_placeInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 559;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostCodeInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public PostCodeInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postCodeInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostCodeInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostCodeInnerContext postCodeInner() {
		PostCodeInnerContext _localctx = new PostCodeInnerContext(Context, State);
		EnterRule(_localctx, 136, RULE_postCodeInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 564;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateProvinceInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorSlant() { return GetTokens(fhl5Parser.SeparatorSlant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorSlant(int i) {
			return GetToken(fhl5Parser.SeparatorSlant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SeparatorCrlf() { return GetTokens(fhl5Parser.SeparatorCrlf); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SeparatorCrlf(int i) {
			return GetToken(fhl5Parser.SeparatorCrlf, i);
		}
		public StateProvinceInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateProvinceInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ifhl5Visitor<TResult> typedVisitor = visitor as Ifhl5Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateProvinceInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateProvinceInnerContext stateProvinceInner() {
		StateProvinceInnerContext _localctx = new StateProvinceInnerContext(Context, State);
		EnterRule(_localctx, 138, RULE_stateProvinceInner);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 569;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SeparatorSlant || _la==SeparatorCrlf) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << LineIdentifierSsr) | (1L << LineIdentifierOsi) | (1L << LineIdentifierUld) | (1L << HbsLineIdentifier) | (1L << ShpLineIdentifier) | (1L << CneLineIdentifier) | (1L << NamIdentifier) | (1L << AdrIdentifier) | (1L << LocIdentifier) | (1L << HarmonisedCommodityCodeIdentifier) | (1L << SeparatorHyphen) | (1L << A) | (1L << N) | (1L << G))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,575,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,
		0,4,0,144,8,0,11,0,12,0,145,1,0,3,0,149,8,0,1,0,3,0,152,8,0,1,0,3,0,155,
		8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,4,3,170,8,3,11,
		3,12,3,171,1,3,3,3,175,8,3,1,3,3,3,178,8,3,1,3,3,3,181,8,3,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,5,4,190,8,4,10,4,12,4,193,9,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,5,5,204,8,5,10,5,12,5,207,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		3,6,216,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,3,7,234,8,7,1,7,1,7,1,8,1,8,4,8,240,8,8,11,8,12,8,241,1,9,1,9,4,
		9,246,8,9,11,9,12,9,247,1,10,1,10,4,10,252,8,10,11,10,12,10,253,1,11,1,
		11,1,11,1,11,1,12,3,12,261,8,12,1,12,1,12,1,13,3,13,266,8,13,1,13,1,13,
		1,14,1,14,1,14,1,14,1,14,1,14,3,14,276,8,14,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,4,
		19,297,8,19,11,19,12,19,298,1,20,1,20,4,20,303,8,20,11,20,12,20,304,1,
		21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,315,8,22,1,22,1,22,1,23,1,23,
		1,23,1,24,1,24,1,24,3,24,325,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		26,1,27,1,27,4,27,337,8,27,11,27,12,27,338,1,28,1,28,1,28,1,28,1,29,1,
		29,3,29,347,8,29,1,30,1,30,3,30,351,8,30,1,31,1,31,3,31,355,8,31,1,32,
		1,32,1,32,1,33,1,33,1,33,1,34,1,34,3,34,365,8,34,1,34,1,34,3,34,369,8,
		34,1,34,1,34,3,34,373,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
		1,36,3,36,385,8,36,1,36,3,36,388,8,36,1,37,1,37,1,37,1,37,1,38,4,38,395,
		8,38,11,38,12,38,396,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,4,43,421,8,
		43,11,43,12,43,422,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,3,
		47,435,8,47,1,47,3,47,438,8,47,1,48,4,48,441,8,48,11,48,12,48,442,1,49,
		1,49,1,50,4,50,448,8,50,11,50,12,50,449,1,50,1,50,4,50,454,8,50,11,50,
		12,50,455,3,50,458,8,50,1,51,4,51,461,8,51,11,51,12,51,462,1,51,1,51,4,
		51,467,8,51,11,51,12,51,468,3,51,471,8,51,1,52,4,52,474,8,52,11,52,12,
		52,475,1,52,1,52,4,52,480,8,52,11,52,12,52,481,3,52,484,8,52,1,53,1,53,
		1,53,1,53,1,54,1,54,1,55,4,55,493,8,55,11,55,12,55,494,1,55,1,55,4,55,
		499,8,55,11,55,12,55,500,3,55,503,8,55,1,56,1,56,3,56,507,8,56,1,56,3,
		56,510,8,56,1,56,3,56,513,8,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,
		1,59,1,59,1,59,1,60,1,60,3,60,528,8,60,1,61,4,61,531,8,61,11,61,12,61,
		532,1,62,4,62,536,8,62,11,62,12,62,537,1,63,4,63,541,8,63,11,63,12,63,
		542,1,64,4,64,546,8,64,11,64,12,64,547,1,65,4,65,551,8,65,11,65,12,65,
		552,1,66,4,66,556,8,66,11,66,12,66,557,1,67,4,67,561,8,67,11,67,12,67,
		562,1,68,4,68,566,8,68,11,68,12,68,567,1,69,4,69,571,8,69,11,69,12,69,
		572,1,69,0,0,70,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,0,3,1,0,15,16,1,0,1,2,2,0,13,13,18,18,565,
		0,140,1,0,0,0,2,156,1,0,0,0,4,161,1,0,0,0,6,169,1,0,0,0,8,182,1,0,0,0,
		10,196,1,0,0,0,12,210,1,0,0,0,14,225,1,0,0,0,16,237,1,0,0,0,18,243,1,0,
		0,0,20,249,1,0,0,0,22,255,1,0,0,0,24,260,1,0,0,0,26,265,1,0,0,0,28,269,
		1,0,0,0,30,277,1,0,0,0,32,281,1,0,0,0,34,285,1,0,0,0,36,291,1,0,0,0,38,
		294,1,0,0,0,40,300,1,0,0,0,42,306,1,0,0,0,44,310,1,0,0,0,46,318,1,0,0,
		0,48,321,1,0,0,0,50,326,1,0,0,0,52,329,1,0,0,0,54,334,1,0,0,0,56,340,1,
		0,0,0,58,346,1,0,0,0,60,350,1,0,0,0,62,354,1,0,0,0,64,356,1,0,0,0,66,359,
		1,0,0,0,68,362,1,0,0,0,70,378,1,0,0,0,72,382,1,0,0,0,74,389,1,0,0,0,76,
		394,1,0,0,0,78,398,1,0,0,0,80,402,1,0,0,0,82,411,1,0,0,0,84,415,1,0,0,
		0,86,420,1,0,0,0,88,424,1,0,0,0,90,426,1,0,0,0,92,430,1,0,0,0,94,432,1,
		0,0,0,96,440,1,0,0,0,98,444,1,0,0,0,100,447,1,0,0,0,102,460,1,0,0,0,104,
		473,1,0,0,0,106,485,1,0,0,0,108,489,1,0,0,0,110,492,1,0,0,0,112,504,1,
		0,0,0,114,514,1,0,0,0,116,518,1,0,0,0,118,521,1,0,0,0,120,525,1,0,0,0,
		122,530,1,0,0,0,124,535,1,0,0,0,126,540,1,0,0,0,128,545,1,0,0,0,130,550,
		1,0,0,0,132,555,1,0,0,0,134,560,1,0,0,0,136,565,1,0,0,0,138,570,1,0,0,
		0,140,141,3,2,1,0,141,143,3,4,2,0,142,144,3,6,3,0,143,142,1,0,0,0,144,
		145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,149,3,
		8,4,0,148,147,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,152,3,10,5,0,
		151,150,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,155,3,12,6,0,154,153,
		1,0,0,0,154,155,1,0,0,0,155,1,1,0,0,0,156,157,3,70,35,0,157,158,5,13,0,
		0,158,159,3,72,36,0,159,160,5,18,0,0,160,3,1,0,0,0,161,162,3,74,37,0,162,
		163,5,13,0,0,163,164,3,22,11,0,164,165,3,24,12,0,165,166,3,34,17,0,166,
		167,5,18,0,0,167,5,1,0,0,0,168,170,3,14,7,0,169,168,1,0,0,0,170,171,1,
		0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,175,3,16,8,0,
		174,173,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,178,3,18,9,0,177,176,
		1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,181,3,20,10,0,180,179,1,0,
		0,0,180,181,1,0,0,0,181,7,1,0,0,0,182,183,5,7,0,0,183,184,5,18,0,0,184,
		185,3,40,20,0,185,186,3,54,27,0,186,187,3,44,22,0,187,191,3,48,24,0,188,
		190,3,52,26,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,
		1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,18,0,0,195,9,1,0,0,0,
		196,197,5,8,0,0,197,198,5,18,0,0,198,199,3,40,20,0,199,200,3,54,27,0,200,
		201,3,44,22,0,201,205,3,48,24,0,202,204,3,52,26,0,203,202,1,0,0,0,204,
		207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,205,1,
		0,0,0,208,209,5,18,0,0,209,11,1,0,0,0,210,211,3,74,37,0,211,212,5,13,0,
		0,212,213,3,90,45,0,213,215,5,13,0,0,214,216,3,66,33,0,215,214,1,0,0,0,
		215,216,1,0,0,0,216,217,1,0,0,0,217,218,5,13,0,0,218,219,3,58,29,0,219,
		220,5,13,0,0,220,221,3,60,30,0,221,222,5,13,0,0,222,223,3,62,31,0,223,
		224,5,18,0,0,224,13,1,0,0,0,225,226,5,6,0,0,226,227,3,76,38,0,227,228,
		5,13,0,0,228,229,3,26,13,0,229,230,5,13,0,0,230,231,3,28,14,0,231,233,
		3,36,18,0,232,234,3,38,19,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,
		0,0,0,235,236,5,18,0,0,236,15,1,0,0,0,237,239,3,74,37,0,238,240,3,30,15,
		0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
		17,1,0,0,0,243,245,3,74,37,0,244,246,3,32,16,0,245,244,1,0,0,0,246,247,
		1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,19,1,0,0,0,249,251,3,74,37,
		0,250,252,3,68,34,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,
		254,1,0,0,0,254,21,1,0,0,0,255,256,3,78,39,0,256,257,5,14,0,0,257,258,
		3,80,40,0,258,23,1,0,0,0,259,261,3,82,41,0,260,259,1,0,0,0,260,261,1,0,
		0,0,261,262,1,0,0,0,262,263,3,84,42,0,263,25,1,0,0,0,264,266,3,82,41,0,
		265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,3,84,42,0,268,
		27,1,0,0,0,269,270,3,112,56,0,270,271,5,13,0,0,271,272,3,108,54,0,272,
		273,3,110,55,0,273,275,5,13,0,0,274,276,3,86,43,0,275,274,1,0,0,0,275,
		276,1,0,0,0,276,29,1,0,0,0,277,278,5,13,0,0,278,279,3,124,62,0,279,280,
		5,18,0,0,280,31,1,0,0,0,281,282,5,13,0,0,282,283,3,122,61,0,283,284,5,
		18,0,0,284,33,1,0,0,0,285,286,5,13,0,0,286,287,3,88,44,0,287,288,3,112,
		56,0,288,289,3,108,54,0,289,290,3,110,55,0,290,35,1,0,0,0,291,292,5,13,
		0,0,292,293,3,130,65,0,293,37,1,0,0,0,294,296,5,18,0,0,295,297,3,64,32,
		0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,
		39,1,0,0,0,300,302,5,9,0,0,301,303,3,42,21,0,302,301,1,0,0,0,303,304,1,
		0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,41,1,0,0,0,306,307,5,13,0,0,
		307,308,3,126,63,0,308,309,5,18,0,0,309,43,1,0,0,0,310,311,5,11,0,0,311,
		312,5,13,0,0,312,314,3,134,67,0,313,315,3,46,23,0,314,313,1,0,0,0,314,
		315,1,0,0,0,315,316,1,0,0,0,316,317,5,18,0,0,317,45,1,0,0,0,318,319,5,
		13,0,0,319,320,3,138,69,0,320,47,1,0,0,0,321,322,5,13,0,0,322,324,3,116,
		58,0,323,325,3,50,25,0,324,323,1,0,0,0,324,325,1,0,0,0,325,49,1,0,0,0,
		326,327,5,13,0,0,327,328,3,136,68,0,328,51,1,0,0,0,329,330,5,13,0,0,330,
		331,3,94,47,0,331,332,5,13,0,0,332,333,3,96,48,0,333,53,1,0,0,0,334,336,
		5,10,0,0,335,337,3,56,28,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,
		0,0,338,339,1,0,0,0,339,55,1,0,0,0,340,341,5,13,0,0,341,342,3,132,66,0,
		342,343,5,18,0,0,343,57,1,0,0,0,344,347,3,100,50,0,345,347,3,106,53,0,
		346,344,1,0,0,0,346,345,1,0,0,0,347,59,1,0,0,0,348,351,3,102,51,0,349,
		351,3,106,53,0,350,348,1,0,0,0,350,349,1,0,0,0,351,61,1,0,0,0,352,355,
		3,104,52,0,353,355,3,106,53,0,354,352,1,0,0,0,354,353,1,0,0,0,355,63,1,
		0,0,0,356,357,5,13,0,0,357,358,3,114,57,0,358,65,1,0,0,0,359,360,3,98,
		49,0,360,361,3,92,46,0,361,67,1,0,0,0,362,364,5,13,0,0,363,365,3,116,58,
		0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,5,13,0,0,367,
		369,3,118,59,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,372,
		5,13,0,0,371,373,3,120,60,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,
		0,0,0,374,375,5,13,0,0,375,376,3,128,64,0,376,377,5,18,0,0,377,69,1,0,
		0,0,378,379,5,15,0,0,379,380,5,15,0,0,380,381,5,15,0,0,381,71,1,0,0,0,
		382,384,5,16,0,0,383,385,5,16,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
		387,1,0,0,0,386,388,5,16,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,73,1,
		0,0,0,389,390,5,15,0,0,390,391,5,15,0,0,391,392,5,15,0,0,392,75,1,0,0,
		0,393,395,7,0,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,
		397,1,0,0,0,397,77,1,0,0,0,398,399,5,16,0,0,399,400,5,16,0,0,400,401,5,
		16,0,0,401,79,1,0,0,0,402,403,5,16,0,0,403,404,5,16,0,0,404,405,5,16,0,
		0,405,406,5,16,0,0,406,407,5,16,0,0,407,408,5,16,0,0,408,409,5,16,0,0,
		409,410,5,16,0,0,410,81,1,0,0,0,411,412,5,15,0,0,412,413,5,15,0,0,413,
		414,5,15,0,0,414,83,1,0,0,0,415,416,5,15,0,0,416,417,5,15,0,0,417,418,
		5,15,0,0,418,85,1,0,0,0,419,421,5,16,0,0,420,419,1,0,0,0,421,422,1,0,0,
		0,422,420,1,0,0,0,422,423,1,0,0,0,423,87,1,0,0,0,424,425,5,15,0,0,425,
		89,1,0,0,0,426,427,5,15,0,0,427,428,5,15,0,0,428,429,5,15,0,0,429,91,1,
		0,0,0,430,431,5,15,0,0,431,93,1,0,0,0,432,434,7,0,0,0,433,435,7,0,0,0,
		434,433,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,438,7,0,0,0,437,436,
		1,0,0,0,437,438,1,0,0,0,438,95,1,0,0,0,439,441,7,0,0,0,440,439,1,0,0,0,
		441,442,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,97,1,0,0,0,444,445,
		5,15,0,0,445,99,1,0,0,0,446,448,5,16,0,0,447,446,1,0,0,0,448,449,1,0,0,
		0,449,447,1,0,0,0,449,450,1,0,0,0,450,457,1,0,0,0,451,453,7,1,0,0,452,
		454,5,16,0,0,453,452,1,0,0,0,454,455,1,0,0,0,455,453,1,0,0,0,455,456,1,
		0,0,0,456,458,1,0,0,0,457,451,1,0,0,0,457,458,1,0,0,0,458,101,1,0,0,0,
		459,461,5,16,0,0,460,459,1,0,0,0,461,462,1,0,0,0,462,460,1,0,0,0,462,463,
		1,0,0,0,463,470,1,0,0,0,464,466,7,1,0,0,465,467,5,16,0,0,466,465,1,0,0,
		0,467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,
		464,1,0,0,0,470,471,1,0,0,0,471,103,1,0,0,0,472,474,5,16,0,0,473,472,1,
		0,0,0,474,475,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,483,1,0,0,0,
		477,479,7,1,0,0,478,480,5,16,0,0,479,478,1,0,0,0,480,481,1,0,0,0,481,479,
		1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,477,1,0,0,0,483,484,1,0,0,
		0,484,105,1,0,0,0,485,486,5,15,0,0,486,487,5,15,0,0,487,488,5,15,0,0,488,
		107,1,0,0,0,489,490,5,15,0,0,490,109,1,0,0,0,491,493,5,16,0,0,492,491,
		1,0,0,0,493,494,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,502,1,0,0,
		0,496,498,7,1,0,0,497,499,5,16,0,0,498,497,1,0,0,0,499,500,1,0,0,0,500,
		498,1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,496,1,0,0,0,502,503,1,
		0,0,0,503,111,1,0,0,0,504,506,5,16,0,0,505,507,5,16,0,0,506,505,1,0,0,
		0,506,507,1,0,0,0,507,509,1,0,0,0,508,510,5,16,0,0,509,508,1,0,0,0,509,
		510,1,0,0,0,510,512,1,0,0,0,511,513,5,16,0,0,512,511,1,0,0,0,512,513,1,
		0,0,0,513,113,1,0,0,0,514,515,7,0,0,0,515,516,7,0,0,0,516,517,7,0,0,0,
		517,115,1,0,0,0,518,519,5,15,0,0,519,520,5,15,0,0,520,117,1,0,0,0,521,
		522,5,15,0,0,522,523,5,15,0,0,523,524,5,15,0,0,524,119,1,0,0,0,525,527,
		5,15,0,0,526,528,5,15,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,121,1,0,
		0,0,529,531,7,0,0,0,530,529,1,0,0,0,531,532,1,0,0,0,532,530,1,0,0,0,532,
		533,1,0,0,0,533,123,1,0,0,0,534,536,8,2,0,0,535,534,1,0,0,0,536,537,1,
		0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,125,1,0,0,0,539,541,8,2,0,0,
		540,539,1,0,0,0,541,542,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,127,
		1,0,0,0,544,546,8,2,0,0,545,544,1,0,0,0,546,547,1,0,0,0,547,545,1,0,0,
		0,547,548,1,0,0,0,548,129,1,0,0,0,549,551,8,2,0,0,550,549,1,0,0,0,551,
		552,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,131,1,0,0,0,554,556,8,
		2,0,0,555,554,1,0,0,0,556,557,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,
		558,133,1,0,0,0,559,561,8,2,0,0,560,559,1,0,0,0,561,562,1,0,0,0,562,560,
		1,0,0,0,562,563,1,0,0,0,563,135,1,0,0,0,564,566,8,2,0,0,565,564,1,0,0,
		0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,137,1,0,0,0,569,
		571,8,2,0,0,570,569,1,0,0,0,571,572,1,0,0,0,572,570,1,0,0,0,572,573,1,
		0,0,0,573,139,1,0,0,0,61,145,148,151,154,171,174,177,180,191,205,215,233,
		241,247,253,260,265,275,298,304,314,324,338,346,350,354,364,368,372,384,
		387,396,422,434,437,442,449,455,457,462,468,470,475,481,483,494,500,502,
		506,509,512,527,532,537,542,547,552,557,562,567,572
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
