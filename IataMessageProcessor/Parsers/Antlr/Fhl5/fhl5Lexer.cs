//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fhl5.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fhl5Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierSsr=3, LineIdentifierOsi=4, LineIdentifierUld=5, 
		HbsLineIdentifier=6, ShpLineIdentifier=7, CneLineIdentifier=8, NamIdentifier=9, 
		AdrIdentifier=10, LocIdentifier=11, HarmonisedCommodityCodeIdentifier=12, 
		SeparatorSlant=13, SeparatorHyphen=14, A=15, N=16, G=17, SeparatorCrlf=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LineIdentifierSsr", "LineIdentifierOsi", "LineIdentifierUld", 
		"HbsLineIdentifier", "ShpLineIdentifier", "CneLineIdentifier", "NamIdentifier", 
		"AdrIdentifier", "LocIdentifier", "HarmonisedCommodityCodeIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf", "DIGIT", 
		"CAPITAL_LETTER", "SMALL_LETTER", "SLANT", "HYPHEN", "SPACE", "EXCLAMATION_MARK", 
		"DOUBLE_QUOTE", "NUMBER_SIGN", "DOLLAR_SIGN", "PERCENT", "AMPERSAND", 
		"SINGLE_QUOTE", "LEFT_OPENING_PARENTHESIS", "RIGHT_CLOSING_PARENTHESIS", 
		"ASTERISK", "PLUS", "COMMA", "DOT", "COLON", "SEMICOLON", "LESS_THAN", 
		"EQUAL_SIGN", "GREATER_THAN", "QUESTION_MARK", "AT_SYMBOL", "LEFT_OPENING_BRACKET", 
		"BACK_SLASH", "RIGHT_CLOSING_BRACKET", "CARET_CIRCUMFLEX", "UNDERSCORE", 
		"GRAVE_ACCENT", "LEFT_OPENING_BRACE", "VERTICAL_BAR", "RIGHT_CLOSING_BRACE", 
		"TILDE"
	};


	public fhl5Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public fhl5Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'SSR/'", "'OSI/'", "'ULD/'", "'HBS/'", "'SHP'", "'CNE'", 
		"'NAM'", "'ADR'", "'LOC'", "'/NH/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierSsr", "LineIdentifierOsi", "LineIdentifierUld", 
		"HbsLineIdentifier", "ShpLineIdentifier", "CneLineIdentifier", "NamIdentifier", 
		"AdrIdentifier", "LocIdentifier", "HarmonisedCommodityCodeIdentifier", 
		"SeparatorSlant", "SeparatorHyphen", "A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fhl5.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fhl5Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,278,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,3,16,198,8,16,1,17,3,17,201,8,17,1,17,1,17,3,17,
		205,8,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
		24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
		31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
		38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
		45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
		52,1,52,1,53,1,53,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,0,41,0,43,0,45,
		0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,
		0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,
		0,103,0,105,0,107,0,1,0,3,1,0,48,57,1,0,65,90,1,0,97,122,273,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,118,1,0,0,0,9,123,
		1,0,0,0,11,128,1,0,0,0,13,133,1,0,0,0,15,137,1,0,0,0,17,141,1,0,0,0,19,
		145,1,0,0,0,21,149,1,0,0,0,23,153,1,0,0,0,25,158,1,0,0,0,27,160,1,0,0,
		0,29,162,1,0,0,0,31,164,1,0,0,0,33,197,1,0,0,0,35,204,1,0,0,0,37,206,1,
		0,0,0,39,208,1,0,0,0,41,210,1,0,0,0,43,212,1,0,0,0,45,214,1,0,0,0,47,216,
		1,0,0,0,49,218,1,0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,55,224,1,0,0,0,57,
		226,1,0,0,0,59,228,1,0,0,0,61,230,1,0,0,0,63,232,1,0,0,0,65,234,1,0,0,
		0,67,236,1,0,0,0,69,238,1,0,0,0,71,240,1,0,0,0,73,242,1,0,0,0,75,244,1,
		0,0,0,77,246,1,0,0,0,79,248,1,0,0,0,81,250,1,0,0,0,83,252,1,0,0,0,85,254,
		1,0,0,0,87,256,1,0,0,0,89,258,1,0,0,0,91,260,1,0,0,0,93,262,1,0,0,0,95,
		264,1,0,0,0,97,266,1,0,0,0,99,268,1,0,0,0,101,270,1,0,0,0,103,272,1,0,
		0,0,105,274,1,0,0,0,107,276,1,0,0,0,109,110,5,46,0,0,110,2,1,0,0,0,111,
		112,5,44,0,0,112,4,1,0,0,0,113,114,5,83,0,0,114,115,5,83,0,0,115,116,5,
		82,0,0,116,117,5,47,0,0,117,6,1,0,0,0,118,119,5,79,0,0,119,120,5,83,0,
		0,120,121,5,73,0,0,121,122,5,47,0,0,122,8,1,0,0,0,123,124,5,85,0,0,124,
		125,5,76,0,0,125,126,5,68,0,0,126,127,5,47,0,0,127,10,1,0,0,0,128,129,
		5,72,0,0,129,130,5,66,0,0,130,131,5,83,0,0,131,132,5,47,0,0,132,12,1,0,
		0,0,133,134,5,83,0,0,134,135,5,72,0,0,135,136,5,80,0,0,136,14,1,0,0,0,
		137,138,5,67,0,0,138,139,5,78,0,0,139,140,5,69,0,0,140,16,1,0,0,0,141,
		142,5,78,0,0,142,143,5,65,0,0,143,144,5,77,0,0,144,18,1,0,0,0,145,146,
		5,65,0,0,146,147,5,68,0,0,147,148,5,82,0,0,148,20,1,0,0,0,149,150,5,76,
		0,0,150,151,5,79,0,0,151,152,5,67,0,0,152,22,1,0,0,0,153,154,5,47,0,0,
		154,155,5,78,0,0,155,156,5,72,0,0,156,157,5,47,0,0,157,24,1,0,0,0,158,
		159,3,43,21,0,159,26,1,0,0,0,160,161,3,45,22,0,161,28,1,0,0,0,162,163,
		3,39,19,0,163,30,1,0,0,0,164,165,3,37,18,0,165,32,1,0,0,0,166,198,3,47,
		23,0,167,198,3,49,24,0,168,198,3,51,25,0,169,198,3,53,26,0,170,198,3,55,
		27,0,171,198,3,57,28,0,172,198,3,59,29,0,173,198,3,61,30,0,174,198,3,63,
		31,0,175,198,3,65,32,0,176,198,3,67,33,0,177,198,3,69,34,0,178,198,3,71,
		35,0,179,198,3,73,36,0,180,198,3,75,37,0,181,198,3,77,38,0,182,198,3,79,
		39,0,183,198,3,81,40,0,184,198,3,83,41,0,185,198,3,85,42,0,186,198,3,87,
		43,0,187,198,3,89,44,0,188,198,3,91,45,0,189,198,3,93,46,0,190,198,3,95,
		47,0,191,198,3,97,48,0,192,198,3,99,49,0,193,198,3,101,50,0,194,198,3,
		103,51,0,195,198,3,105,52,0,196,198,3,107,53,0,197,166,1,0,0,0,197,167,
		1,0,0,0,197,168,1,0,0,0,197,169,1,0,0,0,197,170,1,0,0,0,197,171,1,0,0,
		0,197,172,1,0,0,0,197,173,1,0,0,0,197,174,1,0,0,0,197,175,1,0,0,0,197,
		176,1,0,0,0,197,177,1,0,0,0,197,178,1,0,0,0,197,179,1,0,0,0,197,180,1,
		0,0,0,197,181,1,0,0,0,197,182,1,0,0,0,197,183,1,0,0,0,197,184,1,0,0,0,
		197,185,1,0,0,0,197,186,1,0,0,0,197,187,1,0,0,0,197,188,1,0,0,0,197,189,
		1,0,0,0,197,190,1,0,0,0,197,191,1,0,0,0,197,192,1,0,0,0,197,193,1,0,0,
		0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,34,1,0,0,0,199,201,
		5,13,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,205,5,10,
		0,0,203,205,5,13,0,0,204,200,1,0,0,0,204,203,1,0,0,0,205,36,1,0,0,0,206,
		207,7,0,0,0,207,38,1,0,0,0,208,209,7,1,0,0,209,40,1,0,0,0,210,211,7,2,
		0,0,211,42,1,0,0,0,212,213,5,47,0,0,213,44,1,0,0,0,214,215,5,45,0,0,215,
		46,1,0,0,0,216,217,5,32,0,0,217,48,1,0,0,0,218,219,5,33,0,0,219,50,1,0,
		0,0,220,221,5,34,0,0,221,52,1,0,0,0,222,223,5,35,0,0,223,54,1,0,0,0,224,
		225,5,36,0,0,225,56,1,0,0,0,226,227,5,37,0,0,227,58,1,0,0,0,228,229,5,
		38,0,0,229,60,1,0,0,0,230,231,5,39,0,0,231,62,1,0,0,0,232,233,5,40,0,0,
		233,64,1,0,0,0,234,235,5,41,0,0,235,66,1,0,0,0,236,237,5,42,0,0,237,68,
		1,0,0,0,238,239,5,43,0,0,239,70,1,0,0,0,240,241,5,44,0,0,241,72,1,0,0,
		0,242,243,5,46,0,0,243,74,1,0,0,0,244,245,5,58,0,0,245,76,1,0,0,0,246,
		247,5,59,0,0,247,78,1,0,0,0,248,249,5,60,0,0,249,80,1,0,0,0,250,251,5,
		61,0,0,251,82,1,0,0,0,252,253,5,62,0,0,253,84,1,0,0,0,254,255,5,63,0,0,
		255,86,1,0,0,0,256,257,5,64,0,0,257,88,1,0,0,0,258,259,5,91,0,0,259,90,
		1,0,0,0,260,261,5,92,0,0,261,92,1,0,0,0,262,263,5,93,0,0,263,94,1,0,0,
		0,264,265,5,94,0,0,265,96,1,0,0,0,266,267,5,95,0,0,267,98,1,0,0,0,268,
		269,5,96,0,0,269,100,1,0,0,0,270,271,5,123,0,0,271,102,1,0,0,0,272,273,
		5,124,0,0,273,104,1,0,0,0,274,275,5,125,0,0,275,106,1,0,0,0,276,277,5,
		126,0,0,277,108,1,0,0,0,4,0,197,200,204,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
