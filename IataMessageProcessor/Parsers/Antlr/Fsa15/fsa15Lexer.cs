//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fsa15.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class fsa15Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LineIdentifierRcs=3, LineIdentifierRct=4, LineIdentifierRcf=5, 
		LineIdentifierBkd=6, LineIdentifierMan=7, LineIdentifierDep=8, LineIdentifierPre=9, 
		LineIdentifierTrm=10, LineIdentifierTfd=11, LineIdentifierNfd=12, LineIdentifierAwd=13, 
		LineIdentifierCcd=14, LineIdentifierDlv=15, LineIdentifierDis=16, LineIdentifierCrc=17, 
		LineIdentifierDdl=18, LineIdentifierTgc=19, LineIdentifierArr=20, LineIdentifierAwr=21, 
		LineIdentifierFoh=22, LineIdentifierUld=23, SeparatorSlant=24, SeparatorHyphen=25, 
		A=26, N=27, G=28, SeparatorCrlf=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LineIdentifierRcs", "LineIdentifierRct", "LineIdentifierRcf", 
		"LineIdentifierBkd", "LineIdentifierMan", "LineIdentifierDep", "LineIdentifierPre", 
		"LineIdentifierTrm", "LineIdentifierTfd", "LineIdentifierNfd", "LineIdentifierAwd", 
		"LineIdentifierCcd", "LineIdentifierDlv", "LineIdentifierDis", "LineIdentifierCrc", 
		"LineIdentifierDdl", "LineIdentifierTgc", "LineIdentifierArr", "LineIdentifierAwr", 
		"LineIdentifierFoh", "LineIdentifierUld", "SeparatorSlant", "SeparatorHyphen", 
		"A", "N", "G", "SeparatorCrlf", "DIGIT", "CAPITAL_LETTER", "SMALL_LETTER", 
		"SLANT", "HYPHEN", "SPACE", "EXCLAMATION_MARK", "DOUBLE_QUOTE", "NUMBER_SIGN", 
		"DOLLAR_SIGN", "PERCENT", "AMPERSAND", "SINGLE_QUOTE", "LEFT_OPENING_PARENTHESIS", 
		"RIGHT_CLOSING_PARENTHESIS", "ASTERISK", "PLUS", "COMMA", "DOT", "COLON", 
		"SEMICOLON", "LESS_THAN", "EQUAL_SIGN", "GREATER_THAN", "QUESTION_MARK", 
		"AT_SYMBOL", "LEFT_OPENING_BRACKET", "BACK_SLASH", "RIGHT_CLOSING_BRACKET", 
		"CARET_CIRCUMFLEX", "UNDERSCORE", "GRAVE_ACCENT", "LEFT_OPENING_BRACE", 
		"VERTICAL_BAR", "RIGHT_CLOSING_BRACE", "TILDE"
	};


	public fsa15Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public fsa15Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'RCS/'", "'RCT/'", "'RCF/'", "'BKD/'", "'MAN/'", 
		"'DEP/'", "'PRE/'", "'TRM/'", "'TFD/'", "'NFD/'", "'AWD/'", "'CCD/'", 
		"'DLV/'", "'DIS/'", "'CRC/'", "'DDL/'", "'TGC/'", "'ARR/'", "'AWR/'", 
		"'FOH/'", "'ULD'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LineIdentifierRcs", "LineIdentifierRct", "LineIdentifierRcf", 
		"LineIdentifierBkd", "LineIdentifierMan", "LineIdentifierDep", "LineIdentifierPre", 
		"LineIdentifierTrm", "LineIdentifierTfd", "LineIdentifierNfd", "LineIdentifierAwd", 
		"LineIdentifierCcd", "LineIdentifierDlv", "LineIdentifierDis", "LineIdentifierCrc", 
		"LineIdentifierDdl", "LineIdentifierTgc", "LineIdentifierArr", "LineIdentifierAwr", 
		"LineIdentifierFoh", "LineIdentifierUld", "SeparatorSlant", "SeparatorHyphen", 
		"A", "N", "G", "SeparatorCrlf"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fsa15.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static fsa15Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,359,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,3,27,279,8,27,1,28,3,28,282,8,28,1,28,1,28,3,28,286,8,28,1,29,1,29,
		1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
		1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
		1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
		1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
		1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
		0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
		51,26,53,27,55,28,57,29,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,
		0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,
		0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,
		0,1,0,3,1,0,48,57,1,0,65,90,1,0,97,122,354,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,131,1,0,
		0,0,3,133,1,0,0,0,5,135,1,0,0,0,7,140,1,0,0,0,9,145,1,0,0,0,11,150,1,0,
		0,0,13,155,1,0,0,0,15,160,1,0,0,0,17,165,1,0,0,0,19,170,1,0,0,0,21,175,
		1,0,0,0,23,180,1,0,0,0,25,185,1,0,0,0,27,190,1,0,0,0,29,195,1,0,0,0,31,
		200,1,0,0,0,33,205,1,0,0,0,35,210,1,0,0,0,37,215,1,0,0,0,39,220,1,0,0,
		0,41,225,1,0,0,0,43,230,1,0,0,0,45,235,1,0,0,0,47,239,1,0,0,0,49,241,1,
		0,0,0,51,243,1,0,0,0,53,245,1,0,0,0,55,278,1,0,0,0,57,285,1,0,0,0,59,287,
		1,0,0,0,61,289,1,0,0,0,63,291,1,0,0,0,65,293,1,0,0,0,67,295,1,0,0,0,69,
		297,1,0,0,0,71,299,1,0,0,0,73,301,1,0,0,0,75,303,1,0,0,0,77,305,1,0,0,
		0,79,307,1,0,0,0,81,309,1,0,0,0,83,311,1,0,0,0,85,313,1,0,0,0,87,315,1,
		0,0,0,89,317,1,0,0,0,91,319,1,0,0,0,93,321,1,0,0,0,95,323,1,0,0,0,97,325,
		1,0,0,0,99,327,1,0,0,0,101,329,1,0,0,0,103,331,1,0,0,0,105,333,1,0,0,0,
		107,335,1,0,0,0,109,337,1,0,0,0,111,339,1,0,0,0,113,341,1,0,0,0,115,343,
		1,0,0,0,117,345,1,0,0,0,119,347,1,0,0,0,121,349,1,0,0,0,123,351,1,0,0,
		0,125,353,1,0,0,0,127,355,1,0,0,0,129,357,1,0,0,0,131,132,5,46,0,0,132,
		2,1,0,0,0,133,134,5,44,0,0,134,4,1,0,0,0,135,136,5,82,0,0,136,137,5,67,
		0,0,137,138,5,83,0,0,138,139,5,47,0,0,139,6,1,0,0,0,140,141,5,82,0,0,141,
		142,5,67,0,0,142,143,5,84,0,0,143,144,5,47,0,0,144,8,1,0,0,0,145,146,5,
		82,0,0,146,147,5,67,0,0,147,148,5,70,0,0,148,149,5,47,0,0,149,10,1,0,0,
		0,150,151,5,66,0,0,151,152,5,75,0,0,152,153,5,68,0,0,153,154,5,47,0,0,
		154,12,1,0,0,0,155,156,5,77,0,0,156,157,5,65,0,0,157,158,5,78,0,0,158,
		159,5,47,0,0,159,14,1,0,0,0,160,161,5,68,0,0,161,162,5,69,0,0,162,163,
		5,80,0,0,163,164,5,47,0,0,164,16,1,0,0,0,165,166,5,80,0,0,166,167,5,82,
		0,0,167,168,5,69,0,0,168,169,5,47,0,0,169,18,1,0,0,0,170,171,5,84,0,0,
		171,172,5,82,0,0,172,173,5,77,0,0,173,174,5,47,0,0,174,20,1,0,0,0,175,
		176,5,84,0,0,176,177,5,70,0,0,177,178,5,68,0,0,178,179,5,47,0,0,179,22,
		1,0,0,0,180,181,5,78,0,0,181,182,5,70,0,0,182,183,5,68,0,0,183,184,5,47,
		0,0,184,24,1,0,0,0,185,186,5,65,0,0,186,187,5,87,0,0,187,188,5,68,0,0,
		188,189,5,47,0,0,189,26,1,0,0,0,190,191,5,67,0,0,191,192,5,67,0,0,192,
		193,5,68,0,0,193,194,5,47,0,0,194,28,1,0,0,0,195,196,5,68,0,0,196,197,
		5,76,0,0,197,198,5,86,0,0,198,199,5,47,0,0,199,30,1,0,0,0,200,201,5,68,
		0,0,201,202,5,73,0,0,202,203,5,83,0,0,203,204,5,47,0,0,204,32,1,0,0,0,
		205,206,5,67,0,0,206,207,5,82,0,0,207,208,5,67,0,0,208,209,5,47,0,0,209,
		34,1,0,0,0,210,211,5,68,0,0,211,212,5,68,0,0,212,213,5,76,0,0,213,214,
		5,47,0,0,214,36,1,0,0,0,215,216,5,84,0,0,216,217,5,71,0,0,217,218,5,67,
		0,0,218,219,5,47,0,0,219,38,1,0,0,0,220,221,5,65,0,0,221,222,5,82,0,0,
		222,223,5,82,0,0,223,224,5,47,0,0,224,40,1,0,0,0,225,226,5,65,0,0,226,
		227,5,87,0,0,227,228,5,82,0,0,228,229,5,47,0,0,229,42,1,0,0,0,230,231,
		5,70,0,0,231,232,5,79,0,0,232,233,5,72,0,0,233,234,5,47,0,0,234,44,1,0,
		0,0,235,236,5,85,0,0,236,237,5,76,0,0,237,238,5,68,0,0,238,46,1,0,0,0,
		239,240,3,65,32,0,240,48,1,0,0,0,241,242,3,67,33,0,242,50,1,0,0,0,243,
		244,3,61,30,0,244,52,1,0,0,0,245,246,3,59,29,0,246,54,1,0,0,0,247,279,
		3,69,34,0,248,279,3,71,35,0,249,279,3,73,36,0,250,279,3,75,37,0,251,279,
		3,77,38,0,252,279,3,79,39,0,253,279,3,81,40,0,254,279,3,83,41,0,255,279,
		3,85,42,0,256,279,3,87,43,0,257,279,3,89,44,0,258,279,3,91,45,0,259,279,
		3,93,46,0,260,279,3,95,47,0,261,279,3,97,48,0,262,279,3,99,49,0,263,279,
		3,101,50,0,264,279,3,103,51,0,265,279,3,105,52,0,266,279,3,107,53,0,267,
		279,3,109,54,0,268,279,3,111,55,0,269,279,3,113,56,0,270,279,3,115,57,
		0,271,279,3,117,58,0,272,279,3,119,59,0,273,279,3,121,60,0,274,279,3,123,
		61,0,275,279,3,125,62,0,276,279,3,127,63,0,277,279,3,129,64,0,278,247,
		1,0,0,0,278,248,1,0,0,0,278,249,1,0,0,0,278,250,1,0,0,0,278,251,1,0,0,
		0,278,252,1,0,0,0,278,253,1,0,0,0,278,254,1,0,0,0,278,255,1,0,0,0,278,
		256,1,0,0,0,278,257,1,0,0,0,278,258,1,0,0,0,278,259,1,0,0,0,278,260,1,
		0,0,0,278,261,1,0,0,0,278,262,1,0,0,0,278,263,1,0,0,0,278,264,1,0,0,0,
		278,265,1,0,0,0,278,266,1,0,0,0,278,267,1,0,0,0,278,268,1,0,0,0,278,269,
		1,0,0,0,278,270,1,0,0,0,278,271,1,0,0,0,278,272,1,0,0,0,278,273,1,0,0,
		0,278,274,1,0,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,
		56,1,0,0,0,280,282,5,13,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,
		0,0,0,283,286,5,10,0,0,284,286,5,13,0,0,285,281,1,0,0,0,285,284,1,0,0,
		0,286,58,1,0,0,0,287,288,7,0,0,0,288,60,1,0,0,0,289,290,7,1,0,0,290,62,
		1,0,0,0,291,292,7,2,0,0,292,64,1,0,0,0,293,294,5,47,0,0,294,66,1,0,0,0,
		295,296,5,45,0,0,296,68,1,0,0,0,297,298,5,32,0,0,298,70,1,0,0,0,299,300,
		5,33,0,0,300,72,1,0,0,0,301,302,5,34,0,0,302,74,1,0,0,0,303,304,5,35,0,
		0,304,76,1,0,0,0,305,306,5,36,0,0,306,78,1,0,0,0,307,308,5,37,0,0,308,
		80,1,0,0,0,309,310,5,38,0,0,310,82,1,0,0,0,311,312,5,39,0,0,312,84,1,0,
		0,0,313,314,5,40,0,0,314,86,1,0,0,0,315,316,5,41,0,0,316,88,1,0,0,0,317,
		318,5,42,0,0,318,90,1,0,0,0,319,320,5,43,0,0,320,92,1,0,0,0,321,322,5,
		44,0,0,322,94,1,0,0,0,323,324,5,46,0,0,324,96,1,0,0,0,325,326,5,58,0,0,
		326,98,1,0,0,0,327,328,5,59,0,0,328,100,1,0,0,0,329,330,5,60,0,0,330,102,
		1,0,0,0,331,332,5,61,0,0,332,104,1,0,0,0,333,334,5,62,0,0,334,106,1,0,
		0,0,335,336,5,63,0,0,336,108,1,0,0,0,337,338,5,64,0,0,338,110,1,0,0,0,
		339,340,5,91,0,0,340,112,1,0,0,0,341,342,5,92,0,0,342,114,1,0,0,0,343,
		344,5,93,0,0,344,116,1,0,0,0,345,346,5,94,0,0,346,118,1,0,0,0,347,348,
		5,95,0,0,348,120,1,0,0,0,349,350,5,96,0,0,350,122,1,0,0,0,351,352,5,123,
		0,0,352,124,1,0,0,0,353,354,5,124,0,0,354,126,1,0,0,0,355,356,5,125,0,
		0,356,128,1,0,0,0,357,358,5,126,0,0,358,130,1,0,0,0,4,0,278,281,285,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
